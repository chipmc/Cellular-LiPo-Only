
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-LiPo-Only/target/Cellular-LiPo-Only.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c08  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00018da0  2**0
                  CONTENTS
  3 .data         00000154  2003e02c  000d8c20  0000e02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000670  2003e180  2003e180  0001e180  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d8d74  000d8d74  00018d74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d8d9c  000d8d9c  00018d9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000bccf3  00000000  00000000  00018da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010a89  00000000  00000000  000d5a93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00015add  00000000  00000000  000e651c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000021b0  00000000  00000000  000fbff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000036f8  00000000  00000000  000fe1a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000332d9  00000000  00000000  001018a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00026e7a  00000000  00000000  00134b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000e161b  00000000  00000000  0015b9f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c2e8  00000000  00000000  0023d010  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	2c 82 0d 00                                         ,...

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fbff 	bl	d7830 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fc04 	bl	d7846 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e02c 	.word	0x2003e02c
   d4048:	000d8c20 	.word	0x000d8c20
   d404c:	2003e180 	.word	0x2003e180
   d4050:	2003e180 	.word	0x2003e180
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fec7 	bl	d6dec <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8c18 	.word	0x000d8c18
   d4080:	000d8be0 	.word	0x000d8be0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bf20 	b.w	d4ec8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fce9 	bl	d4a60 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 be79 	b.w	d6d88 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bb4f 	b.w	d5738 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 bb55 	b.w	d5748 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 bb53 	b.w	d5748 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z10measureNow6String>:
// These are the particle functions that allow you to configure and run the device
// They are intended to allow for customization and control during installations
// and to allow for management.

int measureNow(String command) // Function to force sending data in current hour
{
   d40b4:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40b6:	4904      	ldr	r1, [pc, #16]	; (d40c8 <_Z10measureNow6String+0x14>)
   d40b8:	f002 fb54 	bl	d6764 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d40bc:	b118      	cbz	r0, d40c6 <_Z10measureNow6String+0x12>
  {
    state = MEASURING_STATE;
   d40be:	4b03      	ldr	r3, [pc, #12]	; (d40cc <_Z10measureNow6String+0x18>)
   d40c0:	2203      	movs	r2, #3
   d40c2:	701a      	strb	r2, [r3, #0]
    return 1;
   d40c4:	2001      	movs	r0, #1
  }
  else return 0;
}
   d40c6:	bd08      	pop	{r3, pc}
   d40c8:	000d85ef 	.word	0x000d85ef
   d40cc:	2003e1f5 	.word	0x2003e1f5

000d40d0 <_ZN11EEPROMClass4readEi.isra.18>:

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d40d0:	f001 b90c 	b.w	d52ec <HAL_EEPROM_Read>

000d40d4 <_ZN11EEPROMClass5writeEih.isra.19>:
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d40d4:	f001 b912 	b.w	d52fc <HAL_EEPROM_Write>

000d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.45>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40da:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d40de:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40e0:	f88d 3000 	strb.w	r3, [sp]
   d40e4:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40e6:	4605      	mov	r5, r0
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40e8:	f001 fe0c 	bl	d5d04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
   d40ec:	4628      	mov	r0, r5
   d40ee:	b003      	add	sp, #12
   d40f0:	bd30      	pop	{r4, r5, pc}
	...

000d40f4 <_Z17getSignalStrengthv>:

  return 1;
}

void getSignalStrength()
{
   d40f4:	b530      	push	{r4, r5, lr}
   d40f6:	b08f      	sub	sp, #60	; 0x3c
  // New Boron capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d40f8:	4915      	ldr	r1, [pc, #84]	; (d4150 <_Z17getSignalStrengthv+0x5c>)
  rat = sig.getAccessTechnology();
   d40fa:	4d16      	ldr	r5, [pc, #88]	; (d4154 <_Z17getSignalStrengthv+0x60>)
  //float strengthVal = sig.getStrengthValue();
  strengthPercentage = sig.getStrength();
   d40fc:	4c16      	ldr	r4, [pc, #88]	; (d4158 <_Z17getSignalStrengthv+0x64>)
}

void getSignalStrength()
{
  // New Boron capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d40fe:	a804      	add	r0, sp, #16
   d4100:	f001 fba6 	bl	d5850 <_ZN5spark13CellularClass4RSSIEv>
  rat = sig.getAccessTechnology();
   d4104:	a804      	add	r0, sp, #16
   d4106:	f001 fbfe 	bl	d5906 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d410a:	6028      	str	r0, [r5, #0]
  //float strengthVal = sig.getStrengthValue();
  strengthPercentage = sig.getStrength();
   d410c:	a804      	add	r0, sp, #16
   d410e:	f001 fc63 	bl	d59d8 <_ZNK14CellularSignal11getStrengthEv>
  //float qualityVal = sig.getQualityValue();
  qualityPercentage = sig.getQuality();
   d4112:	a804      	add	r0, sp, #16
{
  // New Boron capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
  rat = sig.getAccessTechnology();
  //float strengthVal = sig.getStrengthValue();
  strengthPercentage = sig.getStrength();
   d4114:	ed84 0a00 	vstr	s0, [r4]
  //float qualityVal = sig.getQualityValue();
  qualityPercentage = sig.getQuality();
   d4118:	f001 fc44 	bl	d59a4 <_ZNK14CellularSignal10getQualityEv>
   d411c:	4b0f      	ldr	r3, [pc, #60]	; (d415c <_Z17getSignalStrengthv+0x68>)
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d411e:	682d      	ldr	r5, [r5, #0]
  CellularSignal sig = Cellular.RSSI();
  rat = sig.getAccessTechnology();
  //float strengthVal = sig.getStrengthValue();
  strengthPercentage = sig.getStrength();
  //float qualityVal = sig.getQualityValue();
  qualityPercentage = sig.getQuality();
   d4120:	ed83 0a00 	vstr	s0, [r3]
   d4124:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4128:	f003 f9d4 	bl	d74d4 <__aeabi_f2d>
   d412c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4130:	6820      	ldr	r0, [r4, #0]
   d4132:	f003 f9cf 	bl	d74d4 <__aeabi_f2d>
   d4136:	e9cd 0100 	strd	r0, r1, [sp]
   d413a:	4b09      	ldr	r3, [pc, #36]	; (d4160 <_Z17getSignalStrengthv+0x6c>)
   d413c:	4a09      	ldr	r2, [pc, #36]	; (d4164 <_Z17getSignalStrengthv+0x70>)
   d413e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   d4142:	4809      	ldr	r0, [pc, #36]	; (d4168 <_Z17getSignalStrengthv+0x74>)
   d4144:	2140      	movs	r1, #64	; 0x40
   d4146:	f001 fb1f 	bl	d5788 <snprintf>
}
   d414a:	b00f      	add	sp, #60	; 0x3c
   d414c:	bd30      	pop	{r4, r5, pc}
   d414e:	bf00      	nop
   d4150:	2003e31c 	.word	0x2003e31c
   d4154:	2003e260 	.word	0x2003e260
   d4158:	2003e224 	.word	0x2003e224
   d415c:	2003e264 	.word	0x2003e264
   d4160:	2003e0a8 	.word	0x2003e0a8
   d4164:	000d8280 	.word	0x000d8280
   d4168:	2003e26c 	.word	0x2003e26c

000d416c <_Z16takeMeasurementsv>:
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
   d416c:	b507      	push	{r0, r1, r2, lr}
  // Mocked up here for the call - need to replace with your real readings

  // SoilMoisture Measurements here
  soilMoisture1 = random(100);
   d416e:	2064      	movs	r0, #100	; 0x64
   d4170:	f002 fa0e 	bl	d6590 <_Z6randomi>
   d4174:	ee07 0a90 	vmov	s15, r0
   d4178:	4b83      	ldr	r3, [pc, #524]	; (d4388 <_Z16takeMeasurementsv+0x21c>)
   d417a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d417e:	edc3 7a00 	vstr	s15, [r3]
  snprintf(soilMoisture1String,sizeof(soilMoisture1String), "%4.1f %%", soilMoisture1);
   d4182:	ee17 0a90 	vmov	r0, s15
   d4186:	f003 f9a5 	bl	d74d4 <__aeabi_f2d>
   d418a:	4a80      	ldr	r2, [pc, #512]	; (d438c <_Z16takeMeasurementsv+0x220>)
   d418c:	e9cd 0100 	strd	r0, r1, [sp]
   d4190:	2110      	movs	r1, #16
   d4192:	487f      	ldr	r0, [pc, #508]	; (d4390 <_Z16takeMeasurementsv+0x224>)
   d4194:	f001 faf8 	bl	d5788 <snprintf>
  soilMoisture2 = random(100);
   d4198:	2064      	movs	r0, #100	; 0x64
   d419a:	f002 f9f9 	bl	d6590 <_Z6randomi>
   d419e:	ee07 0a90 	vmov	s15, r0
   d41a2:	4b7c      	ldr	r3, [pc, #496]	; (d4394 <_Z16takeMeasurementsv+0x228>)
   d41a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d41a8:	edc3 7a00 	vstr	s15, [r3]
  snprintf(soilMoisture2String,sizeof(soilMoisture2String), "%4.1f %%", soilMoisture2);
   d41ac:	ee17 0a90 	vmov	r0, s15
   d41b0:	f003 f990 	bl	d74d4 <__aeabi_f2d>
   d41b4:	4a75      	ldr	r2, [pc, #468]	; (d438c <_Z16takeMeasurementsv+0x220>)
   d41b6:	e9cd 0100 	strd	r0, r1, [sp]
   d41ba:	2110      	movs	r1, #16
   d41bc:	4876      	ldr	r0, [pc, #472]	; (d4398 <_Z16takeMeasurementsv+0x22c>)
   d41be:	f001 fae3 	bl	d5788 <snprintf>
  soilMoisture3 = random(100);
   d41c2:	2064      	movs	r0, #100	; 0x64
   d41c4:	f002 f9e4 	bl	d6590 <_Z6randomi>
   d41c8:	ee07 0a90 	vmov	s15, r0
   d41cc:	4b73      	ldr	r3, [pc, #460]	; (d439c <_Z16takeMeasurementsv+0x230>)
   d41ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d41d2:	edc3 7a00 	vstr	s15, [r3]
  snprintf(soilMoisture3String,sizeof(soilMoisture3String), "%4.1f %%", soilMoisture3);
   d41d6:	ee17 0a90 	vmov	r0, s15
   d41da:	f003 f97b 	bl	d74d4 <__aeabi_f2d>
   d41de:	4a6b      	ldr	r2, [pc, #428]	; (d438c <_Z16takeMeasurementsv+0x220>)
   d41e0:	e9cd 0100 	strd	r0, r1, [sp]
   d41e4:	2110      	movs	r1, #16
   d41e6:	486e      	ldr	r0, [pc, #440]	; (d43a0 <_Z16takeMeasurementsv+0x234>)
   d41e8:	f001 face 	bl	d5788 <snprintf>
  soilMoisture4 = random(100);
   d41ec:	2064      	movs	r0, #100	; 0x64
   d41ee:	f002 f9cf 	bl	d6590 <_Z6randomi>
   d41f2:	ee07 0a90 	vmov	s15, r0
   d41f6:	4b6b      	ldr	r3, [pc, #428]	; (d43a4 <_Z16takeMeasurementsv+0x238>)
   d41f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d41fc:	edc3 7a00 	vstr	s15, [r3]
  snprintf(soilMoisture4String,sizeof(soilMoisture4String), "%4.1f %%", soilMoisture4);
   d4200:	ee17 0a90 	vmov	r0, s15
   d4204:	f003 f966 	bl	d74d4 <__aeabi_f2d>
   d4208:	4a60      	ldr	r2, [pc, #384]	; (d438c <_Z16takeMeasurementsv+0x220>)
   d420a:	e9cd 0100 	strd	r0, r1, [sp]
   d420e:	2110      	movs	r1, #16
   d4210:	4865      	ldr	r0, [pc, #404]	; (d43a8 <_Z16takeMeasurementsv+0x23c>)
   d4212:	f001 fab9 	bl	d5788 <snprintf>
  soilMoisture5 = random(100);
   d4216:	2064      	movs	r0, #100	; 0x64
   d4218:	f002 f9ba 	bl	d6590 <_Z6randomi>
   d421c:	ee07 0a90 	vmov	s15, r0
   d4220:	4b62      	ldr	r3, [pc, #392]	; (d43ac <_Z16takeMeasurementsv+0x240>)
   d4222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4226:	edc3 7a00 	vstr	s15, [r3]
  snprintf(soilMoisture5String,sizeof(soilMoisture5String), "%4.1f %%", soilMoisture5);
   d422a:	ee17 0a90 	vmov	r0, s15
   d422e:	f003 f951 	bl	d74d4 <__aeabi_f2d>
   d4232:	4a56      	ldr	r2, [pc, #344]	; (d438c <_Z16takeMeasurementsv+0x220>)
   d4234:	e9cd 0100 	strd	r0, r1, [sp]
   d4238:	2110      	movs	r1, #16
   d423a:	485d      	ldr	r0, [pc, #372]	; (d43b0 <_Z16takeMeasurementsv+0x244>)
   d423c:	f001 faa4 	bl	d5788 <snprintf>
  soilMoisture6 = random(100);
   d4240:	2064      	movs	r0, #100	; 0x64
   d4242:	f002 f9a5 	bl	d6590 <_Z6randomi>
   d4246:	ee07 0a90 	vmov	s15, r0
   d424a:	4b5a      	ldr	r3, [pc, #360]	; (d43b4 <_Z16takeMeasurementsv+0x248>)
   d424c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4250:	edc3 7a00 	vstr	s15, [r3]
  snprintf(soilMoisture6String,sizeof(soilMoisture6String), "%4.1f %%", soilMoisture6);
   d4254:	ee17 0a90 	vmov	r0, s15
   d4258:	f003 f93c 	bl	d74d4 <__aeabi_f2d>
   d425c:	4a4b      	ldr	r2, [pc, #300]	; (d438c <_Z16takeMeasurementsv+0x220>)
   d425e:	e9cd 0100 	strd	r0, r1, [sp]
   d4262:	2110      	movs	r1, #16
   d4264:	4854      	ldr	r0, [pc, #336]	; (d43b8 <_Z16takeMeasurementsv+0x24c>)
   d4266:	f001 fa8f 	bl	d5788 <snprintf>

  // Number of times the precipitation counter has tipped
  precipitationCount = random(1000);
   d426a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d426e:	f002 f98f 	bl	d6590 <_Z6randomi>
   d4272:	4a52      	ldr	r2, [pc, #328]	; (d43bc <_Z16takeMeasurementsv+0x250>)
   d4274:	4603      	mov	r3, r0
   d4276:	6010      	str	r0, [r2, #0]
  snprintf(precipitationCountString,sizeof(precipitationCountString), "%i tips", precipitationCount);
   d4278:	2110      	movs	r1, #16
   d427a:	4a51      	ldr	r2, [pc, #324]	; (d43c0 <_Z16takeMeasurementsv+0x254>)
   d427c:	4851      	ldr	r0, [pc, #324]	; (d43c4 <_Z16takeMeasurementsv+0x258>)
   d427e:	f001 fa83 	bl	d5788 <snprintf>

  // Measure the soil temp
  soilTempInC = random(100);
   d4282:	2064      	movs	r0, #100	; 0x64
   d4284:	f002 f984 	bl	d6590 <_Z6randomi>
   d4288:	ee07 0a90 	vmov	s15, r0
   d428c:	4b4e      	ldr	r3, [pc, #312]	; (d43c8 <_Z16takeMeasurementsv+0x25c>)
   d428e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4292:	edc3 7a00 	vstr	s15, [r3]
  snprintf(soilTempInCString, sizeof(soilTempInCString), "%4.1f C", soilTempInC);
   d4296:	ee17 0a90 	vmov	r0, s15
   d429a:	f003 f91b 	bl	d74d4 <__aeabi_f2d>
   d429e:	4a4b      	ldr	r2, [pc, #300]	; (d43cc <_Z16takeMeasurementsv+0x260>)
   d42a0:	e9cd 0100 	strd	r0, r1, [sp]
   d42a4:	2110      	movs	r1, #16
   d42a6:	484a      	ldr	r0, [pc, #296]	; (d43d0 <_Z16takeMeasurementsv+0x264>)
   d42a8:	f001 fa6e 	bl	d5788 <snprintf>

  // Meaure air temp and humidity
  humidity = random(100);
   d42ac:	2064      	movs	r0, #100	; 0x64
   d42ae:	f002 f96f 	bl	d6590 <_Z6randomi>
   d42b2:	ee07 0a90 	vmov	s15, r0
   d42b6:	4b47      	ldr	r3, [pc, #284]	; (d43d4 <_Z16takeMeasurementsv+0x268>)
   d42b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d42bc:	edc3 7a00 	vstr	s15, [r3]
  snprintf(humidityString,sizeof(humidityString), "%4.1f %%", humidity);
   d42c0:	ee17 0a90 	vmov	r0, s15
   d42c4:	f003 f906 	bl	d74d4 <__aeabi_f2d>
   d42c8:	4a30      	ldr	r2, [pc, #192]	; (d438c <_Z16takeMeasurementsv+0x220>)
   d42ca:	e9cd 0100 	strd	r0, r1, [sp]
   d42ce:	2110      	movs	r1, #16
   d42d0:	4841      	ldr	r0, [pc, #260]	; (d43d8 <_Z16takeMeasurementsv+0x26c>)
   d42d2:	f001 fa59 	bl	d5788 <snprintf>

  temperature = random(100);
   d42d6:	2064      	movs	r0, #100	; 0x64
   d42d8:	f002 f95a 	bl	d6590 <_Z6randomi>
   d42dc:	ee07 0a90 	vmov	s15, r0
   d42e0:	4b3e      	ldr	r3, [pc, #248]	; (d43dc <_Z16takeMeasurementsv+0x270>)
   d42e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d42e6:	edc3 7a00 	vstr	s15, [r3]
  snprintf(temperatureString,sizeof(temperatureString), "%4.1f C", temperature);
   d42ea:	ee17 0a90 	vmov	r0, s15
   d42ee:	f003 f8f1 	bl	d74d4 <__aeabi_f2d>
   d42f2:	4a36      	ldr	r2, [pc, #216]	; (d43cc <_Z16takeMeasurementsv+0x260>)
   d42f4:	e9cd 0100 	strd	r0, r1, [sp]
   d42f8:	2110      	movs	r1, #16
   d42fa:	4839      	ldr	r0, [pc, #228]	; (d43e0 <_Z16takeMeasurementsv+0x274>)
   d42fc:	f001 fa44 	bl	d5788 <snprintf>

  // Measure panel temp and humidity
  panelHumidity = random(100);
   d4300:	2064      	movs	r0, #100	; 0x64
   d4302:	f002 f945 	bl	d6590 <_Z6randomi>
   d4306:	ee07 0a90 	vmov	s15, r0
   d430a:	4b36      	ldr	r3, [pc, #216]	; (d43e4 <_Z16takeMeasurementsv+0x278>)
   d430c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4310:	edc3 7a00 	vstr	s15, [r3]
  snprintf(panelHumidityString,sizeof(panelHumidityString), "%4.1f %%", panelHumidity);
   d4314:	ee17 0a90 	vmov	r0, s15
   d4318:	f003 f8dc 	bl	d74d4 <__aeabi_f2d>
   d431c:	4a1b      	ldr	r2, [pc, #108]	; (d438c <_Z16takeMeasurementsv+0x220>)
   d431e:	e9cd 0100 	strd	r0, r1, [sp]
   d4322:	2110      	movs	r1, #16
   d4324:	4830      	ldr	r0, [pc, #192]	; (d43e8 <_Z16takeMeasurementsv+0x27c>)
   d4326:	f001 fa2f 	bl	d5788 <snprintf>

  panelTemperature = random(100);
   d432a:	2064      	movs	r0, #100	; 0x64
   d432c:	f002 f930 	bl	d6590 <_Z6randomi>
   d4330:	ee07 0a90 	vmov	s15, r0
   d4334:	4b2d      	ldr	r3, [pc, #180]	; (d43ec <_Z16takeMeasurementsv+0x280>)
   d4336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d433a:	edc3 7a00 	vstr	s15, [r3]
  snprintf(panelTemperatureString,sizeof(panelTemperatureString), "%4.1f C", panelTemperature);
   d433e:	ee17 0a90 	vmov	r0, s15
   d4342:	f003 f8c7 	bl	d74d4 <__aeabi_f2d>
   d4346:	4a21      	ldr	r2, [pc, #132]	; (d43cc <_Z16takeMeasurementsv+0x260>)
   d4348:	e9cd 0100 	strd	r0, r1, [sp]
   d434c:	2110      	movs	r1, #16
   d434e:	4828      	ldr	r0, [pc, #160]	; (d43f0 <_Z16takeMeasurementsv+0x284>)
   d4350:	f001 fa1a 	bl	d5788 <snprintf>

  // Get battery voltage level
  batteryVoltage = 4.0;                      // Voltage level of battery
   d4354:	4b27      	ldr	r3, [pc, #156]	; (d43f4 <_Z16takeMeasurementsv+0x288>)
  snprintf(batteryString, sizeof(batteryString), "%4.1f %%", batteryVoltage);
   d4356:	4828      	ldr	r0, [pc, #160]	; (d43f8 <_Z16takeMeasurementsv+0x28c>)

  panelTemperature = random(100);
  snprintf(panelTemperatureString,sizeof(panelTemperatureString), "%4.1f C", panelTemperature);

  // Get battery voltage level
  batteryVoltage = 4.0;                      // Voltage level of battery
   d4358:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
   d435c:	601a      	str	r2, [r3, #0]
  snprintf(batteryString, sizeof(batteryString), "%4.1f %%", batteryVoltage);
   d435e:	4b27      	ldr	r3, [pc, #156]	; (d43fc <_Z16takeMeasurementsv+0x290>)
   d4360:	2200      	movs	r2, #0
   d4362:	e9cd 2300 	strd	r2, r3, [sp]
   d4366:	2110      	movs	r1, #16
   d4368:	4a08      	ldr	r2, [pc, #32]	; (d438c <_Z16takeMeasurementsv+0x220>)
   d436a:	f001 fa0d 	bl	d5788 <snprintf>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d436e:	4b24      	ldr	r3, [pc, #144]	; (d4400 <_Z16takeMeasurementsv+0x294>)
   d4370:	2200      	movs	r2, #0
   d4372:	4611      	mov	r1, r2
   d4374:	6858      	ldr	r0, [r3, #4]
   d4376:	f001 f9a7 	bl	d56c8 <network_ready>

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d437a:	b108      	cbz	r0, d4380 <_Z16takeMeasurementsv+0x214>
   d437c:	f7ff feba 	bl	d40f4 <_Z17getSignalStrengthv>

  return 1;
}
   d4380:	2001      	movs	r0, #1
   d4382:	b003      	add	sp, #12
   d4384:	f85d fb04 	ldr.w	pc, [sp], #4
   d4388:	2003e248 	.word	0x2003e248
   d438c:	000d8299 	.word	0x000d8299
   d4390:	2003e198 	.word	0x2003e198
   d4394:	2003e24c 	.word	0x2003e24c
   d4398:	2003e1c4 	.word	0x2003e1c4
   d439c:	2003e240 	.word	0x2003e240
   d43a0:	2003e1e5 	.word	0x2003e1e5
   d43a4:	2003e254 	.word	0x2003e254
   d43a8:	2003e1fc 	.word	0x2003e1fc
   d43ac:	2003e258 	.word	0x2003e258
   d43b0:	2003e228 	.word	0x2003e228
   d43b4:	2003e244 	.word	0x2003e244
   d43b8:	2003e1ad 	.word	0x2003e1ad
   d43bc:	2003e1e0 	.word	0x2003e1e0
   d43c0:	000d82a2 	.word	0x000d82a2
   d43c4:	2003e210 	.word	0x2003e210
   d43c8:	2003e20c 	.word	0x2003e20c
   d43cc:	000d82aa 	.word	0x000d82aa
   d43d0:	2003e309 	.word	0x2003e309
   d43d4:	2003e1a8 	.word	0x2003e1a8
   d43d8:	2003e2e0 	.word	0x2003e2e0
   d43dc:	2003e304 	.word	0x2003e304
   d43e0:	2003e184 	.word	0x2003e184
   d43e4:	2003e1f8 	.word	0x2003e1f8
   d43e8:	2003e2c8 	.word	0x2003e2c8
   d43ec:	2003e1dc 	.word	0x2003e1dc
   d43f0:	2003e2b8 	.word	0x2003e2b8
   d43f4:	2003e2dc 	.word	0x2003e2dc
   d43f8:	2003e2f0 	.word	0x2003e2f0
   d43fc:	40100000 	.word	0x40100000
   d4400:	2003e31c 	.word	0x2003e31c

000d4404 <_Z17connectToParticlev>:
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
   d4404:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4408:	482a      	ldr	r0, [pc, #168]	; (d44b4 <_Z17connectToParticlev+0xb0>)
   d440a:	2300      	movs	r3, #0
   d440c:	461a      	mov	r2, r3
   d440e:	4619      	mov	r1, r3
   d4410:	6840      	ldr	r0, [r0, #4]
   d4412:	f001 f961 	bl	d56d8 <network_on>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4416:	f001 f8f7 	bl	d5608 <spark_cloud_flag_connect>
   d441a:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d441e:	f240 36e7 	movw	r6, #999	; 0x3e7
   d4422:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4424:	2000      	movs	r0, #0
   d4426:	f000 ff81 	bl	d532c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d442a:	f04f 0900 	mov.w	r9, #0
   d442e:	4680      	mov	r8, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4430:	2000      	movs	r0, #0
   d4432:	f000 ff7b 	bl	d532c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4436:	ebb0 0008 	subs.w	r0, r0, r8
   d443a:	eb61 0109 	sbc.w	r1, r1, r9
   d443e:	428f      	cmp	r7, r1
   d4440:	bf08      	it	eq
   d4442:	4286      	cmpeq	r6, r0
   d4444:	d305      	bcc.n	d4452 <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4446:	f001 f8ef 	bl	d5628 <spark_cloud_flag_connected>
   d444a:	b910      	cbnz	r0, d4452 <_Z17connectToParticlev+0x4e>
            spark_process();
   d444c:	f001 f8d4 	bl	d55f8 <spark_process>
   d4450:	e7ee      	b.n	d4430 <_Z17connectToParticlev+0x2c>
   d4452:	f001 f8e9 	bl	d5628 <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4456:	b1d0      	cbz	r0, d448e <_Z17connectToParticlev+0x8a>
   d4458:	f001 f8e6 	bl	d5628 <spark_cloud_flag_connected>
    // Code I want to run while connecting
    Particle.process();
  }
  if (Particle.connected()) {
   d445c:	4604      	mov	r4, r0
   d445e:	b328      	cbz	r0, d44ac <_Z17connectToParticlev+0xa8>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4460:	2000      	movs	r0, #0
   d4462:	f000 ff63 	bl	d532c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4466:	2700      	movs	r7, #0
   d4468:	4606      	mov	r6, r0
   d446a:	f64e 285f 	movw	r8, #59999	; 0xea5f
   d446e:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4472:	2000      	movs	r0, #0
   d4474:	f000 ff5a 	bl	d532c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4478:	1b80      	subs	r0, r0, r6
   d447a:	eb61 0107 	sbc.w	r1, r1, r7
   d447e:	4589      	cmp	r9, r1
   d4480:	bf08      	it	eq
   d4482:	4580      	cmpeq	r8, r0
   d4484:	d30c      	bcc.n	d44a0 <_Z17connectToParticlev+0x9c>
    waitFor(Time.isValid, 60000);
   d4486:	f002 fa87 	bl	d6998 <_ZN9TimeClass7isValidEv>
   d448a:	b948      	cbnz	r0, d44a0 <_Z17connectToParticlev+0x9c>
   d448c:	e00b      	b.n	d44a6 <_Z17connectToParticlev+0xa2>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d448e:	f000 ff15 	bl	d52bc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4492:	4b09      	ldr	r3, [pc, #36]	; (d44b8 <_Z17connectToParticlev+0xb4>)
   d4494:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4496:	f001 f8af 	bl	d55f8 <spark_process>
// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d449a:	3c01      	subs	r4, #1
   d449c:	d0dc      	beq.n	d4458 <_Z17connectToParticlev+0x54>
   d449e:	e7c1      	b.n	d4424 <_Z17connectToParticlev+0x20>
    // Code I want to run while connecting
    Particle.process();
  }
  if (Particle.connected()) {
    waitFor(Time.isValid, 60000);
   d44a0:	f002 fa7a 	bl	d6998 <_ZN9TimeClass7isValidEv>
   d44a4:	e002      	b.n	d44ac <_Z17connectToParticlev+0xa8>
            spark_process();
   d44a6:	f001 f8a7 	bl	d55f8 <spark_process>
   d44aa:	e7e2      	b.n	d4472 <_Z17connectToParticlev+0x6e>
    return 1;                               // Were able to connect successfully
  }
  else return 0;                                                    // Failed to connect
}
   d44ac:	4620      	mov	r0, r4
   d44ae:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
   d44b2:	bf00      	nop
   d44b4:	2003e31c 	.word	0x2003e31c
   d44b8:	2003e6e4 	.word	0x2003e6e4

000d44bc <_Z22disconnectFromParticlev>:

bool disconnectFromParticle()
{
   d44bc:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d44be:	f001 f8ab 	bl	d5618 <spark_cloud_flag_disconnect>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d44c2:	4806      	ldr	r0, [pc, #24]	; (d44dc <_Z22disconnectFromParticlev+0x20>)
   d44c4:	2300      	movs	r3, #0
   d44c6:	461a      	mov	r2, r3
   d44c8:	4619      	mov	r1, r3
   d44ca:	6840      	ldr	r0, [r0, #4]
   d44cc:	f001 f90c 	bl	d56e8 <network_off>
  Particle.disconnect();                                          // Otherwise Electron will attempt to reconnect on wake
  Cellular.off();
  delay(1000);                                                    // Bummer but only should happen once an hour
   d44d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d44d4:	f001 f970 	bl	d57b8 <delay>
  return true;
}
   d44d8:	2001      	movs	r0, #1
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	2003e31c 	.word	0x2003e31c

000d44e0 <_Z20meterParticlePublishv>:
  }
  Serial.println(stateTransitionString);
}

bool meterParticlePublish(void)
{
   d44e0:	b510      	push	{r4, lr}
  static unsigned long lastPublish = 0;
  if(millis() - lastPublish >= publishFrequency) {
   d44e2:	4c07      	ldr	r4, [pc, #28]	; (d4500 <_Z20meterParticlePublishv+0x20>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d44e4:	f000 feea 	bl	d52bc <HAL_Timer_Get_Milli_Seconds>
   d44e8:	6823      	ldr	r3, [r4, #0]
   d44ea:	1ac0      	subs	r0, r0, r3
   d44ec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d44f0:	d304      	bcc.n	d44fc <_Z20meterParticlePublishv+0x1c>
   d44f2:	f000 fee3 	bl	d52bc <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d44f6:	6020      	str	r0, [r4, #0]
   d44f8:	2001      	movs	r0, #1
   d44fa:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
   d44fc:	2000      	movs	r0, #0
}
   d44fe:	bd10      	pop	{r4, pc}
   d4500:	2003e2ac 	.word	0x2003e2ac

000d4504 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.32>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d4504:	b508      	push	{r3, lr}
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
  oldState = state;
  if(Particle.connected()) {
    waitUntil(meterParticlePublish);
   d4506:	f7ff ffeb 	bl	d44e0 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d450a:	b118      	cbz	r0, d4514 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.32+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d450c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4510:	f7ff bfe6 	b.w	d44e0 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d4514:	f001 f870 	bl	d55f8 <spark_process>
   d4518:	e7f5      	b.n	d4506 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.32+0x2>
	...

000d451c <_Z14fullModemResetv>:
    return 1;
  }
  else return 0;
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d451c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d451e:	f001 f87b 	bl	d5618 <spark_cloud_flag_disconnect>
   d4522:	f000 fecb 	bl	d52bc <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d4526:	f643 2597 	movw	r5, #14999	; 0x3a97
   d452a:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d452c:	f001 f87c 	bl	d5628 <spark_cloud_flag_connected>
   d4530:	b140      	cbz	r0, d4544 <_Z14fullModemResetv+0x28>
   d4532:	f000 fec3 	bl	d52bc <HAL_Timer_Get_Milli_Seconds>
   d4536:	1b00      	subs	r0, r0, r4
   d4538:	42a8      	cmp	r0, r5
   d453a:	d803      	bhi.n	d4544 <_Z14fullModemResetv+0x28>
		delay(100);
   d453c:	2064      	movs	r0, #100	; 0x64
   d453e:	f001 f93b 	bl	d57b8 <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d4542:	e7f3      	b.n	d452c <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d4544:	2100      	movs	r1, #0
   d4546:	4b09      	ldr	r3, [pc, #36]	; (d456c <_Z14fullModemResetv+0x50>)
   d4548:	f247 5230 	movw	r2, #30000	; 0x7530
   d454c:	4608      	mov	r0, r1
   d454e:	f000 fe65 	bl	d521c <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
   d4552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4556:	f001 f92f 	bl	d57b8 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d455a:	4b05      	ldr	r3, [pc, #20]	; (d4570 <_Z14fullModemResetv+0x54>)
   d455c:	220a      	movs	r2, #10
   d455e:	681b      	ldr	r3, [r3, #0]
   d4560:	2101      	movs	r1, #1
   d4562:	4668      	mov	r0, sp
   d4564:	f002 f930 	bl	d67c8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4568:	b003      	add	sp, #12
   d456a:	bd30      	pop	{r4, r5, pc}
   d456c:	000d82b2 	.word	0x000d82b2
   d4570:	2003e250 	.word	0x2003e250

000d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4574:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4576:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4578:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d457a:	b17c      	cbz	r4, d459c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d457c:	6863      	ldr	r3, [r4, #4]
   d457e:	3b01      	subs	r3, #1
   d4580:	6063      	str	r3, [r4, #4]
   d4582:	b95b      	cbnz	r3, d459c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4584:	6823      	ldr	r3, [r4, #0]
   d4586:	4620      	mov	r0, r4
   d4588:	689b      	ldr	r3, [r3, #8]
   d458a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d458c:	68a3      	ldr	r3, [r4, #8]
   d458e:	3b01      	subs	r3, #1
   d4590:	60a3      	str	r3, [r4, #8]
   d4592:	b91b      	cbnz	r3, d459c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4594:	6823      	ldr	r3, [r4, #0]
   d4596:	4620      	mov	r0, r4
   d4598:	68db      	ldr	r3, [r3, #12]
   d459a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d459c:	4628      	mov	r0, r5
   d459e:	bd38      	pop	{r3, r4, r5, pc}

000d45a0 <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
   d45a0:	b510      	push	{r4, lr}
  char data[512];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Soilmoisture1\":%4.1f, \"Soilmoisture2\":%4.1f, \"Soilmoisture3\":%4.1f, \"Soilmoisture4\":%4.1f, \"Soilmoisture5\":%4.1f, \"Soilmoisture6\":%4.1f, \"Precipitation\": %i, \"Soiltemp\":%4.1f, \"Humidity\":%4.1f, \"Temperature\":%4.1f, \"Panelhumidity\":%4.1f, \"Paneltemperature\":%4.1f, \"Battery\":%4.1f, \"Radiotech\": %i, \"Signal\": %4.1f, \"Quality\": %4.1f, \"Resets\":%i, \"Alerts\":%i}", soilMoisture1, soilMoisture2, soilMoisture3, soilMoisture4, soilMoisture5, soilMoisture6, precipitationCount, soilTempInC, humidity, temperature, panelHumidity, panelTemperature, batteryVoltage, rat, strengthPercentage, qualityPercentage,resetCount, alertCount);
   d45a2:	4b44      	ldr	r3, [pc, #272]	; (d46b4 <_Z9sendEventv+0x114>)
  Particle.publish("Cellular_LiPo_Hook", data, PRIVATE);  // If lowPowerMode - must have clear to send
  currentCountTime = Time.now();
   d45a4:	4c44      	ldr	r4, [pc, #272]	; (d46b8 <_Z9sendEventv+0x118>)
}

void sendEvent()
{
  char data[512];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Soilmoisture1\":%4.1f, \"Soilmoisture2\":%4.1f, \"Soilmoisture3\":%4.1f, \"Soilmoisture4\":%4.1f, \"Soilmoisture5\":%4.1f, \"Soilmoisture6\":%4.1f, \"Precipitation\": %i, \"Soiltemp\":%4.1f, \"Humidity\":%4.1f, \"Temperature\":%4.1f, \"Panelhumidity\":%4.1f, \"Paneltemperature\":%4.1f, \"Battery\":%4.1f, \"Radiotech\": %i, \"Signal\": %4.1f, \"Quality\": %4.1f, \"Resets\":%i, \"Alerts\":%i}", soilMoisture1, soilMoisture2, soilMoisture3, soilMoisture4, soilMoisture5, soilMoisture6, precipitationCount, soilTempInC, humidity, temperature, panelHumidity, panelTemperature, batteryVoltage, rat, strengthPercentage, qualityPercentage,resetCount, alertCount);
   d45a6:	681b      	ldr	r3, [r3, #0]
    break;
  }
}

void sendEvent()
{
   d45a8:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
  char data[512];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Soilmoisture1\":%4.1f, \"Soilmoisture2\":%4.1f, \"Soilmoisture3\":%4.1f, \"Soilmoisture4\":%4.1f, \"Soilmoisture5\":%4.1f, \"Soilmoisture6\":%4.1f, \"Precipitation\": %i, \"Soiltemp\":%4.1f, \"Humidity\":%4.1f, \"Temperature\":%4.1f, \"Panelhumidity\":%4.1f, \"Paneltemperature\":%4.1f, \"Battery\":%4.1f, \"Radiotech\": %i, \"Signal\": %4.1f, \"Quality\": %4.1f, \"Resets\":%i, \"Alerts\":%i}", soilMoisture1, soilMoisture2, soilMoisture3, soilMoisture4, soilMoisture5, soilMoisture6, precipitationCount, soilTempInC, humidity, temperature, panelHumidity, panelTemperature, batteryVoltage, rat, strengthPercentage, qualityPercentage,resetCount, alertCount);
   d45ac:	9321      	str	r3, [sp, #132]	; 0x84
   d45ae:	4b43      	ldr	r3, [pc, #268]	; (d46bc <_Z9sendEventv+0x11c>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	9320      	str	r3, [sp, #128]	; 0x80
   d45b4:	4b42      	ldr	r3, [pc, #264]	; (d46c0 <_Z9sendEventv+0x120>)
   d45b6:	6818      	ldr	r0, [r3, #0]
   d45b8:	f002 ff8c 	bl	d74d4 <__aeabi_f2d>
   d45bc:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
   d45c0:	4b40      	ldr	r3, [pc, #256]	; (d46c4 <_Z9sendEventv+0x124>)
   d45c2:	6818      	ldr	r0, [r3, #0]
   d45c4:	f002 ff86 	bl	d74d4 <__aeabi_f2d>
   d45c8:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
   d45cc:	4b3e      	ldr	r3, [pc, #248]	; (d46c8 <_Z9sendEventv+0x128>)
   d45ce:	681b      	ldr	r3, [r3, #0]
   d45d0:	931a      	str	r3, [sp, #104]	; 0x68
   d45d2:	4b3e      	ldr	r3, [pc, #248]	; (d46cc <_Z9sendEventv+0x12c>)
   d45d4:	6818      	ldr	r0, [r3, #0]
   d45d6:	f002 ff7d 	bl	d74d4 <__aeabi_f2d>
   d45da:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
   d45de:	4b3c      	ldr	r3, [pc, #240]	; (d46d0 <_Z9sendEventv+0x130>)
   d45e0:	6818      	ldr	r0, [r3, #0]
   d45e2:	f002 ff77 	bl	d74d4 <__aeabi_f2d>
   d45e6:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   d45ea:	4b3a      	ldr	r3, [pc, #232]	; (d46d4 <_Z9sendEventv+0x134>)
   d45ec:	6818      	ldr	r0, [r3, #0]
   d45ee:	f002 ff71 	bl	d74d4 <__aeabi_f2d>
   d45f2:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   d45f6:	4b38      	ldr	r3, [pc, #224]	; (d46d8 <_Z9sendEventv+0x138>)
   d45f8:	6818      	ldr	r0, [r3, #0]
   d45fa:	f002 ff6b 	bl	d74d4 <__aeabi_f2d>
   d45fe:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   d4602:	4b36      	ldr	r3, [pc, #216]	; (d46dc <_Z9sendEventv+0x13c>)
   d4604:	6818      	ldr	r0, [r3, #0]
   d4606:	f002 ff65 	bl	d74d4 <__aeabi_f2d>
   d460a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   d460e:	4b34      	ldr	r3, [pc, #208]	; (d46e0 <_Z9sendEventv+0x140>)
   d4610:	6818      	ldr	r0, [r3, #0]
   d4612:	f002 ff5f 	bl	d74d4 <__aeabi_f2d>
   d4616:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   d461a:	4b32      	ldr	r3, [pc, #200]	; (d46e4 <_Z9sendEventv+0x144>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	930c      	str	r3, [sp, #48]	; 0x30
   d4620:	4b31      	ldr	r3, [pc, #196]	; (d46e8 <_Z9sendEventv+0x148>)
   d4622:	6818      	ldr	r0, [r3, #0]
   d4624:	f002 ff56 	bl	d74d4 <__aeabi_f2d>
   d4628:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d462c:	4b2f      	ldr	r3, [pc, #188]	; (d46ec <_Z9sendEventv+0x14c>)
   d462e:	6818      	ldr	r0, [r3, #0]
   d4630:	f002 ff50 	bl	d74d4 <__aeabi_f2d>
   d4634:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4638:	4b2d      	ldr	r3, [pc, #180]	; (d46f0 <_Z9sendEventv+0x150>)
   d463a:	6818      	ldr	r0, [r3, #0]
   d463c:	f002 ff4a 	bl	d74d4 <__aeabi_f2d>
   d4640:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4644:	4b2b      	ldr	r3, [pc, #172]	; (d46f4 <_Z9sendEventv+0x154>)
   d4646:	6818      	ldr	r0, [r3, #0]
   d4648:	f002 ff44 	bl	d74d4 <__aeabi_f2d>
   d464c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4650:	4b29      	ldr	r3, [pc, #164]	; (d46f8 <_Z9sendEventv+0x158>)
   d4652:	6818      	ldr	r0, [r3, #0]
   d4654:	f002 ff3e 	bl	d74d4 <__aeabi_f2d>
   d4658:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d465c:	4b27      	ldr	r3, [pc, #156]	; (d46fc <_Z9sendEventv+0x15c>)
   d465e:	6818      	ldr	r0, [r3, #0]
   d4660:	f002 ff38 	bl	d74d4 <__aeabi_f2d>
   d4664:	4a26      	ldr	r2, [pc, #152]	; (d4700 <_Z9sendEventv+0x160>)
   d4666:	e9cd 0100 	strd	r0, r1, [sp]
   d466a:	f44f 7100 	mov.w	r1, #512	; 0x200
   d466e:	a824      	add	r0, sp, #144	; 0x90
   d4670:	f001 f88a 	bl	d5788 <snprintf>
   d4674:	4b23      	ldr	r3, [pc, #140]	; (d4704 <_Z9sendEventv+0x164>)
  Particle.publish("Cellular_LiPo_Hook", data, PRIVATE);  // If lowPowerMode - must have clear to send
   d4676:	4924      	ldr	r1, [pc, #144]	; (d4708 <_Z9sendEventv+0x168>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4678:	781b      	ldrb	r3, [r3, #0]
   d467a:	2200      	movs	r2, #0
   d467c:	f88d 2000 	strb.w	r2, [sp]
   d4680:	a822      	add	r0, sp, #136	; 0x88
   d4682:	aa24      	add	r2, sp, #144	; 0x90
   d4684:	f7ff fd28 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.45>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4688:	a823      	add	r0, sp, #140	; 0x8c
   d468a:	f7ff ff73 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentCountTime = Time.now();
   d468e:	f002 f9a4 	bl	d69da <_ZN9TimeClass3nowEv>
   d4692:	6020      	str	r0, [r4, #0]
  EEPROM.write(MEM_MAP::currentCountsTimeAddr, currentCountTime);
   d4694:	f002 fc12 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d4698:	7821      	ldrb	r1, [r4, #0]
   d469a:	2005      	movs	r0, #5
   d469c:	f7ff fd1a 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.19>
  dataInFlight = true;                                                // set the data inflight flag
   d46a0:	4b1a      	ldr	r3, [pc, #104]	; (d470c <_Z9sendEventv+0x16c>)
   d46a2:	2201      	movs	r2, #1
   d46a4:	701a      	strb	r2, [r3, #0]
   d46a6:	f000 fe09 	bl	d52bc <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d46aa:	4b19      	ldr	r3, [pc, #100]	; (d4710 <_Z9sendEventv+0x170>)
   d46ac:	6018      	str	r0, [r3, #0]
}
   d46ae:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
   d46b2:	bd10      	pop	{r4, pc}
   d46b4:	2003e220 	.word	0x2003e220
   d46b8:	2003e1d8 	.word	0x2003e1d8
   d46bc:	2003e238 	.word	0x2003e238
   d46c0:	2003e264 	.word	0x2003e264
   d46c4:	2003e224 	.word	0x2003e224
   d46c8:	2003e260 	.word	0x2003e260
   d46cc:	2003e2dc 	.word	0x2003e2dc
   d46d0:	2003e1dc 	.word	0x2003e1dc
   d46d4:	2003e1f8 	.word	0x2003e1f8
   d46d8:	2003e304 	.word	0x2003e304
   d46dc:	2003e1a8 	.word	0x2003e1a8
   d46e0:	2003e20c 	.word	0x2003e20c
   d46e4:	2003e1e0 	.word	0x2003e1e0
   d46e8:	2003e244 	.word	0x2003e244
   d46ec:	2003e258 	.word	0x2003e258
   d46f0:	2003e254 	.word	0x2003e254
   d46f4:	2003e240 	.word	0x2003e240
   d46f8:	2003e24c 	.word	0x2003e24c
   d46fc:	2003e248 	.word	0x2003e248
   d4700:	000d82bf 	.word	0x000d82bf
   d4704:	2003e1ac 	.word	0x2003e1ac
   d4708:	000d8428 	.word	0x000d8428
   d470c:	2003e0a0 	.word	0x2003e0a0
   d4710:	2003e194 	.word	0x2003e194

000d4714 <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d4714:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4716:	b085      	sub	sp, #20
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
   d4718:	4608      	mov	r0, r1
  dataInFlight = true;                                                // set the data inflight flag
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d471a:	af02      	add	r7, sp, #8
   d471c:	460e      	mov	r6, r1
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
   d471e:	f003 f92a 	bl	d7976 <strlen>
   d4722:	f100 0308 	add.w	r3, r0, #8
   d4726:	f023 0307 	bic.w	r3, r3, #7
  {
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
   d472a:	466d      	mov	r5, sp
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
   d472c:	ebad 0d03 	sub.w	sp, sp, r3
   d4730:	ac02      	add	r4, sp, #8
  strncpy(dataCopy, data, sizeof(dataCopy));                          // Copy - overflow safe
   d4732:	1c42      	adds	r2, r0, #1
   d4734:	4631      	mov	r1, r6
   d4736:	4620      	mov	r0, r4
   d4738:	f003 f93a 	bl	d79b0 <strncpy>
  if (!strlen(dataCopy)) {                                            // First check to see if there is any data
   d473c:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d4740:	b94e      	cbnz	r6, d4756 <_Z14UbidotsHandlerPKcS0_+0x42>
   d4742:	f000 ff71 	bl	d5628 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d4746:	2800      	cmp	r0, #0
   d4748:	d037      	beq.n	d47ba <_Z14UbidotsHandlerPKcS0_+0xa6>
   d474a:	4b1e      	ldr	r3, [pc, #120]	; (d47c4 <_Z14UbidotsHandlerPKcS0_+0xb0>)
   d474c:	4a1e      	ldr	r2, [pc, #120]	; (d47c8 <_Z14UbidotsHandlerPKcS0_+0xb4>)
   d474e:	781b      	ldrb	r3, [r3, #0]
   d4750:	f88d 6000 	strb.w	r6, [sp]
   d4754:	e02a      	b.n	d47ac <_Z14UbidotsHandlerPKcS0_+0x98>
    return;
  }
  int responseCode = atoi(dataCopy);                                  // Response is only a single number thanks to Template
   d4756:	4620      	mov	r0, r4
   d4758:	f002 ff4c 	bl	d75f4 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d475c:	38c8      	subs	r0, #200	; 0xc8
   d475e:	2801      	cmp	r0, #1
   d4760:	d81b      	bhi.n	d479a <_Z14UbidotsHandlerPKcS0_+0x86>
   d4762:	f000 ff61 	bl	d5628 <spark_cloud_flag_connected>
  {
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
   d4766:	b160      	cbz	r0, d4782 <_Z14UbidotsHandlerPKcS0_+0x6e>
   d4768:	4b16      	ldr	r3, [pc, #88]	; (d47c4 <_Z14UbidotsHandlerPKcS0_+0xb0>)
   d476a:	4918      	ldr	r1, [pc, #96]	; (d47cc <_Z14UbidotsHandlerPKcS0_+0xb8>)
   d476c:	781b      	ldrb	r3, [r3, #0]
   d476e:	2200      	movs	r2, #0
   d4770:	f88d 2000 	strb.w	r2, [sp]
   d4774:	4638      	mov	r0, r7
   d4776:	4a16      	ldr	r2, [pc, #88]	; (d47d0 <_Z14UbidotsHandlerPKcS0_+0xbc>)
   d4778:	f7ff fcae 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.45>
   d477c:	1d38      	adds	r0, r7, #4
   d477e:	f7ff fef9 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
   d4782:	f002 fb9b 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d4786:	f002 f928 	bl	d69da <_ZN9TimeClass3nowEv>
   d478a:	b2c1      	uxtb	r1, r0
   d478c:	2005      	movs	r0, #5
   d478e:	f7ff fca1 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.19>
    dataInFlight = false;                                             // Data has been received
   d4792:	4b10      	ldr	r3, [pc, #64]	; (d47d4 <_Z14UbidotsHandlerPKcS0_+0xc0>)
   d4794:	2200      	movs	r2, #0
   d4796:	701a      	strb	r2, [r3, #0]
   d4798:	e00f      	b.n	d47ba <_Z14UbidotsHandlerPKcS0_+0xa6>
   d479a:	f000 ff45 	bl	d5628 <spark_cloud_flag_connected>
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
   d479e:	b160      	cbz	r0, d47ba <_Z14UbidotsHandlerPKcS0_+0xa6>
   d47a0:	4b08      	ldr	r3, [pc, #32]	; (d47c4 <_Z14UbidotsHandlerPKcS0_+0xb0>)
   d47a2:	2200      	movs	r2, #0
   d47a4:	781b      	ldrb	r3, [r3, #0]
   d47a6:	f88d 2000 	strb.w	r2, [sp]
   d47aa:	4622      	mov	r2, r4
   d47ac:	4638      	mov	r0, r7
   d47ae:	490a      	ldr	r1, [pc, #40]	; (d47d8 <_Z14UbidotsHandlerPKcS0_+0xc4>)
   d47b0:	f7ff fc92 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.45>
   d47b4:	1d38      	adds	r0, r7, #4
   d47b6:	f7ff fedd 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d47ba:	370c      	adds	r7, #12
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
  strncpy(dataCopy, data, sizeof(dataCopy));                          // Copy - overflow safe
  if (!strlen(dataCopy)) {                                            // First check to see if there is any data
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    return;
   d47bc:	46ad      	mov	sp, r5
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
}
   d47be:	46bd      	mov	sp, r7
   d47c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d47c2:	bf00      	nop
   d47c4:	2003e1ac 	.word	0x2003e1ac
   d47c8:	000d843b 	.word	0x000d843b
   d47cc:	000d8462 	.word	0x000d8462
   d47d0:	000d8450 	.word	0x000d8450
   d47d4:	2003e0a0 	.word	0x2003e0a0
   d47d8:	000d8443 	.word	0x000d8443

000d47dc <_Z14setVerboseMode6String>:
  }
  else return 0;
}

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d47dc:	b530      	push	{r4, r5, lr}
   d47de:	4922      	ldr	r1, [pc, #136]	; (d4868 <_Z14setVerboseMode6String+0x8c>)
   d47e0:	b085      	sub	sp, #20
   d47e2:	4605      	mov	r5, r0
   d47e4:	f001 ffbe 	bl	d6764 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d47e8:	4604      	mov	r4, r0
   d47ea:	b1c0      	cbz	r0, d481e <_Z14setVerboseMode6String+0x42>
  {
    verboseMode = true;
   d47ec:	4b1f      	ldr	r3, [pc, #124]	; (d486c <_Z14setVerboseMode6String+0x90>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
   d47ee:	4d20      	ldr	r5, [pc, #128]	; (d4870 <_Z14setVerboseMode6String+0x94>)

int setVerboseMode(String command) // Function to force sending data in current hour
{
  if (command == "1")
  {
    verboseMode = true;
   d47f0:	2401      	movs	r4, #1
   d47f2:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
   d47f4:	f002 fb62 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d47f8:	2004      	movs	r0, #4
   d47fa:	f7ff fc69 	bl	d40d0 <_ZN11EEPROMClass4readEi.isra.18>
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
   d47fe:	f040 0008 	orr.w	r0, r0, #8
   d4802:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
   d4804:	f002 fb5a 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d4808:	7829      	ldrb	r1, [r5, #0]
   d480a:	2004      	movs	r0, #4
   d480c:	f7ff fc62 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.19>
   d4810:	4b18      	ldr	r3, [pc, #96]	; (d4874 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4812:	2200      	movs	r2, #0
   d4814:	781b      	ldrb	r3, [r3, #0]
   d4816:	f88d 2000 	strb.w	r2, [sp]
   d481a:	4a17      	ldr	r2, [pc, #92]	; (d4878 <_Z14setVerboseMode6String+0x9c>)
   d481c:	e01a      	b.n	d4854 <_Z14setVerboseMode6String+0x78>
   d481e:	4917      	ldr	r1, [pc, #92]	; (d487c <_Z14setVerboseMode6String+0xa0>)
   d4820:	4628      	mov	r0, r5
   d4822:	f001 ff9f 	bl	d6764 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4826:	b1e8      	cbz	r0, d4864 <_Z14setVerboseMode6String+0x88>
  {
    verboseMode = false;
   d4828:	4b10      	ldr	r3, [pc, #64]	; (d486c <_Z14setVerboseMode6String+0x90>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
   d482a:	4d11      	ldr	r5, [pc, #68]	; (d4870 <_Z14setVerboseMode6String+0x94>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
   d482c:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
   d482e:	f002 fb45 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d4832:	2004      	movs	r0, #4
   d4834:	f7ff fc4c 	bl	d40d0 <_ZN11EEPROMClass4readEi.isra.18>
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
   d4838:	f020 0008 	bic.w	r0, r0, #8
   d483c:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
   d483e:	f002 fb3d 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d4842:	7829      	ldrb	r1, [r5, #0]
   d4844:	2004      	movs	r0, #4
   d4846:	f7ff fc45 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.19>
   d484a:	4b0a      	ldr	r3, [pc, #40]	; (d4874 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d484c:	4a0c      	ldr	r2, [pc, #48]	; (d4880 <_Z14setVerboseMode6String+0xa4>)
   d484e:	781b      	ldrb	r3, [r3, #0]
   d4850:	f88d 4000 	strb.w	r4, [sp]
   d4854:	490b      	ldr	r1, [pc, #44]	; (d4884 <_Z14setVerboseMode6String+0xa8>)
   d4856:	a802      	add	r0, sp, #8
   d4858:	f7ff fc3e 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.45>
   d485c:	a803      	add	r0, sp, #12
   d485e:	f7ff fe89 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d4862:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4864:	b005      	add	sp, #20
   d4866:	bd30      	pop	{r4, r5, pc}
   d4868:	000d85ef 	.word	0x000d85ef
   d486c:	2003e1e4 	.word	0x2003e1e4
   d4870:	2003e300 	.word	0x2003e300
   d4874:	2003e1ac 	.word	0x2003e1ac
   d4878:	000d8468 	.word	0x000d8468
   d487c:	000d8479 	.word	0x000d8479
   d4880:	000d847b 	.word	0x000d847b
   d4884:	000d848b 	.word	0x000d848b

000d4888 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
   d4888:	b530      	push	{r4, r5, lr}
   d488a:	b0cd      	sub	sp, #308	; 0x134
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d488c:	220a      	movs	r2, #10
   d488e:	a905      	add	r1, sp, #20
   d4890:	6800      	ldr	r0, [r0, #0]
   d4892:	f003 f927 	bl	d7ae4 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4896:	b2c4      	uxtb	r4, r0
   d4898:	f104 030c 	add.w	r3, r4, #12
   d489c:	b2db      	uxtb	r3, r3
   d489e:	2b18      	cmp	r3, #24
   d48a0:	d83d      	bhi.n	d491e <_Z11setTimeZone6String+0x96>

int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d48a2:	b243      	sxtb	r3, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
   d48a4:	ee07 3a90 	vmov	s15, r3
   d48a8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d48ac:	9303      	str	r3, [sp, #12]
   d48ae:	4d1d      	ldr	r5, [pc, #116]	; (d4924 <_Z11setTimeZone6String+0x9c>)
   d48b0:	f002 f834 	bl	d691c <_ZN9TimeClass4zoneEf>
  EEPROM.write(MEM_MAP::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
   d48b4:	f002 fb02 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d48b8:	4621      	mov	r1, r4
   d48ba:	2003      	movs	r0, #3
   d48bc:	f7ff fc0a 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.19>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d48c0:	2400      	movs	r4, #0
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d48c2:	9b03      	ldr	r3, [sp, #12]
   d48c4:	4a18      	ldr	r2, [pc, #96]	; (d4928 <_Z11setTimeZone6String+0xa0>)
   d48c6:	f44f 7180 	mov.w	r1, #256	; 0x100
   d48ca:	a80c      	add	r0, sp, #48	; 0x30
   d48cc:	f000 ff5c 	bl	d5788 <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d48d0:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Time",data,PRIVATE);
   d48d2:	4916      	ldr	r1, [pc, #88]	; (d492c <_Z11setTimeZone6String+0xa4>)
   d48d4:	f88d 4000 	strb.w	r4, [sp]
   d48d8:	aa0c      	add	r2, sp, #48	; 0x30
   d48da:	a808      	add	r0, sp, #32
   d48dc:	f7ff fbfc 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.45>
   d48e0:	a809      	add	r0, sp, #36	; 0x24
   d48e2:	f7ff fe47 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
   d48e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d48ea:	f000 ff65 	bl	d57b8 <delay>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d48ee:	f002 f874 	bl	d69da <_ZN9TimeClass3nowEv>
   d48f2:	4601      	mov	r1, r0
   d48f4:	a808      	add	r0, sp, #32
   d48f6:	f002 f82d 	bl	d6954 <_ZN9TimeClass7timeStrEl>
   d48fa:	9b08      	ldr	r3, [sp, #32]
   d48fc:	9303      	str	r3, [sp, #12]
  Particle.publish("Time",Time.timeStr(),PRIVATE);
   d48fe:	9a03      	ldr	r2, [sp, #12]
   d4900:	782b      	ldrb	r3, [r5, #0]
   d4902:	490a      	ldr	r1, [pc, #40]	; (d492c <_Z11setTimeZone6String+0xa4>)
   d4904:	f88d 4000 	strb.w	r4, [sp]
   d4908:	a806      	add	r0, sp, #24
   d490a:	f7ff fbe5 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.45>
   d490e:	a807      	add	r0, sp, #28
   d4910:	f7ff fe30 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4914:	a808      	add	r0, sp, #32
   d4916:	f001 fe7a 	bl	d660e <_ZN6StringD1Ev>
  return 1;
   d491a:	2001      	movs	r0, #1
   d491c:	e000      	b.n	d4920 <_Z11setTimeZone6String+0x98>
int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d491e:	2000      	movs	r0, #0
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
  Particle.publish("Time",data,PRIVATE);
  delay(1000);
  Particle.publish("Time",Time.timeStr(),PRIVATE);
  return 1;
}
   d4920:	b04d      	add	sp, #308	; 0x134
   d4922:	bd30      	pop	{r4, r5, pc}
   d4924:	2003e1ac 	.word	0x2003e1ac
   d4928:	000d8490 	.word	0x000d8490
   d492c:	000d84a4 	.word	0x000d84a4

000d4930 <_Z15setLowPowerMode6String>:


int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4930:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4932:	4926      	ldr	r1, [pc, #152]	; (d49cc <_Z15setLowPowerMode6String+0x9c>)
   d4934:	4605      	mov	r5, r0
   d4936:	f001 ff15 	bl	d6764 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d493a:	b928      	cbnz	r0, d4948 <_Z15setLowPowerMode6String+0x18>
   d493c:	4924      	ldr	r1, [pc, #144]	; (d49d0 <_Z15setLowPowerMode6String+0xa0>)
   d493e:	4628      	mov	r0, r5
   d4940:	f001 ff10 	bl	d6764 <_ZNK6String6equalsEPKc>
   d4944:	2800      	cmp	r0, #0
   d4946:	d03f      	beq.n	d49c8 <_Z15setLowPowerMode6String+0x98>
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
   d4948:	f002 fab8 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d494c:	2004      	movs	r0, #4
   d494e:	f7ff fbbf 	bl	d40d0 <_ZN11EEPROMClass4readEi.isra.18>
   d4952:	4c20      	ldr	r4, [pc, #128]	; (d49d4 <_Z15setLowPowerMode6String+0xa4>)
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4954:	491d      	ldr	r1, [pc, #116]	; (d49cc <_Z15setLowPowerMode6String+0x9c>)
   d4956:	7020      	strb	r0, [r4, #0]
   d4958:	4628      	mov	r0, r5
   d495a:	f001 ff03 	bl	d6764 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d495e:	4606      	mov	r6, r0
   d4960:	b1a0      	cbz	r0, d498c <_Z15setLowPowerMode6String+0x5c>
   d4962:	4b1d      	ldr	r3, [pc, #116]	; (d49d8 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Low Power",PRIVATE);
   d4964:	491d      	ldr	r1, [pc, #116]	; (d49dc <_Z15setLowPowerMode6String+0xac>)
   d4966:	781b      	ldrb	r3, [r3, #0]
   d4968:	2200      	movs	r2, #0
   d496a:	f88d 2000 	strb.w	r2, [sp]
   d496e:	a802      	add	r0, sp, #8
   d4970:	4a1b      	ldr	r2, [pc, #108]	; (d49e0 <_Z15setLowPowerMode6String+0xb0>)
   d4972:	f7ff fbb1 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.45>
   d4976:	a803      	add	r0, sp, #12
   d4978:	f7ff fdfc 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
   d497c:	7823      	ldrb	r3, [r4, #0]
   d497e:	f043 0301 	orr.w	r3, r3, #1
   d4982:	7023      	strb	r3, [r4, #0]
    lowPowerMode = true;
   d4984:	4b17      	ldr	r3, [pc, #92]	; (d49e4 <_Z15setLowPowerMode6String+0xb4>)
   d4986:	2201      	movs	r2, #1
   d4988:	701a      	strb	r2, [r3, #0]
   d498a:	e016      	b.n	d49ba <_Z15setLowPowerMode6String+0x8a>
   d498c:	4910      	ldr	r1, [pc, #64]	; (d49d0 <_Z15setLowPowerMode6String+0xa0>)
   d498e:	4628      	mov	r0, r5
   d4990:	f001 fee8 	bl	d6764 <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d4994:	b188      	cbz	r0, d49ba <_Z15setLowPowerMode6String+0x8a>
   d4996:	4b10      	ldr	r3, [pc, #64]	; (d49d8 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Normal Operations",PRIVATE);
   d4998:	4a13      	ldr	r2, [pc, #76]	; (d49e8 <_Z15setLowPowerMode6String+0xb8>)
   d499a:	781b      	ldrb	r3, [r3, #0]
   d499c:	490f      	ldr	r1, [pc, #60]	; (d49dc <_Z15setLowPowerMode6String+0xac>)
   d499e:	f88d 6000 	strb.w	r6, [sp]
   d49a2:	a802      	add	r0, sp, #8
   d49a4:	f7ff fb98 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.45>
   d49a8:	a803      	add	r0, sp, #12
   d49aa:	f7ff fde3 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b1111110 & controlRegister);                  // If so, flip the lowPowerMode bit
   d49ae:	7823      	ldrb	r3, [r4, #0]
   d49b0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
   d49b4:	7023      	strb	r3, [r4, #0]
    lowPowerMode = false;
   d49b6:	4b0b      	ldr	r3, [pc, #44]	; (d49e4 <_Z15setLowPowerMode6String+0xb4>)
   d49b8:	701e      	strb	r6, [r3, #0]
  }
  EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
   d49ba:	f002 fa7f 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d49be:	2004      	movs	r0, #4
   d49c0:	7821      	ldrb	r1, [r4, #0]
   d49c2:	f7ff fb87 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.19>
   d49c6:	2001      	movs	r0, #1
  return 1;
}
   d49c8:	b004      	add	sp, #16
   d49ca:	bd70      	pop	{r4, r5, r6, pc}
   d49cc:	000d85ef 	.word	0x000d85ef
   d49d0:	000d8479 	.word	0x000d8479
   d49d4:	2003e300 	.word	0x2003e300
   d49d8:	2003e1ac 	.word	0x2003e1ac
   d49dc:	000d848b 	.word	0x000d848b
   d49e0:	000d84a9 	.word	0x000d84a9
   d49e4:	2003e25c 	.word	0x2003e25c
   d49e8:	000d84b3 	.word	0x000d84b3

000d49ec <_Z22publishStateTransitionv>:

// Utility functions here...
void publishStateTransition(void)
{
   d49ec:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d49ee:	4d16      	ldr	r5, [pc, #88]	; (d4a48 <_Z22publishStateTransitionv+0x5c>)
   d49f0:	4c16      	ldr	r4, [pc, #88]	; (d4a4c <_Z22publishStateTransitionv+0x60>)
   d49f2:	4917      	ldr	r1, [pc, #92]	; (d4a50 <_Z22publishStateTransitionv+0x64>)
   d49f4:	782a      	ldrb	r2, [r5, #0]
   d49f6:	7820      	ldrb	r0, [r4, #0]
  return 1;
}

// Utility functions here...
void publishStateTransition(void)
{
   d49f8:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d49fa:	230e      	movs	r3, #14
   d49fc:	fb03 1202 	mla	r2, r3, r2, r1
   d4a00:	9200      	str	r2, [sp, #0]
   d4a02:	fb03 1300 	mla	r3, r3, r0, r1
   d4a06:	4a13      	ldr	r2, [pc, #76]	; (d4a54 <_Z22publishStateTransitionv+0x68>)
   d4a08:	2128      	movs	r1, #40	; 0x28
   d4a0a:	a804      	add	r0, sp, #16
   d4a0c:	f000 febc 	bl	d5788 <snprintf>
  oldState = state;
   d4a10:	782b      	ldrb	r3, [r5, #0]
   d4a12:	7023      	strb	r3, [r4, #0]
   d4a14:	f000 fe08 	bl	d5628 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d4a18:	b170      	cbz	r0, d4a38 <_Z22publishStateTransitionv+0x4c>
    waitUntil(meterParticlePublish);
   d4a1a:	f7ff fd73 	bl	d4504 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.32>
   d4a1e:	4b0e      	ldr	r3, [pc, #56]	; (d4a58 <_Z22publishStateTransitionv+0x6c>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d4a20:	490e      	ldr	r1, [pc, #56]	; (d4a5c <_Z22publishStateTransitionv+0x70>)
   d4a22:	781b      	ldrb	r3, [r3, #0]
   d4a24:	2200      	movs	r2, #0
   d4a26:	f88d 2000 	strb.w	r2, [sp]
   d4a2a:	a802      	add	r0, sp, #8
   d4a2c:	aa04      	add	r2, sp, #16
   d4a2e:	f7ff fb53 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.45>
   d4a32:	a803      	add	r0, sp, #12
   d4a34:	f7ff fd9e 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  Serial.println(stateTransitionString);
   d4a38:	f002 f8d4 	bl	d6be4 <_Z16_fetch_usbserialv>
   d4a3c:	a904      	add	r1, sp, #16
   d4a3e:	f001 fd4a 	bl	d64d6 <_ZN5Print7printlnEPKc>
}
   d4a42:	b00f      	add	sp, #60	; 0x3c
   d4a44:	bd30      	pop	{r4, r5, pc}
   d4a46:	bf00      	nop
   d4a48:	2003e1f5 	.word	0x2003e1f5
   d4a4c:	2003e1d4 	.word	0x2003e1d4
   d4a50:	2003e02c 	.word	0x2003e02c
   d4a54:	000d84c5 	.word	0x000d84c5
   d4a58:	2003e1ac 	.word	0x2003e1ac
   d4a5c:	000d84d3 	.word	0x000d84d3

000d4a60 <loop>:

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
}

void loop()
{
   d4a60:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(state) {
   d4a62:	4ca0      	ldr	r4, [pc, #640]	; (d4ce4 <loop+0x284>)
   d4a64:	7823      	ldrb	r3, [r4, #0]
   d4a66:	3b01      	subs	r3, #1

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
}

void loop()
{
   d4a68:	b08d      	sub	sp, #52	; 0x34
  switch(state) {
   d4a6a:	2b06      	cmp	r3, #6
   d4a6c:	f200 8208 	bhi.w	d4e80 <loop+0x420>
   d4a70:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4a74:	0007019f 	.word	0x0007019f
   d4a78:	0095006a 	.word	0x0095006a
   d4a7c:	00e100ad 	.word	0x00e100ad
   d4a80:	0168      	.short	0x0168
  case IDLE_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
   d4a82:	4b99      	ldr	r3, [pc, #612]	; (d4ce8 <loop+0x288>)
   d4a84:	781b      	ldrb	r3, [r3, #0]
   d4a86:	b12b      	cbz	r3, d4a94 <loop+0x34>
   d4a88:	4b98      	ldr	r3, [pc, #608]	; (d4cec <loop+0x28c>)
   d4a8a:	781b      	ldrb	r3, [r3, #0]
   d4a8c:	2b02      	cmp	r3, #2
   d4a8e:	d001      	beq.n	d4a94 <loop+0x34>
   d4a90:	f7ff ffac 	bl	d49ec <_Z22publishStateTransitionv>
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = SLEEPING_STATE;
   d4a94:	4b96      	ldr	r3, [pc, #600]	; (d4cf0 <loop+0x290>)
   d4a96:	781b      	ldrb	r3, [r3, #0]
   d4a98:	b14b      	cbz	r3, d4aae <loop+0x4e>
   d4a9a:	f000 fc0f 	bl	d52bc <HAL_Timer_Get_Milli_Seconds>
   d4a9e:	4b95      	ldr	r3, [pc, #596]	; (d4cf4 <loop+0x294>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	1ac0      	subs	r0, r0, r3
   d4aa4:	4b94      	ldr	r3, [pc, #592]	; (d4cf8 <loop+0x298>)
   d4aa6:	681b      	ldr	r3, [r3, #0]
   d4aa8:	4298      	cmp	r0, r3
   d4aaa:	f200 81e3 	bhi.w	d4e74 <loop+0x414>
    //if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;    // We want to report on the hour but not after bedtime
    if ((Time.minute() % 5 == 0) && (Time.now() - currentCountTime > 60)) state = MEASURING_STATE; 
   d4aae:	f001 ffa5 	bl	d69fc <_ZN9TimeClass6minuteEv>
   d4ab2:	2305      	movs	r3, #5
   d4ab4:	fb90 f3f3 	sdiv	r3, r0, r3
   d4ab8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4abc:	4298      	cmp	r0, r3
   d4abe:	d107      	bne.n	d4ad0 <loop+0x70>
   d4ac0:	f001 ff8b 	bl	d69da <_ZN9TimeClass3nowEv>
   d4ac4:	4b8d      	ldr	r3, [pc, #564]	; (d4cfc <loop+0x29c>)
   d4ac6:	681b      	ldr	r3, [r3, #0]
   d4ac8:	1ac0      	subs	r0, r0, r3
   d4aca:	283c      	cmp	r0, #60	; 0x3c
   d4acc:	f300 81d5 	bgt.w	d4e7a <loop+0x41a>
    meterParticlePublish();
   d4ad0:	f7ff fd06 	bl	d44e0 <_Z20meterParticlePublishv>
    Particle.publish("Minutes",String(Time.minute()),PRIVATE);
   d4ad4:	f001 ff92 	bl	d69fc <_ZN9TimeClass6minuteEv>
   d4ad8:	4e89      	ldr	r6, [pc, #548]	; (d4d00 <loop+0x2a0>)
   d4ada:	4601      	mov	r1, r0
   d4adc:	220a      	movs	r2, #10
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4ade:	2500      	movs	r5, #0
   d4ae0:	a808      	add	r0, sp, #32
   d4ae2:	f001 fe19 	bl	d6718 <_ZN6StringC1Eih>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4ae6:	7833      	ldrb	r3, [r6, #0]
   d4ae8:	9a08      	ldr	r2, [sp, #32]
   d4aea:	4986      	ldr	r1, [pc, #536]	; (d4d04 <loop+0x2a4>)
   d4aec:	f88d 5000 	strb.w	r5, [sp]
   d4af0:	a806      	add	r0, sp, #24
   d4af2:	f7ff faf1 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.45>
   d4af6:	a807      	add	r0, sp, #28
   d4af8:	f7ff fd3c 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4afc:	a808      	add	r0, sp, #32
   d4afe:	f001 fd86 	bl	d660e <_ZN6StringD1Ev>
    Particle.publish("Now",String(Time.now()),PRIVATE);
   d4b02:	f001 ff6a 	bl	d69da <_ZN9TimeClass3nowEv>
   d4b06:	220a      	movs	r2, #10
   d4b08:	4601      	mov	r1, r0
   d4b0a:	a808      	add	r0, sp, #32
   d4b0c:	f001 fe17 	bl	d673e <_ZN6StringC1Elh>
   d4b10:	7833      	ldrb	r3, [r6, #0]
   d4b12:	9a08      	ldr	r2, [sp, #32]
   d4b14:	497c      	ldr	r1, [pc, #496]	; (d4d08 <loop+0x2a8>)
   d4b16:	f88d 5000 	strb.w	r5, [sp]
   d4b1a:	a806      	add	r0, sp, #24
   d4b1c:	f7ff fadc 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.45>
   d4b20:	a807      	add	r0, sp, #28
   d4b22:	f7ff fd27 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b26:	a808      	add	r0, sp, #32
   d4b28:	f001 fd71 	bl	d660e <_ZN6StringD1Ev>
    if (batteryVoltage <= lowBattLimit) state = LOW_BATTERY_STATE;               // The battery is low - sleep
   d4b2c:	4b77      	ldr	r3, [pc, #476]	; (d4d0c <loop+0x2ac>)
   d4b2e:	ed93 7a00 	vldr	s14, [r3]
   d4b32:	4b77      	ldr	r3, [pc, #476]	; (d4d10 <loop+0x2b0>)
   d4b34:	edd3 7a00 	vldr	s15, [r3]
   d4b38:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4b40:	f200 819e 	bhi.w	d4e80 <loop+0x420>
   d4b44:	2307      	movs	r3, #7
   d4b46:	e028      	b.n	d4b9a <loop+0x13a>
    break;

  case MEASURING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
   d4b48:	4b67      	ldr	r3, [pc, #412]	; (d4ce8 <loop+0x288>)
   d4b4a:	781a      	ldrb	r2, [r3, #0]
   d4b4c:	461d      	mov	r5, r3
   d4b4e:	b12a      	cbz	r2, d4b5c <loop+0xfc>
   d4b50:	4b66      	ldr	r3, [pc, #408]	; (d4cec <loop+0x28c>)
   d4b52:	781b      	ldrb	r3, [r3, #0]
   d4b54:	2b03      	cmp	r3, #3
   d4b56:	d001      	beq.n	d4b5c <loop+0xfc>
   d4b58:	f7ff ff48 	bl	d49ec <_Z22publishStateTransitionv>
    // Given you are coming up from a powered off state - you many need to introduce a non-blocking delay here to allow the sensors to warm up
    if (!takeMeasurements())
   d4b5c:	f7ff fb06 	bl	d416c <_Z16takeMeasurementsv>
   d4b60:	4606      	mov	r6, r0
   d4b62:	b9c8      	cbnz	r0, d4b98 <loop+0x138>
    {
      state = ERROR_STATE;
   d4b64:	2301      	movs	r3, #1
   d4b66:	7023      	strb	r3, [r4, #0]
      if (verboseMode) {
   d4b68:	782b      	ldrb	r3, [r5, #0]
   d4b6a:	2b00      	cmp	r3, #0
   d4b6c:	f000 8188 	beq.w	d4e80 <loop+0x420>
        waitUntil(meterParticlePublish);
   d4b70:	f7ff fcc8 	bl	d4504 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.32>
   d4b74:	f000 fd58 	bl	d5628 <spark_cloud_flag_connected>
        if(Particle.connected()) Particle.publish("State","Error taking Measurements",PRIVATE);
   d4b78:	2800      	cmp	r0, #0
   d4b7a:	f000 8181 	beq.w	d4e80 <loop+0x420>
   d4b7e:	4b60      	ldr	r3, [pc, #384]	; (d4d00 <loop+0x2a0>)
   d4b80:	4a64      	ldr	r2, [pc, #400]	; (d4d14 <loop+0x2b4>)
   d4b82:	781b      	ldrb	r3, [r3, #0]
   d4b84:	4964      	ldr	r1, [pc, #400]	; (d4d18 <loop+0x2b8>)
   d4b86:	f88d 6000 	strb.w	r6, [sp]
   d4b8a:	a808      	add	r0, sp, #32
   d4b8c:	f7ff faa4 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.45>
   d4b90:	a809      	add	r0, sp, #36	; 0x24
   d4b92:	f7ff fcef 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b96:	e173      	b.n	d4e80 <loop+0x420>
      }
    }
    else state = REPORTING_STATE;
   d4b98:	2304      	movs	r3, #4
   d4b9a:	7023      	strb	r3, [r4, #0]
   d4b9c:	e170      	b.n	d4e80 <loop+0x420>
    break;

  case REPORTING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
   d4b9e:	4b52      	ldr	r3, [pc, #328]	; (d4ce8 <loop+0x288>)
   d4ba0:	781b      	ldrb	r3, [r3, #0]
   d4ba2:	b12b      	cbz	r3, d4bb0 <loop+0x150>
   d4ba4:	4b51      	ldr	r3, [pc, #324]	; (d4cec <loop+0x28c>)
   d4ba6:	781b      	ldrb	r3, [r3, #0]
   d4ba8:	2b04      	cmp	r3, #4
   d4baa:	d001      	beq.n	d4bb0 <loop+0x150>
   d4bac:	f7ff ff1e 	bl	d49ec <_Z22publishStateTransitionv>
   d4bb0:	f000 fd3a 	bl	d5628 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4bb4:	2800      	cmp	r0, #0
   d4bb6:	d03c      	beq.n	d4c32 <loop+0x1d2>
      if (Time.hour() == 12) Particle.syncTime();                         // Set the clock each day at noon
   d4bb8:	f001 ff16 	bl	d69e8 <_ZN9TimeClass4hourEv>
   d4bbc:	280c      	cmp	r0, #12
   d4bbe:	d102      	bne.n	d4bc6 <loop+0x166>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        return CLOUD_FN(spark_sync_time(NULL), false);
   d4bc0:	2000      	movs	r0, #0
   d4bc2:	f000 fd51 	bl	d5668 <spark_sync_time>
      sendEvent();                                                      // Send data to Ubidots if we haven't already
   d4bc6:	f7ff fceb 	bl	d45a0 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                          // Wait for Response
   d4bca:	2305      	movs	r3, #5
   d4bcc:	e7e5      	b.n	d4b9a <loop+0x13a>
    }
    else state = ERROR_STATE;
    break;

  case RESP_WAIT_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
   d4bce:	4b46      	ldr	r3, [pc, #280]	; (d4ce8 <loop+0x288>)
   d4bd0:	781b      	ldrb	r3, [r3, #0]
   d4bd2:	b12b      	cbz	r3, d4be0 <loop+0x180>
   d4bd4:	4b45      	ldr	r3, [pc, #276]	; (d4cec <loop+0x28c>)
   d4bd6:	781b      	ldrb	r3, [r3, #0]
   d4bd8:	2b05      	cmp	r3, #5
   d4bda:	d001      	beq.n	d4be0 <loop+0x180>
   d4bdc:	f7ff ff06 	bl	d49ec <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d4be0:	4b4e      	ldr	r3, [pc, #312]	; (d4d1c <loop+0x2bc>)
   d4be2:	781b      	ldrb	r3, [r3, #0]
   d4be4:	b953      	cbnz	r3, d4bfc <loop+0x19c>
    {
      state = IDLE_STATE;
   d4be6:	2302      	movs	r3, #2
   d4be8:	7023      	strb	r3, [r4, #0]
      stayAwake = stayAwakeLong;                                      // Keeps Electron awake after reboot - helps with recovery
   d4bea:	4b43      	ldr	r3, [pc, #268]	; (d4cf8 <loop+0x298>)
   d4bec:	f246 12a8 	movw	r2, #25000	; 0x61a8
   d4bf0:	601a      	str	r2, [r3, #0]
   d4bf2:	f000 fb63 	bl	d52bc <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d4bf6:	4b3f      	ldr	r3, [pc, #252]	; (d4cf4 <loop+0x294>)
   d4bf8:	6018      	str	r0, [r3, #0]
   d4bfa:	e141      	b.n	d4e80 <loop+0x420>
   d4bfc:	f000 fb5e 	bl	d52bc <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d4c00:	4b47      	ldr	r3, [pc, #284]	; (d4d20 <loop+0x2c0>)
   d4c02:	681b      	ldr	r3, [r3, #0]
   d4c04:	1ac0      	subs	r0, r0, r3
   d4c06:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4c0a:	4298      	cmp	r0, r3
   d4c0c:	f240 8138 	bls.w	d4e80 <loop+0x420>
   d4c10:	f000 fb54 	bl	d52bc <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4c14:	4b43      	ldr	r3, [pc, #268]	; (d4d24 <loop+0x2c4>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4c16:	4944      	ldr	r1, [pc, #272]	; (d4d28 <loop+0x2c8>)
      state = IDLE_STATE;
      stayAwake = stayAwakeLong;                                      // Keeps Electron awake after reboot - helps with recovery
      stayAwakeTimeStamp = millis();
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
      resetTimeStamp = millis();
   d4c18:	6018      	str	r0, [r3, #0]
   d4c1a:	4b39      	ldr	r3, [pc, #228]	; (d4d00 <loop+0x2a0>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4c1c:	2200      	movs	r2, #0
   d4c1e:	781b      	ldrb	r3, [r3, #0]
   d4c20:	f88d 2000 	strb.w	r2, [sp]
   d4c24:	a808      	add	r0, sp, #32
   d4c26:	4a41      	ldr	r2, [pc, #260]	; (d4d2c <loop+0x2cc>)
   d4c28:	f7ff fa56 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.45>
   d4c2c:	a809      	add	r0, sp, #36	; 0x24
   d4c2e:	f7ff fca1 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
   d4c32:	2301      	movs	r3, #1
   d4c34:	e7b1      	b.n	d4b9a <loop+0x13a>
    } 
    break;

  case SLEEPING_STATE: {                                                // This state is triggered once the park closes and runs until it opens
    if (verboseMode && state != oldState) publishStateTransition();
   d4c36:	4b2c      	ldr	r3, [pc, #176]	; (d4ce8 <loop+0x288>)
   d4c38:	781a      	ldrb	r2, [r3, #0]
   d4c3a:	461d      	mov	r5, r3
   d4c3c:	b12a      	cbz	r2, d4c4a <loop+0x1ea>
   d4c3e:	4b2b      	ldr	r3, [pc, #172]	; (d4cec <loop+0x28c>)
   d4c40:	781b      	ldrb	r3, [r3, #0]
   d4c42:	2b06      	cmp	r3, #6
   d4c44:	d001      	beq.n	d4c4a <loop+0x1ea>
   d4c46:	f7ff fed1 	bl	d49ec <_Z22publishStateTransitionv>
    if (!readyForBed)                                                   // Only do these things once - at bedtime
   d4c4a:	4b39      	ldr	r3, [pc, #228]	; (d4d30 <loop+0x2d0>)
   d4c4c:	781e      	ldrb	r6, [r3, #0]
   d4c4e:	461f      	mov	r7, r3
   d4c50:	bb3e      	cbnz	r6, d4ca2 <loop+0x242>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4c52:	f000 fce9 	bl	d5628 <spark_cloud_flag_connected>
    {
      if (Particle.connected()) {
   d4c56:	b1a8      	cbz	r0, d4c84 <loop+0x224>
        if (verboseMode) {
   d4c58:	782b      	ldrb	r3, [r5, #0]
   d4c5a:	b16b      	cbz	r3, d4c78 <loop+0x218>
          waitUntil(meterParticlePublish);
   d4c5c:	f7ff fc52 	bl	d4504 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.32>
   d4c60:	4b27      	ldr	r3, [pc, #156]	; (d4d00 <loop+0x2a0>)
          Particle.publish("State","Going to Sleep",PRIVATE);
   d4c62:	4a34      	ldr	r2, [pc, #208]	; (d4d34 <loop+0x2d4>)
   d4c64:	781b      	ldrb	r3, [r3, #0]
   d4c66:	492c      	ldr	r1, [pc, #176]	; (d4d18 <loop+0x2b8>)
   d4c68:	f88d 6000 	strb.w	r6, [sp]
   d4c6c:	a808      	add	r0, sp, #32
   d4c6e:	f7ff fa33 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.45>
   d4c72:	a809      	add	r0, sp, #36	; 0x24
   d4c74:	f7ff fc7e 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        delay(1000);                                                    // Time to send last update
   d4c78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4c7c:	f000 fd9c 	bl	d57b8 <delay>
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
   d4c80:	f7ff fc1c 	bl	d44bc <_Z22disconnectFromParticlev>
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
   d4c84:	f002 f91a 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d4c88:	4b2b      	ldr	r3, [pc, #172]	; (d4d38 <loop+0x2d8>)
   d4c8a:	2002      	movs	r0, #2
   d4c8c:	7819      	ldrb	r1, [r3, #0]
   d4c8e:	f7ff fa21 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.19>
      ledState = false;
   d4c92:	4b2a      	ldr	r3, [pc, #168]	; (d4d3c <loop+0x2dc>)
   d4c94:	2100      	movs	r1, #0
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d4c96:	2007      	movs	r0, #7
        }
        delay(1000);                                                    // Time to send last update
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
      ledState = false;
   d4c98:	7019      	strb	r1, [r3, #0]
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d4c9a:	f002 f8f6 	bl	d6e8a <digitalWrite>
      readyForBed = true;                                               // Set the flag for the night
   d4c9e:	2301      	movs	r3, #1
   d4ca0:	703b      	strb	r3, [r7, #0]
    }
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d4ca2:	f001 fe9a 	bl	d69da <_ZN9TimeClass3nowEv>
   d4ca6:	4b26      	ldr	r3, [pc, #152]	; (d4d40 <loop+0x2e0>)
   d4ca8:	6819      	ldr	r1, [r3, #0]
   d4caa:	2306      	movs	r3, #6
   d4cac:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4cb0:	ab0c      	add	r3, sp, #48	; 0x30
   d4cb2:	2201      	movs	r2, #1
   d4cb4:	f803 2d19 	strb.w	r2, [r3, #-25]!
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
   d4cb8:	9102      	str	r1, [sp, #8]
   d4cba:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d4cbe:	fb90 f5f1 	sdiv	r5, r0, r1
   d4cc2:	fb05 0011 	mls	r0, r5, r1, r0
   d4cc6:	1a08      	subs	r0, r1, r0
   d4cc8:	4288      	cmp	r0, r1
   d4cca:	bfa8      	it	ge
   d4ccc:	4608      	movge	r0, r1
   d4cce:	9001      	str	r0, [sp, #4]
   d4cd0:	9200      	str	r2, [sp, #0]
   d4cd2:	a906      	add	r1, sp, #24
   d4cd4:	a808      	add	r0, sp, #32
   d4cd6:	f001 fda7 	bl	d6828 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    // In your use case, substitute the line below with the instrcution to the TPL5111 to disable the device
    //System.sleep(SLEEP_MODE_SOFTPOWEROFF,secondsToHour);                // Very deep sleep till the next hour - then resets
    System.sleep(D6,RISING,wakeInSeconds);  
    state = IDLE_STATE;                                                  // need to go back to idle immediately after wakup
   d4cda:	2302      	movs	r3, #2
   d4cdc:	7023      	strb	r3, [r4, #0]
    connectToParticle();                                                 // Reconnect to Particle (not needed for stop sleep)
   d4cde:	f7ff fb91 	bl	d4404 <_Z17connectToParticlev>
    } break;
   d4ce2:	e0cd      	b.n	d4e80 <loop+0x420>
   d4ce4:	2003e1f5 	.word	0x2003e1f5
   d4ce8:	2003e1e4 	.word	0x2003e1e4
   d4cec:	2003e1d4 	.word	0x2003e1d4
   d4cf0:	2003e25c 	.word	0x2003e25c
   d4cf4:	2003e268 	.word	0x2003e268
   d4cf8:	2003e2b0 	.word	0x2003e2b0
   d4cfc:	2003e1d8 	.word	0x2003e1d8
   d4d00:	2003e1ac 	.word	0x2003e1ac
   d4d04:	000d84e4 	.word	0x000d84e4
   d4d08:	000d863f 	.word	0x000d863f
   d4d0c:	2003e2dc 	.word	0x2003e2dc
   d4d10:	2003e0a4 	.word	0x2003e0a4
   d4d14:	000d84ec 	.word	0x000d84ec
   d4d18:	000d8462 	.word	0x000d8462
   d4d1c:	2003e0a0 	.word	0x2003e0a0
   d4d20:	2003e194 	.word	0x2003e194
   d4d24:	2003e2b4 	.word	0x2003e2b4
   d4d28:	000d8506 	.word	0x000d8506
   d4d2c:	000d82be 	.word	0x000d82be
   d4d30:	2003e308 	.word	0x2003e308
   d4d34:	000d851f 	.word	0x000d851f
   d4d38:	2003e238 	.word	0x2003e238
   d4d3c:	2003e2d8 	.word	0x2003e2d8
   d4d40:	2003e250 	.word	0x2003e250


  case LOW_BATTERY_STATE: {                                             // Sleep state but leaves the fuel gauge on
    if (verboseMode && state != oldState) publishStateTransition();
   d4d44:	4b4f      	ldr	r3, [pc, #316]	; (d4e84 <loop+0x424>)
   d4d46:	781a      	ldrb	r2, [r3, #0]
   d4d48:	461c      	mov	r4, r3
   d4d4a:	b12a      	cbz	r2, d4d58 <loop+0x2f8>
   d4d4c:	4b4e      	ldr	r3, [pc, #312]	; (d4e88 <loop+0x428>)
   d4d4e:	781b      	ldrb	r3, [r3, #0]
   d4d50:	2b07      	cmp	r3, #7
   d4d52:	d001      	beq.n	d4d58 <loop+0x2f8>
   d4d54:	f7ff fe4a 	bl	d49ec <_Z22publishStateTransitionv>
   d4d58:	f000 fc66 	bl	d5628 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4d5c:	b1b0      	cbz	r0, d4d8c <loop+0x32c>
      if (verboseMode) {
   d4d5e:	7823      	ldrb	r3, [r4, #0]
   d4d60:	b173      	cbz	r3, d4d80 <loop+0x320>
        waitUntil(meterParticlePublish);
   d4d62:	f7ff fbcf 	bl	d4504 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.32>
   d4d66:	4b49      	ldr	r3, [pc, #292]	; (d4e8c <loop+0x42c>)
        Particle.publish("State","Low Battery - Sleeping",PRIVATE);
   d4d68:	4949      	ldr	r1, [pc, #292]	; (d4e90 <loop+0x430>)
   d4d6a:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4d6c:	2200      	movs	r2, #0
   d4d6e:	f88d 2000 	strb.w	r2, [sp]
   d4d72:	a808      	add	r0, sp, #32
   d4d74:	4a47      	ldr	r2, [pc, #284]	; (d4e94 <loop+0x434>)
   d4d76:	f7ff f9af 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.45>
   d4d7a:	a809      	add	r0, sp, #36	; 0x24
   d4d7c:	f7ff fbfa 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
      delay(1000);                                                    // Time to send last update
   d4d80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4d84:	f000 fd18 	bl	d57b8 <delay>
      disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
   d4d88:	f7ff fb98 	bl	d44bc <_Z22disconnectFromParticlev>
    }
    ledState = false;
   d4d8c:	4b42      	ldr	r3, [pc, #264]	; (d4e98 <loop+0x438>)
   d4d8e:	2100      	movs	r1, #0
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d4d90:	2007      	movs	r0, #7
        Particle.publish("State","Low Battery - Sleeping",PRIVATE);
      }
      delay(1000);                                                    // Time to send last update
      disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
    }
    ledState = false;
   d4d92:	7019      	strb	r1, [r3, #0]
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d4d94:	f002 f879 	bl	d6e8a <digitalWrite>
    int secondsToHour = (60*(60 - Time.minute()));                    // Time till the top of the hour
   d4d98:	f001 fe30 	bl	d69fc <_ZN9TimeClass6minuteEv>
    // In your use case, substitute the line below with the instrcution to the TPL5111 to disable the device
    System.sleep(SLEEP_MODE_DEEP,secondsToHour);                      // Very deep sleep till the next hour - then resets
   d4d9c:	4b3f      	ldr	r3, [pc, #252]	; (d4e9c <loop+0x43c>)
   d4d9e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d4da2:	223c      	movs	r2, #60	; 0x3c
   d4da4:	4342      	muls	r2, r0
   d4da6:	681b      	ldr	r3, [r3, #0]
   d4da8:	2101      	movs	r1, #1
   d4daa:	a808      	add	r0, sp, #32
   d4dac:	f001 fd0c 	bl	d67c8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    } break;
   d4db0:	e066      	b.n	d4e80 <loop+0x420>

  case ERROR_STATE:                                                   // To be enhanced - where we deal with errors
    if (verboseMode && state != oldState) publishStateTransition();
   d4db2:	4b34      	ldr	r3, [pc, #208]	; (d4e84 <loop+0x424>)
   d4db4:	781b      	ldrb	r3, [r3, #0]
   d4db6:	b12b      	cbz	r3, d4dc4 <loop+0x364>
   d4db8:	4b33      	ldr	r3, [pc, #204]	; (d4e88 <loop+0x428>)
   d4dba:	781b      	ldrb	r3, [r3, #0]
   d4dbc:	2b01      	cmp	r3, #1
   d4dbe:	d001      	beq.n	d4dc4 <loop+0x364>
   d4dc0:	f7ff fe14 	bl	d49ec <_Z22publishStateTransitionv>
   d4dc4:	f000 fa7a 	bl	d52bc <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d4dc8:	4b35      	ldr	r3, [pc, #212]	; (d4ea0 <loop+0x440>)
   d4dca:	681b      	ldr	r3, [r3, #0]
   d4dcc:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d4dd0:	3330      	adds	r3, #48	; 0x30
   d4dd2:	4298      	cmp	r0, r3
   d4dd4:	d954      	bls.n	d4e80 <loop+0x420>
    {
      if (resetCount <= 3) {                                          // First try simple reset
   d4dd6:	4b33      	ldr	r3, [pc, #204]	; (d4ea4 <loop+0x444>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	2b03      	cmp	r3, #3
   d4ddc:	dc16      	bgt.n	d4e0c <loop+0x3ac>
   d4dde:	f000 fc23 	bl	d5628 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d4de2:	b160      	cbz	r0, d4dfe <loop+0x39e>
   d4de4:	4b29      	ldr	r3, [pc, #164]	; (d4e8c <loop+0x42c>)
   d4de6:	492a      	ldr	r1, [pc, #168]	; (d4e90 <loop+0x430>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4de8:	781b      	ldrb	r3, [r3, #0]
   d4dea:	2200      	movs	r2, #0
   d4dec:	f88d 2000 	strb.w	r2, [sp]
   d4df0:	a808      	add	r0, sp, #32
   d4df2:	4a2d      	ldr	r2, [pc, #180]	; (d4ea8 <loop+0x448>)
   d4df4:	f7ff f970 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.45>
   d4df8:	a809      	add	r0, sp, #36	; 0x24
   d4dfa:	f7ff fbbb 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d4dfe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4e02:	f000 fcd9 	bl	d57b8 <delay>
        System.reset();
   d4e06:	f001 fcdc 	bl	d67c2 <_ZN11SystemClass5resetEv>
   d4e0a:	e039      	b.n	d4e80 <loop+0x420>
      }
      else if (Time.now() - EEPROM.read(MEM_MAP::currentCountsTimeAddr) > 7200L) { //It has been more than two hours since a sucessful hook response
   d4e0c:	f001 fde5 	bl	d69da <_ZN9TimeClass3nowEv>
   d4e10:	4604      	mov	r4, r0
   d4e12:	f002 f853 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d4e16:	2005      	movs	r0, #5
   d4e18:	f7ff f95a 	bl	d40d0 <_ZN11EEPROMClass4readEi.isra.18>
   d4e1c:	1a20      	subs	r0, r4, r0
   d4e1e:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d4e22:	dd1c      	ble.n	d4e5e <loop+0x3fe>
   d4e24:	f000 fc00 	bl	d5628 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Lost Session", PRIVATE);  // Broadcast Reset Action
   d4e28:	b160      	cbz	r0, d4e44 <loop+0x3e4>
   d4e2a:	4b18      	ldr	r3, [pc, #96]	; (d4e8c <loop+0x42c>)
   d4e2c:	2200      	movs	r2, #0
   d4e2e:	781b      	ldrb	r3, [r3, #0]
   d4e30:	f88d 2000 	strb.w	r2, [sp]
   d4e34:	4a1d      	ldr	r2, [pc, #116]	; (d4eac <loop+0x44c>)
   d4e36:	4916      	ldr	r1, [pc, #88]	; (d4e90 <loop+0x430>)
   d4e38:	a808      	add	r0, sp, #32
   d4e3a:	f7ff f94d 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.45>
   d4e3e:	a809      	add	r0, sp, #36	; 0x24
   d4e40:	f7ff fb98 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d4e44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4e48:	f000 fcb6 	bl	d57b8 <delay>
        EEPROM.write(MEM_MAP::resetCountAddr,0);                           // Zero the ResetCount
   d4e4c:	f002 f836 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d4e50:	2100      	movs	r1, #0
   d4e52:	2002      	movs	r0, #2
   d4e54:	f7ff f93e 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.19>
        fullModemReset();                                             // Full Modem reset and reboots
   d4e58:	f7ff fb60 	bl	d451c <_Z14fullModemResetv>
   d4e5c:	e010      	b.n	d4e80 <loop+0x420>
   d4e5e:	f000 fbe3 	bl	d5628 <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d4e62:	2800      	cmp	r0, #0
   d4e64:	d0ee      	beq.n	d4e44 <loop+0x3e4>
   d4e66:	4b09      	ldr	r3, [pc, #36]	; (d4e8c <loop+0x42c>)
   d4e68:	2200      	movs	r2, #0
   d4e6a:	781b      	ldrb	r3, [r3, #0]
   d4e6c:	f88d 2000 	strb.w	r2, [sp]
   d4e70:	4a0f      	ldr	r2, [pc, #60]	; (d4eb0 <loop+0x450>)
   d4e72:	e7e0      	b.n	d4e36 <loop+0x3d6>
void loop()
{
  switch(state) {
  case IDLE_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = SLEEPING_STATE;
   d4e74:	2306      	movs	r3, #6
   d4e76:	7023      	strb	r3, [r4, #0]
   d4e78:	e619      	b.n	d4aae <loop+0x4e>
    //if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;    // We want to report on the hour but not after bedtime
    if ((Time.minute() % 5 == 0) && (Time.now() - currentCountTime > 60)) state = MEASURING_STATE; 
   d4e7a:	2303      	movs	r3, #3
   d4e7c:	7023      	strb	r3, [r4, #0]
   d4e7e:	e627      	b.n	d4ad0 <loop+0x70>
        fullModemReset();                                             // Full Modem reset and reboots
      }
    }
    break;
  }
}
   d4e80:	b00d      	add	sp, #52	; 0x34
   d4e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e84:	2003e1e4 	.word	0x2003e1e4
   d4e88:	2003e1d4 	.word	0x2003e1d4
   d4e8c:	2003e1ac 	.word	0x2003e1ac
   d4e90:	000d8462 	.word	0x000d8462
   d4e94:	000d852e 	.word	0x000d852e
   d4e98:	2003e2d8 	.word	0x2003e2d8
   d4e9c:	2003e250 	.word	0x2003e250
   d4ea0:	2003e2b4 	.word	0x2003e2b4
   d4ea4:	2003e238 	.word	0x2003e238
   d4ea8:	000d8545 	.word	0x000d8545
   d4eac:	000d8559 	.word	0x000d8559
   d4eb0:	000d8574 	.word	0x000d8574

000d4eb4 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4eb4:	2300      	movs	r3, #0
   d4eb6:	2204      	movs	r2, #4
   d4eb8:	f000 bb8e 	b.w	d55d8 <spark_variable>

000d4ebc <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4ebc:	4602      	mov	r2, r0
   d4ebe:	4801      	ldr	r0, [pc, #4]	; (d4ec4 <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d4ec0:	f000 be00 	b.w	d5ac4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4ec4:	000d5a99 	.word	0x000d5a99

000d4ec8 <setup>:
int rat;
float strengthPercentage;
float qualityPercentage;

void setup()                                                      // Note: Disconnected Setup()
{
   d4ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d4eca:	4b8f      	ldr	r3, [pc, #572]	; (d5108 <setup+0x240>)
int rat;
float strengthPercentage;
float qualityPercentage;

void setup()                                                      // Note: Disconnected Setup()
{
   d4ecc:	b0b9      	sub	sp, #228	; 0xe4
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d4ece:	aa08      	add	r2, sp, #32
   d4ed0:	f103 0510 	add.w	r5, r3, #16
   d4ed4:	4616      	mov	r6, r2
   d4ed6:	6818      	ldr	r0, [r3, #0]
   d4ed8:	6859      	ldr	r1, [r3, #4]
   d4eda:	4614      	mov	r4, r2
   d4edc:	c403      	stmia	r4!, {r0, r1}
   d4ede:	3308      	adds	r3, #8
   d4ee0:	42ab      	cmp	r3, r5
   d4ee2:	4622      	mov	r2, r4
   d4ee4:	d1f7      	bne.n	d4ed6 <setup+0xe>
   d4ee6:	8819      	ldrh	r1, [r3, #0]
   d4ee8:	789b      	ldrb	r3, [r3, #2]
   d4eea:	70a3      	strb	r3, [r4, #2]
   d4eec:	222d      	movs	r2, #45	; 0x2d
   d4eee:	8021      	strh	r1, [r4, #0]
   d4ef0:	f10d 0033 	add.w	r0, sp, #51	; 0x33
   d4ef4:	2100      	movs	r1, #0
  state = IDLE_STATE;
   d4ef6:	4f85      	ldr	r7, [pc, #532]	; (d510c <setup+0x244>)
float strengthPercentage;
float qualityPercentage;

void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d4ef8:	f002 fca5 	bl	d7846 <memset>
  state = IDLE_STATE;
   d4efc:	2502      	movs	r5, #2

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
   d4efe:	2101      	movs	r1, #1
   d4f00:	2007      	movs	r0, #7
float qualityPercentage;

void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
  state = IDLE_STATE;
   d4f02:	703d      	strb	r5, [r7, #0]

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
   d4f04:	f001 ffb0 	bl	d6e68 <pinMode>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4f08:	a804      	add	r0, sp, #16
     */
    int publishVitals(system_tick_t period = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d4f0a:	2400      	movs	r4, #0
   d4f0c:	f000 fb94 	bl	d5638 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4f10:	2300      	movs	r3, #0
   d4f12:	227d      	movs	r2, #125	; 0x7d
   d4f14:	a918      	add	r1, sp, #96	; 0x60
   d4f16:	a804      	add	r0, sp, #16
   d4f18:	f001 fc36 	bl	d6788 <_ZNK6String8getBytesEPhjj>
   d4f1c:	4623      	mov	r3, r4
   d4f1e:	4622      	mov	r2, r4
   d4f20:	497b      	ldr	r1, [pc, #492]	; (d5110 <setup+0x248>)
   d4f22:	9401      	str	r4, [sp, #4]
   d4f24:	9400      	str	r4, [sp, #0]
   d4f26:	a818      	add	r0, sp, #96	; 0x60
   d4f28:	f000 fb96 	bl	d5658 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
   d4f2c:	4979      	ldr	r1, [pc, #484]	; (d5114 <setup+0x24c>)
   d4f2e:	487a      	ldr	r0, [pc, #488]	; (d5118 <setup+0x250>)
   d4f30:	f7ff ffc0 	bl	d4eb4 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4f34:	4623      	mov	r3, r4
   d4f36:	462a      	mov	r2, r5
   d4f38:	4978      	ldr	r1, [pc, #480]	; (d511c <setup+0x254>)
   d4f3a:	4879      	ldr	r0, [pc, #484]	; (d5120 <setup+0x258>)
   d4f3c:	f000 fb4c 	bl	d55d8 <spark_variable>
   d4f40:	4978      	ldr	r1, [pc, #480]	; (d5124 <setup+0x25c>)
   d4f42:	4879      	ldr	r0, [pc, #484]	; (d5128 <setup+0x260>)
   d4f44:	6809      	ldr	r1, [r1, #0]
   d4f46:	4623      	mov	r3, r4
   d4f48:	2204      	movs	r2, #4
   d4f4a:	f000 fb45 	bl	d55d8 <spark_variable>
  Particle.variable("ResetCount", resetCount);
  Particle.variable("Release",releaseNumber);
  Particle.variable("stateOfChg", batteryString);
   d4f4e:	4977      	ldr	r1, [pc, #476]	; (d512c <setup+0x264>)
   d4f50:	4877      	ldr	r0, [pc, #476]	; (d5130 <setup+0x268>)
   d4f52:	f7ff ffaf 	bl	d4eb4 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
   d4f56:	4623      	mov	r3, r4
   d4f58:	2201      	movs	r2, #1
   d4f5a:	4976      	ldr	r1, [pc, #472]	; (d5134 <setup+0x26c>)
   d4f5c:	4876      	ldr	r0, [pc, #472]	; (d5138 <setup+0x270>)
   d4f5e:	f000 fb3b 	bl	d55d8 <spark_variable>
  Particle.variable("lowPowerMode",lowPowerMode);
  Particle.variable("temperature", temperatureString);
   d4f62:	4976      	ldr	r1, [pc, #472]	; (d513c <setup+0x274>)
   d4f64:	4876      	ldr	r0, [pc, #472]	; (d5140 <setup+0x278>)
   d4f66:	f7ff ffa5 	bl	d4eb4 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("humidity", humidityString);
   d4f6a:	4976      	ldr	r1, [pc, #472]	; (d5144 <setup+0x27c>)
   d4f6c:	4876      	ldr	r0, [pc, #472]	; (d5148 <setup+0x280>)
   d4f6e:	f7ff ffa1 	bl	d4eb4 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilTemp",soilTempInCString);
   d4f72:	4976      	ldr	r1, [pc, #472]	; (d514c <setup+0x284>)
   d4f74:	4876      	ldr	r0, [pc, #472]	; (d5150 <setup+0x288>)
   d4f76:	f7ff ff9d 	bl	d4eb4 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture1",soilMoisture1String);
   d4f7a:	4976      	ldr	r1, [pc, #472]	; (d5154 <setup+0x28c>)
   d4f7c:	4876      	ldr	r0, [pc, #472]	; (d5158 <setup+0x290>)
   d4f7e:	f7ff ff99 	bl	d4eb4 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture2",soilMoisture2String);
   d4f82:	4976      	ldr	r1, [pc, #472]	; (d515c <setup+0x294>)
   d4f84:	4876      	ldr	r0, [pc, #472]	; (d5160 <setup+0x298>)
   d4f86:	f7ff ff95 	bl	d4eb4 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture3",soilMoisture3String);
   d4f8a:	4976      	ldr	r1, [pc, #472]	; (d5164 <setup+0x29c>)
   d4f8c:	4876      	ldr	r0, [pc, #472]	; (d5168 <setup+0x2a0>)
   d4f8e:	f7ff ff91 	bl	d4eb4 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture4",soilMoisture4String);
   d4f92:	4976      	ldr	r1, [pc, #472]	; (d516c <setup+0x2a4>)
   d4f94:	4876      	ldr	r0, [pc, #472]	; (d5170 <setup+0x2a8>)
   d4f96:	f7ff ff8d 	bl	d4eb4 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture5",soilMoisture5String);
   d4f9a:	4976      	ldr	r1, [pc, #472]	; (d5174 <setup+0x2ac>)
   d4f9c:	4876      	ldr	r0, [pc, #472]	; (d5178 <setup+0x2b0>)
   d4f9e:	f7ff ff89 	bl	d4eb4 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture6",soilMoisture6String);
   d4fa2:	4976      	ldr	r1, [pc, #472]	; (d517c <setup+0x2b4>)
   d4fa4:	4876      	ldr	r0, [pc, #472]	; (d5180 <setup+0x2b8>)
   d4fa6:	f7ff ff85 	bl	d4eb4 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>

  
  Particle.function("Measure-Now",measureNow);
   d4faa:	4976      	ldr	r1, [pc, #472]	; (d5184 <setup+0x2bc>)
   d4fac:	4876      	ldr	r0, [pc, #472]	; (d5188 <setup+0x2c0>)
   d4fae:	f7ff ff85 	bl	d4ebc <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
   d4fb2:	4976      	ldr	r1, [pc, #472]	; (d518c <setup+0x2c4>)
   d4fb4:	4876      	ldr	r0, [pc, #472]	; (d5190 <setup+0x2c8>)
   d4fb6:	f7ff ff81 	bl	d4ebc <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
   d4fba:	4976      	ldr	r1, [pc, #472]	; (d5194 <setup+0x2cc>)
   d4fbc:	4876      	ldr	r0, [pc, #472]	; (d5198 <setup+0x2d0>)
   d4fbe:	f7ff ff7d 	bl	d4ebc <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetTimeZone",setTimeZone);
   d4fc2:	4976      	ldr	r1, [pc, #472]	; (d519c <setup+0x2d4>)
   d4fc4:	4876      	ldr	r0, [pc, #472]	; (d51a0 <setup+0x2d8>)
   d4fc6:	f7ff ff79 	bl	d4ebc <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
   d4fca:	f001 ff77 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d4fce:	4620      	mov	r0, r4
   d4fd0:	f7ff f87e 	bl	d40d0 <_ZN11EEPROMClass4readEi.isra.18>
   d4fd4:	2801      	cmp	r0, #1
   d4fd6:	d119      	bne.n	d500c <setup+0x144>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
    }
  }

  resetCount = EEPROM.read(MEM_MAP::resetCountAddr);                    // Retrive system recount data from FRAM
   d4fd8:	f001 ff70 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d4fdc:	2002      	movs	r0, #2
   d4fde:	f7ff f877 	bl	d40d0 <_ZN11EEPROMClass4readEi.isra.18>
   d4fe2:	4c4e      	ldr	r4, [pc, #312]	; (d511c <setup+0x254>)
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d4fe4:	2200      	movs	r2, #0
   d4fe6:	6020      	str	r0, [r4, #0]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4fe8:	4611      	mov	r1, r2
   d4fea:	a802      	add	r0, sp, #8
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d4fec:	9202      	str	r2, [sp, #8]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4fee:	f000 f955 	bl	d529c <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d4ff2:	9b02      	ldr	r3, [sp, #8]
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
   d4ff4:	2b14      	cmp	r3, #20
   d4ff6:	d11e      	bne.n	d5036 <setup+0x16e>
  {
    resetCount++;
   d4ff8:	6823      	ldr	r3, [r4, #0]
   d4ffa:	3301      	adds	r3, #1
   d4ffc:	6023      	str	r3, [r4, #0]
    EEPROM.write(MEM_MAP::resetCountAddr, resetCount);                  // If so, store incremented number - watchdog must have done This
   d4ffe:	f001 ff5d 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d5002:	7821      	ldrb	r1, [r4, #0]
   d5004:	2002      	movs	r0, #2
   d5006:	f7ff f865 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.19>
   d500a:	e014      	b.n	d5036 <setup+0x16e>
  Particle.function("LowPowerMode",setLowPowerMode);
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
   d500c:	f001 ff56 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d5010:	2501      	movs	r5, #1
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d5012:	2204      	movs	r2, #4
   d5014:	a902      	add	r1, sp, #8
   d5016:	4620      	mov	r0, r4
   d5018:	9502      	str	r5, [sp, #8]
   d501a:	f000 f977 	bl	d530c <HAL_EEPROM_Put>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d501e:	f001 ff4d 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d5022:	4628      	mov	r0, r5
   d5024:	2204      	movs	r2, #4
   d5026:	a902      	add	r1, sp, #8
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
   d5028:	3501      	adds	r5, #1
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d502a:	9402      	str	r4, [sp, #8]
   d502c:	f000 f96e 	bl	d530c <HAL_EEPROM_Put>
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
   d5030:	2d0a      	cmp	r5, #10
   d5032:	d1f4      	bne.n	d501e <setup+0x156>
   d5034:	e7d0      	b.n	d4fd8 <setup+0x110>
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
  {
    resetCount++;
    EEPROM.write(MEM_MAP::resetCountAddr, resetCount);                  // If so, store incremented number - watchdog must have done This
  }
  if (resetCount >=6) {                                                 // If we get to resetCount 4, we are resetting without entering the main loop
   d5036:	6823      	ldr	r3, [r4, #0]
   d5038:	2b05      	cmp	r3, #5
   d503a:	dd07      	ble.n	d504c <setup+0x184>
    EEPROM.write(MEM_MAP::resetCountAddr,4);                            // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
   d503c:	f001 ff3e 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d5040:	2104      	movs	r1, #4
   d5042:	2002      	movs	r0, #2
   d5044:	f7ff f846 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.19>
    fullModemReset();                                                   // This will reset the modem and the device will reboot
   d5048:	f7ff fa68 	bl	d451c <_Z14fullModemResetv>
  }

  // Load time variables
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);       // Load Time zone data from FRAM
   d504c:	f001 ff36 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d5050:	2003      	movs	r0, #3
   d5052:	f7ff f83d 	bl	d40d0 <_ZN11EEPROMClass4readEi.isra.18>
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
   d5056:	f100 030c 	add.w	r3, r0, #12
   d505a:	b2db      	uxtb	r3, r3
   d505c:	2b18      	cmp	r3, #24
   d505e:	bf9a      	itte	ls
   d5060:	b243      	sxtbls	r3, r0
   d5062:	ee00 3a10 	vmovls	s0, r3
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM
   d5066:	ed9f 0a4f 	vldrhi	s0, [pc, #316]	; d51a4 <setup+0x2dc>
  currentMinutePeriod = Time.minute(t);

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
   d506a:	4c4f      	ldr	r4, [pc, #316]	; (d51a8 <setup+0x2e0>)
    fullModemReset();                                                   // This will reset the modem and the device will reboot
  }

  // Load time variables
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);       // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
   d506c:	bf98      	it	ls
   d506e:	eeb8 0ac0 	vcvtls.f32.s32	s0, s0
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM
   d5072:	f001 fc53 	bl	d691c <_ZN9TimeClass4zoneEf>
  time_t t = EEPROM.read(MEM_MAP::currentCountsTimeAddr);
   d5076:	f001 ff21 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d507a:	2005      	movs	r0, #5
   d507c:	f7ff f828 	bl	d40d0 <_ZN11EEPROMClass4readEi.isra.18>
  currentMinutePeriod = Time.minute(t);
   d5080:	f001 fc44 	bl	d690c <_ZN9TimeClass6minuteEl>
   d5084:	4b49      	ldr	r3, [pc, #292]	; (d51ac <setup+0x2e4>)
   d5086:	7018      	strb	r0, [r3, #0]

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
   d5088:	f001 ff18 	bl	d6ebc <_Z21__fetch_global_EEPROMv>
   d508c:	2004      	movs	r0, #4
   d508e:	f7ff f81f 	bl	d40d0 <_ZN11EEPROMClass4readEi.isra.18>
   d5092:	4b47      	ldr	r3, [pc, #284]	; (d51b0 <setup+0x2e8>)
   d5094:	7018      	strb	r0, [r3, #0]
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
   d5096:	4b27      	ldr	r3, [pc, #156]	; (d5134 <setup+0x26c>)
   d5098:	f000 0201 	and.w	r2, r0, #1
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
   d509c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  time_t t = EEPROM.read(MEM_MAP::currentCountsTimeAddr);
  currentMinutePeriod = Time.minute(t);

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
   d50a0:	701a      	strb	r2, [r3, #0]
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
   d50a2:	7020      	strb	r0, [r4, #0]
  
  takeMeasurements();                                                   // For the benefit of monitoring the device
   d50a4:	f7ff f862 	bl	d416c <_Z16takeMeasurementsv>

  if (batteryVoltage <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
   d50a8:	4b42      	ldr	r3, [pc, #264]	; (d51b4 <setup+0x2ec>)
   d50aa:	ed93 7a00 	vldr	s14, [r3]
   d50ae:	4b42      	ldr	r3, [pc, #264]	; (d51b8 <setup+0x2f0>)
   d50b0:	edd3 7a00 	vldr	s15, [r3]
   d50b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d50b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d50bc:	d802      	bhi.n	d50c4 <setup+0x1fc>
   d50be:	2307      	movs	r3, #7
   d50c0:	703b      	strb	r3, [r7, #0]
   d50c2:	e008      	b.n	d50d6 <setup+0x20e>
  else if(!connectToParticle()) {
   d50c4:	f7ff f99e 	bl	d4404 <_Z17connectToParticlev>
   d50c8:	b928      	cbnz	r0, d50d6 <setup+0x20e>
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
   d50ca:	2301      	movs	r3, #1
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d50cc:	493b      	ldr	r1, [pc, #236]	; (d51bc <setup+0x2f4>)
  
  takeMeasurements();                                                   // For the benefit of monitoring the device

  if (batteryVoltage <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
   d50ce:	703b      	strb	r3, [r7, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d50d0:	4630      	mov	r0, r6
   d50d2:	f002 fc2d 	bl	d7930 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d50d6:	f000 faa7 	bl	d5628 <spark_cloud_flag_connected>
  }

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d50da:	b108      	cbz	r0, d50e0 <setup+0x218>
   d50dc:	7823      	ldrb	r3, [r4, #0]
   d50de:	b923      	cbnz	r3, d50ea <setup+0x222>
  state = IDLE_STATE;

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d50e0:	a804      	add	r0, sp, #16
   d50e2:	f001 fa94 	bl	d660e <_ZN6StringD1Ev>
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
}
   d50e6:	b039      	add	sp, #228	; 0xe4
   d50e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d50ea:	4b35      	ldr	r3, [pc, #212]	; (d51c0 <setup+0x2f8>)
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d50ec:	4935      	ldr	r1, [pc, #212]	; (d51c4 <setup+0x2fc>)
   d50ee:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d50f0:	2200      	movs	r2, #0
   d50f2:	f88d 2000 	strb.w	r2, [sp]
   d50f6:	a802      	add	r0, sp, #8
   d50f8:	4632      	mov	r2, r6
   d50fa:	f7fe ffed 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.45>
   d50fe:	a803      	add	r0, sp, #12
   d5100:	f7ff fa38 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5104:	e7ec      	b.n	d50e0 <setup+0x218>
   d5106:	bf00      	nop
   d5108:	000d8240 	.word	0x000d8240
   d510c:	2003e1f5 	.word	0x2003e1f5
   d5110:	000d4715 	.word	0x000d4715
   d5114:	2003e26c 	.word	0x2003e26c
   d5118:	000d8593 	.word	0x000d8593
   d511c:	2003e238 	.word	0x2003e238
   d5120:	000d859a 	.word	0x000d859a
   d5124:	2003e09c 	.word	0x2003e09c
   d5128:	000d85a5 	.word	0x000d85a5
   d512c:	2003e2f0 	.word	0x2003e2f0
   d5130:	000d85ad 	.word	0x000d85ad
   d5134:	2003e25c 	.word	0x2003e25c
   d5138:	000d85b8 	.word	0x000d85b8
   d513c:	2003e184 	.word	0x2003e184
   d5140:	000d85c5 	.word	0x000d85c5
   d5144:	2003e2e0 	.word	0x2003e2e0
   d5148:	000d85d1 	.word	0x000d85d1
   d514c:	2003e309 	.word	0x2003e309
   d5150:	000d85da 	.word	0x000d85da
   d5154:	2003e198 	.word	0x2003e198
   d5158:	000d85e3 	.word	0x000d85e3
   d515c:	2003e1c4 	.word	0x2003e1c4
   d5160:	000d85f1 	.word	0x000d85f1
   d5164:	2003e1e5 	.word	0x2003e1e5
   d5168:	000d85ff 	.word	0x000d85ff
   d516c:	2003e1fc 	.word	0x2003e1fc
   d5170:	000d860d 	.word	0x000d860d
   d5174:	2003e228 	.word	0x2003e228
   d5178:	000d861b 	.word	0x000d861b
   d517c:	2003e1ad 	.word	0x2003e1ad
   d5180:	000d8629 	.word	0x000d8629
   d5184:	000d40b5 	.word	0x000d40b5
   d5188:	000d8637 	.word	0x000d8637
   d518c:	000d4931 	.word	0x000d4931
   d5190:	000d8643 	.word	0x000d8643
   d5194:	000d47dd 	.word	0x000d47dd
   d5198:	000d8650 	.word	0x000d8650
   d519c:	000d4889 	.word	0x000d4889
   d51a0:	000d865d 	.word	0x000d865d
   d51a4:	00000000 	.word	0x00000000
   d51a8:	2003e1e4 	.word	0x2003e1e4
   d51ac:	2003e23c 	.word	0x2003e23c
   d51b0:	2003e300 	.word	0x2003e300
   d51b4:	2003e2dc 	.word	0x2003e2dc
   d51b8:	2003e0a4 	.word	0x2003e0a4
   d51bc:	000d8669 	.word	0x000d8669
   d51c0:	2003e1ac 	.word	0x2003e1ac
   d51c4:	000d867b 	.word	0x000d867b

000d51c8 <_GLOBAL__sub_I_SystemMode>:
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d51c8:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d51ca:	4b0d      	ldr	r3, [pc, #52]	; (d5200 <_GLOBAL__sub_I_SystemMode+0x38>)
   d51cc:	2400      	movs	r4, #0
   d51ce:	601c      	str	r4, [r3, #0]
   d51d0:	4b0c      	ldr	r3, [pc, #48]	; (d5204 <_GLOBAL__sub_I_SystemMode+0x3c>)
   d51d2:	2501      	movs	r5, #1
   d51d4:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d51d6:	f000 f8b1 	bl	d533c <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d51da:	4b0b      	ldr	r3, [pc, #44]	; (d5208 <_GLOBAL__sub_I_SystemMode+0x40>)
   d51dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d51e0:	701c      	strb	r4, [r3, #0]
   d51e2:	805c      	strh	r4, [r3, #2]
   d51e4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d51e6:	2002      	movs	r0, #2
   d51e8:	f000 f9a0 	bl	d552c <set_system_mode>

#define MEMORYMAPVERSION 1                          // Lets us know if we need to reinitialize the memory map

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d51ec:	4621      	mov	r1, r4
   d51ee:	4628      	mov	r0, r5
   d51f0:	f000 f9b4 	bl	d555c <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d51f4:	4629      	mov	r1, r5
   d51f6:	2004      	movs	r0, #4
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d51f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d51fc:	f000 b83e 	b.w	d527c <HAL_Feature_Set>
   d5200:	2003e250 	.word	0x2003e250
   d5204:	2003e1ac 	.word	0x2003e1ac
   d5208:	2003e1be 	.word	0x2003e1be

000d520c <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d520c:	b508      	push	{r3, lr}
   d520e:	4b02      	ldr	r3, [pc, #8]	; (d5218 <cellular_signal+0xc>)
   d5210:	681b      	ldr	r3, [r3, #0]
   d5212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5214:	9301      	str	r3, [sp, #4]
   d5216:	bd08      	pop	{r3, pc}
   d5218:	00030274 	.word	0x00030274

000d521c <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d521c:	b508      	push	{r3, lr}
   d521e:	4b02      	ldr	r3, [pc, #8]	; (d5228 <cellular_command+0xc>)
   d5220:	681b      	ldr	r3, [r3, #0]
   d5222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5224:	9301      	str	r3, [sp, #4]
   d5226:	bd08      	pop	{r3, pc}
   d5228:	00030274 	.word	0x00030274

000d522c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d522c:	b508      	push	{r3, lr}
   d522e:	4b02      	ldr	r3, [pc, #8]	; (d5238 <os_thread_is_current+0xc>)
   d5230:	681b      	ldr	r3, [r3, #0]
   d5232:	689b      	ldr	r3, [r3, #8]
   d5234:	9301      	str	r3, [sp, #4]
   d5236:	bd08      	pop	{r3, pc}
   d5238:	00030248 	.word	0x00030248

000d523c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d523c:	b508      	push	{r3, lr}
   d523e:	4b02      	ldr	r3, [pc, #8]	; (d5248 <os_thread_join+0xc>)
   d5240:	681b      	ldr	r3, [r3, #0]
   d5242:	691b      	ldr	r3, [r3, #16]
   d5244:	9301      	str	r3, [sp, #4]
   d5246:	bd08      	pop	{r3, pc}
   d5248:	00030248 	.word	0x00030248

000d524c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d524c:	b508      	push	{r3, lr}
   d524e:	4b02      	ldr	r3, [pc, #8]	; (d5258 <os_thread_cleanup+0xc>)
   d5250:	681b      	ldr	r3, [r3, #0]
   d5252:	695b      	ldr	r3, [r3, #20]
   d5254:	9301      	str	r3, [sp, #4]
   d5256:	bd08      	pop	{r3, pc}
   d5258:	00030248 	.word	0x00030248

000d525c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d525c:	b508      	push	{r3, lr}
   d525e:	4b02      	ldr	r3, [pc, #8]	; (d5268 <os_mutex_create+0xc>)
   d5260:	681b      	ldr	r3, [r3, #0]
   d5262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5264:	9301      	str	r3, [sp, #4]
   d5266:	bd08      	pop	{r3, pc}
   d5268:	00030248 	.word	0x00030248

000d526c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d526c:	b508      	push	{r3, lr}
   d526e:	4b02      	ldr	r3, [pc, #8]	; (d5278 <os_mutex_recursive_create+0xc>)
   d5270:	681b      	ldr	r3, [r3, #0]
   d5272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5274:	9301      	str	r3, [sp, #4]
   d5276:	bd08      	pop	{r3, pc}
   d5278:	00030248 	.word	0x00030248

000d527c <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d527c:	b508      	push	{r3, lr}
   d527e:	4b02      	ldr	r3, [pc, #8]	; (d5288 <HAL_Feature_Set+0xc>)
   d5280:	681b      	ldr	r3, [r3, #0]
   d5282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5284:	9301      	str	r3, [sp, #4]
   d5286:	bd08      	pop	{r3, pc}
   d5288:	00030234 	.word	0x00030234

000d528c <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d528c:	b508      	push	{r3, lr}
   d528e:	4b02      	ldr	r3, [pc, #8]	; (d5298 <HAL_Core_System_Reset_Ex+0xc>)
   d5290:	681b      	ldr	r3, [r3, #0]
   d5292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d5294:	9301      	str	r3, [sp, #4]
   d5296:	bd08      	pop	{r3, pc}
   d5298:	00030234 	.word	0x00030234

000d529c <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d529c:	b508      	push	{r3, lr}
   d529e:	4b02      	ldr	r3, [pc, #8]	; (d52a8 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d52a0:	681b      	ldr	r3, [r3, #0]
   d52a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d52a4:	9301      	str	r3, [sp, #4]
   d52a6:	bd08      	pop	{r3, pc}
   d52a8:	00030234 	.word	0x00030234

000d52ac <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d52ac:	b508      	push	{r3, lr}
   d52ae:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <HAL_RNG_GetRandomNumber+0xc>)
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	685b      	ldr	r3, [r3, #4]
   d52b4:	9301      	str	r3, [sp, #4]
   d52b6:	bd08      	pop	{r3, pc}
   d52b8:	00030218 	.word	0x00030218

000d52bc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d52bc:	b508      	push	{r3, lr}
   d52be:	4b02      	ldr	r3, [pc, #8]	; (d52c8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d52c0:	681b      	ldr	r3, [r3, #0]
   d52c2:	695b      	ldr	r3, [r3, #20]
   d52c4:	9301      	str	r3, [sp, #4]
   d52c6:	bd08      	pop	{r3, pc}
   d52c8:	00030218 	.word	0x00030218

000d52cc <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d52cc:	b508      	push	{r3, lr}
   d52ce:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <HAL_RTC_Get_UnixTime+0xc>)
   d52d0:	681b      	ldr	r3, [r3, #0]
   d52d2:	69db      	ldr	r3, [r3, #28]
   d52d4:	9301      	str	r3, [sp, #4]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	00030218 	.word	0x00030218

000d52dc <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d52dc:	b508      	push	{r3, lr}
   d52de:	4b02      	ldr	r3, [pc, #8]	; (d52e8 <HAL_EEPROM_Init+0xc>)
   d52e0:	681b      	ldr	r3, [r3, #0]
   d52e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d52e4:	9301      	str	r3, [sp, #4]
   d52e6:	bd08      	pop	{r3, pc}
   d52e8:	00030218 	.word	0x00030218

000d52ec <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b02      	ldr	r3, [pc, #8]	; (d52f8 <HAL_EEPROM_Read+0xc>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d52f4:	9301      	str	r3, [sp, #4]
   d52f6:	bd08      	pop	{r3, pc}
   d52f8:	00030218 	.word	0x00030218

000d52fc <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d52fc:	b508      	push	{r3, lr}
   d52fe:	4b02      	ldr	r3, [pc, #8]	; (d5308 <HAL_EEPROM_Write+0xc>)
   d5300:	681b      	ldr	r3, [r3, #0]
   d5302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5304:	9301      	str	r3, [sp, #4]
   d5306:	bd08      	pop	{r3, pc}
   d5308:	00030218 	.word	0x00030218

000d530c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <HAL_EEPROM_Put+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	00030218 	.word	0x00030218

000d531c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <HAL_RTC_Time_Is_Valid+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	00030218 	.word	0x00030218

000d532c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <hal_timer_millis+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	00030218 	.word	0x00030218

000d533c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b02      	ldr	r3, [pc, #8]	; (d5348 <HAL_Pin_Map+0xc>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	681b      	ldr	r3, [r3, #0]
   d5344:	9301      	str	r3, [sp, #4]
   d5346:	bd08      	pop	{r3, pc}
   d5348:	0003022c 	.word	0x0003022c

000d534c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d534c:	b508      	push	{r3, lr}
   d534e:	4b02      	ldr	r3, [pc, #8]	; (d5358 <HAL_Pin_Mode+0xc>)
   d5350:	681b      	ldr	r3, [r3, #0]
   d5352:	689b      	ldr	r3, [r3, #8]
   d5354:	9301      	str	r3, [sp, #4]
   d5356:	bd08      	pop	{r3, pc}
   d5358:	0003022c 	.word	0x0003022c

000d535c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d535c:	b508      	push	{r3, lr}
   d535e:	4b02      	ldr	r3, [pc, #8]	; (d5368 <HAL_Get_Pin_Mode+0xc>)
   d5360:	681b      	ldr	r3, [r3, #0]
   d5362:	68db      	ldr	r3, [r3, #12]
   d5364:	9301      	str	r3, [sp, #4]
   d5366:	bd08      	pop	{r3, pc}
   d5368:	0003022c 	.word	0x0003022c

000d536c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d536c:	b508      	push	{r3, lr}
   d536e:	4b02      	ldr	r3, [pc, #8]	; (d5378 <HAL_GPIO_Write+0xc>)
   d5370:	681b      	ldr	r3, [r3, #0]
   d5372:	691b      	ldr	r3, [r3, #16]
   d5374:	9301      	str	r3, [sp, #4]
   d5376:	bd08      	pop	{r3, pc}
   d5378:	0003022c 	.word	0x0003022c

000d537c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d537c:	b508      	push	{r3, lr}
   d537e:	4b02      	ldr	r3, [pc, #8]	; (d5388 <HAL_I2C_Write_Data+0xc>)
   d5380:	681b      	ldr	r3, [r3, #0]
   d5382:	6a1b      	ldr	r3, [r3, #32]
   d5384:	9301      	str	r3, [sp, #4]
   d5386:	bd08      	pop	{r3, pc}
   d5388:	00030228 	.word	0x00030228

000d538c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b02      	ldr	r3, [pc, #8]	; (d5398 <HAL_I2C_Available_Data+0xc>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5394:	9301      	str	r3, [sp, #4]
   d5396:	bd08      	pop	{r3, pc}
   d5398:	00030228 	.word	0x00030228

000d539c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d539c:	b508      	push	{r3, lr}
   d539e:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <HAL_I2C_Read_Data+0xc>)
   d53a0:	681b      	ldr	r3, [r3, #0]
   d53a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d53a4:	9301      	str	r3, [sp, #4]
   d53a6:	bd08      	pop	{r3, pc}
   d53a8:	00030228 	.word	0x00030228

000d53ac <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <HAL_I2C_Peek_Data+0xc>)
   d53b0:	681b      	ldr	r3, [r3, #0]
   d53b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d53b4:	9301      	str	r3, [sp, #4]
   d53b6:	bd08      	pop	{r3, pc}
   d53b8:	00030228 	.word	0x00030228

000d53bc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d53bc:	b508      	push	{r3, lr}
   d53be:	4b02      	ldr	r3, [pc, #8]	; (d53c8 <HAL_I2C_Flush_Data+0xc>)
   d53c0:	681b      	ldr	r3, [r3, #0]
   d53c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53c4:	9301      	str	r3, [sp, #4]
   d53c6:	bd08      	pop	{r3, pc}
   d53c8:	00030228 	.word	0x00030228

000d53cc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <HAL_I2C_Is_Enabled+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	00030228 	.word	0x00030228

000d53dc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <HAL_I2C_Init+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	00030228 	.word	0x00030228

000d53ec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <inet_inet_ntop+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	695b      	ldr	r3, [r3, #20]
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	00030264 	.word	0x00030264

000d53fc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <netdb_freeaddrinfo+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	689b      	ldr	r3, [r3, #8]
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	00030268 	.word	0x00030268

000d540c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <netdb_getaddrinfo+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	68db      	ldr	r3, [r3, #12]
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	00030268 	.word	0x00030268

000d541c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <HAL_SPI_Init+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	69db      	ldr	r3, [r3, #28]
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	00030230 	.word	0x00030230

000d542c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d542c:	b508      	push	{r3, lr}
   d542e:	4b02      	ldr	r3, [pc, #8]	; (d5438 <HAL_SPI_Is_Enabled+0xc>)
   d5430:	681b      	ldr	r3, [r3, #0]
   d5432:	6a1b      	ldr	r3, [r3, #32]
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	bd08      	pop	{r3, pc}
   d5438:	00030230 	.word	0x00030230

000d543c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b02      	ldr	r3, [pc, #8]	; (d5448 <HAL_USART_Init+0xc>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	681b      	ldr	r3, [r3, #0]
   d5444:	9301      	str	r3, [sp, #4]
   d5446:	bd08      	pop	{r3, pc}
   d5448:	0003023c 	.word	0x0003023c

000d544c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d544c:	b508      	push	{r3, lr}
   d544e:	4b02      	ldr	r3, [pc, #8]	; (d5458 <HAL_USART_Write_Data+0xc>)
   d5450:	681b      	ldr	r3, [r3, #0]
   d5452:	68db      	ldr	r3, [r3, #12]
   d5454:	9301      	str	r3, [sp, #4]
   d5456:	bd08      	pop	{r3, pc}
   d5458:	0003023c 	.word	0x0003023c

000d545c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d545c:	b508      	push	{r3, lr}
   d545e:	4b02      	ldr	r3, [pc, #8]	; (d5468 <HAL_USART_Available_Data+0xc>)
   d5460:	681b      	ldr	r3, [r3, #0]
   d5462:	691b      	ldr	r3, [r3, #16]
   d5464:	9301      	str	r3, [sp, #4]
   d5466:	bd08      	pop	{r3, pc}
   d5468:	0003023c 	.word	0x0003023c

000d546c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d546c:	b508      	push	{r3, lr}
   d546e:	4b02      	ldr	r3, [pc, #8]	; (d5478 <HAL_USART_Read_Data+0xc>)
   d5470:	681b      	ldr	r3, [r3, #0]
   d5472:	695b      	ldr	r3, [r3, #20]
   d5474:	9301      	str	r3, [sp, #4]
   d5476:	bd08      	pop	{r3, pc}
   d5478:	0003023c 	.word	0x0003023c

000d547c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d547c:	b508      	push	{r3, lr}
   d547e:	4b02      	ldr	r3, [pc, #8]	; (d5488 <HAL_USART_Peek_Data+0xc>)
   d5480:	681b      	ldr	r3, [r3, #0]
   d5482:	699b      	ldr	r3, [r3, #24]
   d5484:	9301      	str	r3, [sp, #4]
   d5486:	bd08      	pop	{r3, pc}
   d5488:	0003023c 	.word	0x0003023c

000d548c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d548c:	b508      	push	{r3, lr}
   d548e:	4b02      	ldr	r3, [pc, #8]	; (d5498 <HAL_USART_Flush_Data+0xc>)
   d5490:	681b      	ldr	r3, [r3, #0]
   d5492:	69db      	ldr	r3, [r3, #28]
   d5494:	9301      	str	r3, [sp, #4]
   d5496:	bd08      	pop	{r3, pc}
   d5498:	0003023c 	.word	0x0003023c

000d549c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d549c:	b508      	push	{r3, lr}
   d549e:	4b02      	ldr	r3, [pc, #8]	; (d54a8 <HAL_USART_Is_Enabled+0xc>)
   d54a0:	681b      	ldr	r3, [r3, #0]
   d54a2:	6a1b      	ldr	r3, [r3, #32]
   d54a4:	9301      	str	r3, [sp, #4]
   d54a6:	bd08      	pop	{r3, pc}
   d54a8:	0003023c 	.word	0x0003023c

000d54ac <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <HAL_USART_Available_Data_For_Write+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	0003023c 	.word	0x0003023c

000d54bc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d54bc:	b508      	push	{r3, lr}
   d54be:	4b02      	ldr	r3, [pc, #8]	; (d54c8 <HAL_USB_USART_Init+0xc>)
   d54c0:	681b      	ldr	r3, [r3, #0]
   d54c2:	681b      	ldr	r3, [r3, #0]
   d54c4:	9301      	str	r3, [sp, #4]
   d54c6:	bd08      	pop	{r3, pc}
   d54c8:	0003024c 	.word	0x0003024c

000d54cc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d54cc:	b508      	push	{r3, lr}
   d54ce:	4b02      	ldr	r3, [pc, #8]	; (d54d8 <HAL_USB_USART_Available_Data+0xc>)
   d54d0:	681b      	ldr	r3, [r3, #0]
   d54d2:	691b      	ldr	r3, [r3, #16]
   d54d4:	9301      	str	r3, [sp, #4]
   d54d6:	bd08      	pop	{r3, pc}
   d54d8:	0003024c 	.word	0x0003024c

000d54dc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d54dc:	b508      	push	{r3, lr}
   d54de:	4b02      	ldr	r3, [pc, #8]	; (d54e8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d54e0:	681b      	ldr	r3, [r3, #0]
   d54e2:	695b      	ldr	r3, [r3, #20]
   d54e4:	9301      	str	r3, [sp, #4]
   d54e6:	bd08      	pop	{r3, pc}
   d54e8:	0003024c 	.word	0x0003024c

000d54ec <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d54ec:	b508      	push	{r3, lr}
   d54ee:	4b02      	ldr	r3, [pc, #8]	; (d54f8 <HAL_USB_USART_Receive_Data+0xc>)
   d54f0:	681b      	ldr	r3, [r3, #0]
   d54f2:	699b      	ldr	r3, [r3, #24]
   d54f4:	9301      	str	r3, [sp, #4]
   d54f6:	bd08      	pop	{r3, pc}
   d54f8:	0003024c 	.word	0x0003024c

000d54fc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d54fc:	b508      	push	{r3, lr}
   d54fe:	4b02      	ldr	r3, [pc, #8]	; (d5508 <HAL_USB_USART_Send_Data+0xc>)
   d5500:	681b      	ldr	r3, [r3, #0]
   d5502:	69db      	ldr	r3, [r3, #28]
   d5504:	9301      	str	r3, [sp, #4]
   d5506:	bd08      	pop	{r3, pc}
   d5508:	0003024c 	.word	0x0003024c

000d550c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d550c:	b508      	push	{r3, lr}
   d550e:	4b02      	ldr	r3, [pc, #8]	; (d5518 <HAL_USB_USART_Flush_Data+0xc>)
   d5510:	681b      	ldr	r3, [r3, #0]
   d5512:	6a1b      	ldr	r3, [r3, #32]
   d5514:	9301      	str	r3, [sp, #4]
   d5516:	bd08      	pop	{r3, pc}
   d5518:	0003024c 	.word	0x0003024c

000d551c <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d551c:	b508      	push	{r3, lr}
   d551e:	4b02      	ldr	r3, [pc, #8]	; (d5528 <system_mode+0xc>)
   d5520:	681b      	ldr	r3, [r3, #0]
   d5522:	681b      	ldr	r3, [r3, #0]
   d5524:	9301      	str	r3, [sp, #4]
   d5526:	bd08      	pop	{r3, pc}
   d5528:	00030220 	.word	0x00030220

000d552c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d552c:	b508      	push	{r3, lr}
   d552e:	4b02      	ldr	r3, [pc, #8]	; (d5538 <set_system_mode+0xc>)
   d5530:	681b      	ldr	r3, [r3, #0]
   d5532:	685b      	ldr	r3, [r3, #4]
   d5534:	9301      	str	r3, [sp, #4]
   d5536:	bd08      	pop	{r3, pc}
   d5538:	00030220 	.word	0x00030220

000d553c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d553c:	b508      	push	{r3, lr}
   d553e:	4b02      	ldr	r3, [pc, #8]	; (d5548 <system_delay_ms+0xc>)
   d5540:	681b      	ldr	r3, [r3, #0]
   d5542:	695b      	ldr	r3, [r3, #20]
   d5544:	9301      	str	r3, [sp, #4]
   d5546:	bd08      	pop	{r3, pc}
   d5548:	00030220 	.word	0x00030220

000d554c <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d554c:	b508      	push	{r3, lr}
   d554e:	4b02      	ldr	r3, [pc, #8]	; (d5558 <system_sleep+0xc>)
   d5550:	681b      	ldr	r3, [r3, #0]
   d5552:	699b      	ldr	r3, [r3, #24]
   d5554:	9301      	str	r3, [sp, #4]
   d5556:	bd08      	pop	{r3, pc}
   d5558:	00030220 	.word	0x00030220

000d555c <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d555c:	b508      	push	{r3, lr}
   d555e:	4b02      	ldr	r3, [pc, #8]	; (d5568 <system_thread_set_state+0xc>)
   d5560:	681b      	ldr	r3, [r3, #0]
   d5562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5564:	9301      	str	r3, [sp, #4]
   d5566:	bd08      	pop	{r3, pc}
   d5568:	00030220 	.word	0x00030220

000d556c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d556c:	b508      	push	{r3, lr}
   d556e:	4b02      	ldr	r3, [pc, #8]	; (d5578 <application_thread_current+0xc>)
   d5570:	681b      	ldr	r3, [r3, #0]
   d5572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5574:	9301      	str	r3, [sp, #4]
   d5576:	bd08      	pop	{r3, pc}
   d5578:	00030220 	.word	0x00030220

000d557c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d557c:	b508      	push	{r3, lr}
   d557e:	4b02      	ldr	r3, [pc, #8]	; (d5588 <application_thread_invoke+0xc>)
   d5580:	681b      	ldr	r3, [r3, #0]
   d5582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5584:	9301      	str	r3, [sp, #4]
   d5586:	bd08      	pop	{r3, pc}
   d5588:	00030220 	.word	0x00030220

000d558c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d558c:	b508      	push	{r3, lr}
   d558e:	4b02      	ldr	r3, [pc, #8]	; (d5598 <system_thread_get_state+0xc>)
   d5590:	681b      	ldr	r3, [r3, #0]
   d5592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5594:	9301      	str	r3, [sp, #4]
   d5596:	bd08      	pop	{r3, pc}
   d5598:	00030220 	.word	0x00030220

000d559c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d559c:	b508      	push	{r3, lr}
   d559e:	4b03      	ldr	r3, [pc, #12]	; (d55ac <system_ctrl_set_app_request_handler+0x10>)
   d55a0:	681b      	ldr	r3, [r3, #0]
   d55a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d55a6:	9301      	str	r3, [sp, #4]
   d55a8:	bd08      	pop	{r3, pc}
   d55aa:	0000      	.short	0x0000
   d55ac:	00030220 	.word	0x00030220

000d55b0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d55b0:	b508      	push	{r3, lr}
   d55b2:	4b03      	ldr	r3, [pc, #12]	; (d55c0 <system_ctrl_set_result+0x10>)
   d55b4:	681b      	ldr	r3, [r3, #0]
   d55b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d55ba:	9301      	str	r3, [sp, #4]
   d55bc:	bd08      	pop	{r3, pc}
   d55be:	0000      	.short	0x0000
   d55c0:	00030220 	.word	0x00030220

000d55c4 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d55c4:	b508      	push	{r3, lr}
   d55c6:	4b03      	ldr	r3, [pc, #12]	; (d55d4 <system_sleep_pins+0x10>)
   d55c8:	681b      	ldr	r3, [r3, #0]
   d55ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d55ce:	9301      	str	r3, [sp, #4]
   d55d0:	bd08      	pop	{r3, pc}
   d55d2:	0000      	.short	0x0000
   d55d4:	00030220 	.word	0x00030220

000d55d8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d55d8:	b508      	push	{r3, lr}
   d55da:	4b02      	ldr	r3, [pc, #8]	; (d55e4 <spark_variable+0xc>)
   d55dc:	681b      	ldr	r3, [r3, #0]
   d55de:	681b      	ldr	r3, [r3, #0]
   d55e0:	9301      	str	r3, [sp, #4]
   d55e2:	bd08      	pop	{r3, pc}
   d55e4:	00030244 	.word	0x00030244

000d55e8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d55e8:	b508      	push	{r3, lr}
   d55ea:	4b02      	ldr	r3, [pc, #8]	; (d55f4 <spark_function+0xc>)
   d55ec:	681b      	ldr	r3, [r3, #0]
   d55ee:	685b      	ldr	r3, [r3, #4]
   d55f0:	9301      	str	r3, [sp, #4]
   d55f2:	bd08      	pop	{r3, pc}
   d55f4:	00030244 	.word	0x00030244

000d55f8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d55f8:	b508      	push	{r3, lr}
   d55fa:	4b02      	ldr	r3, [pc, #8]	; (d5604 <spark_process+0xc>)
   d55fc:	681b      	ldr	r3, [r3, #0]
   d55fe:	689b      	ldr	r3, [r3, #8]
   d5600:	9301      	str	r3, [sp, #4]
   d5602:	bd08      	pop	{r3, pc}
   d5604:	00030244 	.word	0x00030244

000d5608 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d5608:	b508      	push	{r3, lr}
   d560a:	4b02      	ldr	r3, [pc, #8]	; (d5614 <spark_cloud_flag_connect+0xc>)
   d560c:	681b      	ldr	r3, [r3, #0]
   d560e:	68db      	ldr	r3, [r3, #12]
   d5610:	9301      	str	r3, [sp, #4]
   d5612:	bd08      	pop	{r3, pc}
   d5614:	00030244 	.word	0x00030244

000d5618 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d5618:	b508      	push	{r3, lr}
   d561a:	4b02      	ldr	r3, [pc, #8]	; (d5624 <spark_cloud_flag_disconnect+0xc>)
   d561c:	681b      	ldr	r3, [r3, #0]
   d561e:	691b      	ldr	r3, [r3, #16]
   d5620:	9301      	str	r3, [sp, #4]
   d5622:	bd08      	pop	{r3, pc}
   d5624:	00030244 	.word	0x00030244

000d5628 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5628:	b508      	push	{r3, lr}
   d562a:	4b02      	ldr	r3, [pc, #8]	; (d5634 <spark_cloud_flag_connected+0xc>)
   d562c:	681b      	ldr	r3, [r3, #0]
   d562e:	695b      	ldr	r3, [r3, #20]
   d5630:	9301      	str	r3, [sp, #4]
   d5632:	bd08      	pop	{r3, pc}
   d5634:	00030244 	.word	0x00030244

000d5638 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5638:	b508      	push	{r3, lr}
   d563a:	4b02      	ldr	r3, [pc, #8]	; (d5644 <spark_deviceID+0xc>)
   d563c:	681b      	ldr	r3, [r3, #0]
   d563e:	69db      	ldr	r3, [r3, #28]
   d5640:	9301      	str	r3, [sp, #4]
   d5642:	bd08      	pop	{r3, pc}
   d5644:	00030244 	.word	0x00030244

000d5648 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5648:	b508      	push	{r3, lr}
   d564a:	4b02      	ldr	r3, [pc, #8]	; (d5654 <spark_send_event+0xc>)
   d564c:	681b      	ldr	r3, [r3, #0]
   d564e:	6a1b      	ldr	r3, [r3, #32]
   d5650:	9301      	str	r3, [sp, #4]
   d5652:	bd08      	pop	{r3, pc}
   d5654:	00030244 	.word	0x00030244

000d5658 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d5658:	b508      	push	{r3, lr}
   d565a:	4b02      	ldr	r3, [pc, #8]	; (d5664 <spark_subscribe+0xc>)
   d565c:	681b      	ldr	r3, [r3, #0]
   d565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5660:	9301      	str	r3, [sp, #4]
   d5662:	bd08      	pop	{r3, pc}
   d5664:	00030244 	.word	0x00030244

000d5668 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5668:	b508      	push	{r3, lr}
   d566a:	4b02      	ldr	r3, [pc, #8]	; (d5674 <spark_sync_time+0xc>)
   d566c:	681b      	ldr	r3, [r3, #0]
   d566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5670:	9301      	str	r3, [sp, #4]
   d5672:	bd08      	pop	{r3, pc}
   d5674:	00030244 	.word	0x00030244

000d5678 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5678:	b508      	push	{r3, lr}
   d567a:	4b02      	ldr	r3, [pc, #8]	; (d5684 <spark_sync_time_pending+0xc>)
   d567c:	681b      	ldr	r3, [r3, #0]
   d567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5680:	9301      	str	r3, [sp, #4]
   d5682:	bd08      	pop	{r3, pc}
   d5684:	00030244 	.word	0x00030244

000d5688 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5688:	b508      	push	{r3, lr}
   d568a:	4b02      	ldr	r3, [pc, #8]	; (d5694 <spark_set_random_seed_from_cloud_handler+0xc>)
   d568c:	681b      	ldr	r3, [r3, #0]
   d568e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5690:	9301      	str	r3, [sp, #4]
   d5692:	bd08      	pop	{r3, pc}
   d5694:	00030244 	.word	0x00030244

000d5698 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5698:	b508      	push	{r3, lr}
   d569a:	4b02      	ldr	r3, [pc, #8]	; (d56a4 <network_connect+0xc>)
   d569c:	681b      	ldr	r3, [r3, #0]
   d569e:	685b      	ldr	r3, [r3, #4]
   d56a0:	9301      	str	r3, [sp, #4]
   d56a2:	bd08      	pop	{r3, pc}
   d56a4:	00030240 	.word	0x00030240

000d56a8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d56a8:	b508      	push	{r3, lr}
   d56aa:	4b02      	ldr	r3, [pc, #8]	; (d56b4 <network_connecting+0xc>)
   d56ac:	681b      	ldr	r3, [r3, #0]
   d56ae:	689b      	ldr	r3, [r3, #8]
   d56b0:	9301      	str	r3, [sp, #4]
   d56b2:	bd08      	pop	{r3, pc}
   d56b4:	00030240 	.word	0x00030240

000d56b8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d56b8:	b508      	push	{r3, lr}
   d56ba:	4b02      	ldr	r3, [pc, #8]	; (d56c4 <network_disconnect+0xc>)
   d56bc:	681b      	ldr	r3, [r3, #0]
   d56be:	68db      	ldr	r3, [r3, #12]
   d56c0:	9301      	str	r3, [sp, #4]
   d56c2:	bd08      	pop	{r3, pc}
   d56c4:	00030240 	.word	0x00030240

000d56c8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d56c8:	b508      	push	{r3, lr}
   d56ca:	4b02      	ldr	r3, [pc, #8]	; (d56d4 <network_ready+0xc>)
   d56cc:	681b      	ldr	r3, [r3, #0]
   d56ce:	691b      	ldr	r3, [r3, #16]
   d56d0:	9301      	str	r3, [sp, #4]
   d56d2:	bd08      	pop	{r3, pc}
   d56d4:	00030240 	.word	0x00030240

000d56d8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d56d8:	b508      	push	{r3, lr}
   d56da:	4b02      	ldr	r3, [pc, #8]	; (d56e4 <network_on+0xc>)
   d56dc:	681b      	ldr	r3, [r3, #0]
   d56de:	695b      	ldr	r3, [r3, #20]
   d56e0:	9301      	str	r3, [sp, #4]
   d56e2:	bd08      	pop	{r3, pc}
   d56e4:	00030240 	.word	0x00030240

000d56e8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d56e8:	b508      	push	{r3, lr}
   d56ea:	4b02      	ldr	r3, [pc, #8]	; (d56f4 <network_off+0xc>)
   d56ec:	681b      	ldr	r3, [r3, #0]
   d56ee:	699b      	ldr	r3, [r3, #24]
   d56f0:	9301      	str	r3, [sp, #4]
   d56f2:	bd08      	pop	{r3, pc}
   d56f4:	00030240 	.word	0x00030240

000d56f8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d56f8:	b508      	push	{r3, lr}
   d56fa:	4b02      	ldr	r3, [pc, #8]	; (d5704 <network_listen+0xc>)
   d56fc:	681b      	ldr	r3, [r3, #0]
   d56fe:	69db      	ldr	r3, [r3, #28]
   d5700:	9301      	str	r3, [sp, #4]
   d5702:	bd08      	pop	{r3, pc}
   d5704:	00030240 	.word	0x00030240

000d5708 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5708:	b508      	push	{r3, lr}
   d570a:	4b02      	ldr	r3, [pc, #8]	; (d5714 <network_listening+0xc>)
   d570c:	681b      	ldr	r3, [r3, #0]
   d570e:	6a1b      	ldr	r3, [r3, #32]
   d5710:	9301      	str	r3, [sp, #4]
   d5712:	bd08      	pop	{r3, pc}
   d5714:	00030240 	.word	0x00030240

000d5718 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5718:	b508      	push	{r3, lr}
   d571a:	4b02      	ldr	r3, [pc, #8]	; (d5724 <network_set_listen_timeout+0xc>)
   d571c:	681b      	ldr	r3, [r3, #0]
   d571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5720:	9301      	str	r3, [sp, #4]
   d5722:	bd08      	pop	{r3, pc}
   d5724:	00030240 	.word	0x00030240

000d5728 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5728:	b508      	push	{r3, lr}
   d572a:	4b02      	ldr	r3, [pc, #8]	; (d5734 <network_get_listen_timeout+0xc>)
   d572c:	681b      	ldr	r3, [r3, #0]
   d572e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5730:	9301      	str	r3, [sp, #4]
   d5732:	bd08      	pop	{r3, pc}
   d5734:	00030240 	.word	0x00030240

000d5738 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5738:	b508      	push	{r3, lr}
   d573a:	4b02      	ldr	r3, [pc, #8]	; (d5744 <malloc+0xc>)
   d573c:	681b      	ldr	r3, [r3, #0]
   d573e:	681b      	ldr	r3, [r3, #0]
   d5740:	9301      	str	r3, [sp, #4]
   d5742:	bd08      	pop	{r3, pc}
   d5744:	0003021c 	.word	0x0003021c

000d5748 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5748:	b508      	push	{r3, lr}
   d574a:	4b02      	ldr	r3, [pc, #8]	; (d5754 <free+0xc>)
   d574c:	681b      	ldr	r3, [r3, #0]
   d574e:	685b      	ldr	r3, [r3, #4]
   d5750:	9301      	str	r3, [sp, #4]
   d5752:	bd08      	pop	{r3, pc}
   d5754:	0003021c 	.word	0x0003021c

000d5758 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5758:	b508      	push	{r3, lr}
   d575a:	4b02      	ldr	r3, [pc, #8]	; (d5764 <realloc+0xc>)
   d575c:	681b      	ldr	r3, [r3, #0]
   d575e:	689b      	ldr	r3, [r3, #8]
   d5760:	9301      	str	r3, [sp, #4]
   d5762:	bd08      	pop	{r3, pc}
   d5764:	0003021c 	.word	0x0003021c

000d5768 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d5768:	b508      	push	{r3, lr}
   d576a:	4b02      	ldr	r3, [pc, #8]	; (d5774 <siprintf+0xc>)
   d576c:	681b      	ldr	r3, [r3, #0]
   d576e:	691b      	ldr	r3, [r3, #16]
   d5770:	9301      	str	r3, [sp, #4]
   d5772:	bd08      	pop	{r3, pc}
   d5774:	0003021c 	.word	0x0003021c

000d5778 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d5778:	b508      	push	{r3, lr}
   d577a:	4b02      	ldr	r3, [pc, #8]	; (d5784 <siscanf+0xc>)
   d577c:	681b      	ldr	r3, [r3, #0]
   d577e:	699b      	ldr	r3, [r3, #24]
   d5780:	9301      	str	r3, [sp, #4]
   d5782:	bd08      	pop	{r3, pc}
   d5784:	0003021c 	.word	0x0003021c

000d5788 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5788:	b508      	push	{r3, lr}
   d578a:	4b02      	ldr	r3, [pc, #8]	; (d5794 <snprintf+0xc>)
   d578c:	681b      	ldr	r3, [r3, #0]
   d578e:	69db      	ldr	r3, [r3, #28]
   d5790:	9301      	str	r3, [sp, #4]
   d5792:	bd08      	pop	{r3, pc}
   d5794:	0003021c 	.word	0x0003021c

000d5798 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5798:	b508      	push	{r3, lr}
   d579a:	4b02      	ldr	r3, [pc, #8]	; (d57a4 <abort+0xc>)
   d579c:	681b      	ldr	r3, [r3, #0]
   d579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d57a0:	9301      	str	r3, [sp, #4]
   d57a2:	bd08      	pop	{r3, pc}
   d57a4:	0003021c 	.word	0x0003021c

000d57a8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d57a8:	b508      	push	{r3, lr}
   d57aa:	4b02      	ldr	r3, [pc, #8]	; (d57b4 <_malloc_r+0xc>)
   d57ac:	681b      	ldr	r3, [r3, #0]
   d57ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d57b0:	9301      	str	r3, [sp, #4]
   d57b2:	bd08      	pop	{r3, pc}
   d57b4:	0003021c 	.word	0x0003021c

000d57b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d57b8:	2100      	movs	r1, #0
   d57ba:	f7ff bebf 	b.w	d553c <system_delay_ms>

000d57be <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d57be:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d57c0:	6883      	ldr	r3, [r0, #8]
   d57c2:	4604      	mov	r4, r0
   d57c4:	b90b      	cbnz	r3, d57ca <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d57c6:	f001 fbd6 	bl	d6f76 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d57ca:	68c3      	ldr	r3, [r0, #12]
   d57cc:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d57ce:	68a3      	ldr	r3, [r4, #8]
   d57d0:	b11b      	cbz	r3, d57da <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d57d2:	2203      	movs	r2, #3
   d57d4:	4621      	mov	r1, r4
   d57d6:	4620      	mov	r0, r4
   d57d8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d57da:	4620      	mov	r0, r4
   d57dc:	2110      	movs	r1, #16
}
   d57de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d57e2:	f001 bbc6 	b.w	d6f72 <_ZdlPvj>

000d57e6 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d57e6:	2200      	movs	r2, #0
   d57e8:	4611      	mov	r1, r2
   d57ea:	6840      	ldr	r0, [r0, #4]
   d57ec:	f7ff bf6c 	b.w	d56c8 <network_ready>

000d57f0 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d57f0:	2200      	movs	r2, #0
   d57f2:	4611      	mov	r1, r2
   d57f4:	6840      	ldr	r0, [r0, #4]
   d57f6:	f7ff bf87 	b.w	d5708 <network_listening>

000d57fa <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d57fa:	2200      	movs	r2, #0
   d57fc:	4611      	mov	r1, r2
   d57fe:	6840      	ldr	r0, [r0, #4]
   d5800:	f7ff bf92 	b.w	d5728 <network_get_listen_timeout>

000d5804 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5804:	2200      	movs	r2, #0
   d5806:	6840      	ldr	r0, [r0, #4]
   d5808:	f7ff bf86 	b.w	d5718 <network_set_listen_timeout>

000d580c <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d580c:	2200      	movs	r2, #0
   d580e:	f081 0101 	eor.w	r1, r1, #1
   d5812:	6840      	ldr	r0, [r0, #4]
   d5814:	f7ff bf70 	b.w	d56f8 <network_listen>

000d5818 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5818:	2300      	movs	r3, #0
   d581a:	461a      	mov	r2, r3
   d581c:	4619      	mov	r1, r3
   d581e:	6840      	ldr	r0, [r0, #4]
   d5820:	f7ff bf62 	b.w	d56e8 <network_off>

000d5824 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5824:	2300      	movs	r3, #0
   d5826:	461a      	mov	r2, r3
   d5828:	4619      	mov	r1, r3
   d582a:	6840      	ldr	r0, [r0, #4]
   d582c:	f7ff bf54 	b.w	d56d8 <network_on>

000d5830 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5830:	2200      	movs	r2, #0
   d5832:	4611      	mov	r1, r2
   d5834:	6840      	ldr	r0, [r0, #4]
   d5836:	f7ff bf37 	b.w	d56a8 <network_connecting>

000d583a <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d583a:	2200      	movs	r2, #0
   d583c:	2102      	movs	r1, #2
   d583e:	6840      	ldr	r0, [r0, #4]
   d5840:	f7ff bf3a 	b.w	d56b8 <network_disconnect>

000d5844 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5844:	2300      	movs	r3, #0
   d5846:	461a      	mov	r2, r3
   d5848:	6840      	ldr	r0, [r0, #4]
   d584a:	f7ff bf25 	b.w	d5698 <network_connect>
	...

000d5850 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d5850:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d5852:	4b1b      	ldr	r3, [pc, #108]	; (d58c0 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d5854:	6003      	str	r3, [r0, #0]
   d5856:	2500      	movs	r5, #0
   d5858:	460f      	mov	r7, r1
   d585a:	3328      	adds	r3, #40	; 0x28
   d585c:	2618      	movs	r6, #24
   d585e:	b089      	sub	sp, #36	; 0x24
   d5860:	6043      	str	r3, [r0, #4]
   d5862:	6085      	str	r5, [r0, #8]
   d5864:	60c5      	str	r5, [r0, #12]
   d5866:	4632      	mov	r2, r6
   d5868:	4629      	mov	r1, r5
   d586a:	4604      	mov	r4, r0
   d586c:	3010      	adds	r0, #16
   d586e:	f001 ffea 	bl	d7846 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d5872:	462a      	mov	r2, r5
   d5874:	4629      	mov	r1, r5
   d5876:	6878      	ldr	r0, [r7, #4]
   d5878:	f7ff ff26 	bl	d56c8 <network_ready>
   d587c:	b908      	cbnz	r0, d5882 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d587e:	60a0      	str	r0, [r4, #8]
            return sig;
   d5880:	e01b      	b.n	d58ba <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d5882:	4629      	mov	r1, r5
   d5884:	4632      	mov	r2, r6
   d5886:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d5888:	9500      	str	r5, [sp, #0]
   d588a:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d588c:	f001 ffdb 	bl	d7846 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5890:	a902      	add	r1, sp, #8
   d5892:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d5894:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5898:	f7ff fcb8 	bl	d520c <cellular_signal>
   d589c:	b110      	cbz	r0, d58a4 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d589e:	2301      	movs	r3, #1
   d58a0:	60a3      	str	r3, [r4, #8]
            return sig;
   d58a2:	e00a      	b.n	d58ba <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d58a4:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d58a6:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d58a8:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d58aa:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d58ac:	b90b      	cbnz	r3, d58b2 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d58ae:	2302      	movs	r3, #2
   d58b0:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d58b2:	a902      	add	r1, sp, #8
   d58b4:	4620      	mov	r0, r4
   d58b6:	f000 f8a9 	bl	d5a0c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d58ba:	4620      	mov	r0, r4
   d58bc:	b009      	add	sp, #36	; 0x24
   d58be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d58c0:	000d86f4 	.word	0x000d86f4

000d58c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d58c4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d58c6:	4c0c      	ldr	r4, [pc, #48]	; (d58f8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d58c8:	2528      	movs	r5, #40	; 0x28
   d58ca:	462a      	mov	r2, r5
   d58cc:	2100      	movs	r1, #0
   d58ce:	4620      	mov	r0, r4
   d58d0:	f001 ffb9 	bl	d7846 <memset>
        cid = -1;
   d58d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d58d8:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
   d58da:	8025      	strh	r5, [r4, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d58dc:	4c07      	ldr	r4, [pc, #28]	; (d58fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d58de:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d58e0:	4620      	mov	r0, r4
   d58e2:	6063      	str	r3, [r4, #4]
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d58e4:	252c      	movs	r5, #44	; 0x2c
   d58e6:	4b06      	ldr	r3, [pc, #24]	; (d5900 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d58e8:	f840 3b08 	str.w	r3, [r0], #8
   d58ec:	462a      	mov	r2, r5
   d58ee:	2100      	movs	r1, #0
   d58f0:	f001 ffa9 	bl	d7846 <memset>
        size = sizeof(*this);
   d58f4:	8125      	strh	r5, [r4, #8]
   d58f6:	bd38      	pop	{r3, r4, r5, pc}
   d58f8:	2003e350 	.word	0x2003e350
   d58fc:	2003e31c 	.word	0x2003e31c
   d5900:	000d86c0 	.word	0x000d86c0

000d5904 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5904:	4770      	bx	lr

000d5906 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d5906:	7d00      	ldrb	r0, [r0, #20]
   d5908:	4770      	bx	lr
	...

000d590c <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d590c:	7d03      	ldrb	r3, [r0, #20]
   d590e:	b11b      	cbz	r3, d5918 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d5910:	6983      	ldr	r3, [r0, #24]
   d5912:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5916:	d102      	bne.n	d591e <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d5918:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5930 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d591c:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d591e:	ee07 3a90 	vmov	s15, r3
   d5922:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5934 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d5926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d592a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d592e:	4770      	bx	lr
   d5930:	00000000 	.word	0x00000000
   d5934:	42c80000 	.word	0x42c80000

000d5938 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d5938:	7d03      	ldrb	r3, [r0, #20]
   d593a:	b11b      	cbz	r3, d5944 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d593c:	6a03      	ldr	r3, [r0, #32]
   d593e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5942:	d102      	bne.n	d594a <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d5944:	ed9f 0a05 	vldr	s0, [pc, #20]	; d595c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d5948:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d594a:	ee07 3a90 	vmov	s15, r3
   d594e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5960 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d5952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5956:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d595a:	4770      	bx	lr
   d595c:	00000000 	.word	0x00000000
   d5960:	42c80000 	.word	0x42c80000

000d5964 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
   d5964:	b570      	push	{r4, r5, r6, lr}
   d5966:	460d      	mov	r5, r1
   d5968:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d596a:	220a      	movs	r2, #10
   d596c:	6881      	ldr	r1, [r0, #8]
   d596e:	4628      	mov	r0, r5
   d5970:	f000 fe0c 	bl	d658c <_ZN5Print5printEii>
    n += p.print(',');
   d5974:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d5976:	4604      	mov	r4, r0
    n += p.print(',');
   d5978:	4628      	mov	r0, r5
   d597a:	f000 fd9d 	bl	d64b8 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d597e:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d5980:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d5982:	68f1      	ldr	r1, [r6, #12]
   d5984:	4628      	mov	r0, r5
   d5986:	f000 fe01 	bl	d658c <_ZN5Print5printEii>
    return n;
}
   d598a:	4420      	add	r0, r4
   d598c:	bd70      	pop	{r4, r5, r6, pc}

000d598e <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d598e:	f1a0 0004 	sub.w	r0, r0, #4
   d5992:	f7ff bfe7 	b.w	d5964 <_ZNK14CellularSignal7printToER5Print>

000d5996 <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5996:	b510      	push	{r4, lr}
   d5998:	2128      	movs	r1, #40	; 0x28
   d599a:	4604      	mov	r4, r0
   d599c:	f001 fae9 	bl	d6f72 <_ZdlPvj>
   d59a0:	4620      	mov	r0, r4
   d59a2:	bd10      	pop	{r4, pc}

000d59a4 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d59a4:	7d03      	ldrb	r3, [r0, #20]
   d59a6:	b17b      	cbz	r3, d59c8 <_ZNK14CellularSignal10getQualityEv+0x24>
   d59a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d59aa:	2b00      	cmp	r3, #0
   d59ac:	db0c      	blt.n	d59c8 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d59ae:	ee07 3a90 	vmov	s15, r3
   d59b2:	eddf 6a07 	vldr	s13, [pc, #28]	; d59d0 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d59b6:	ed9f 0a07 	vldr	s0, [pc, #28]	; d59d4 <_ZNK14CellularSignal10getQualityEv+0x30>
   d59ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d59be:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d59c2:	ee27 0a80 	vmul.f32	s0, s15, s0
   d59c6:	4770      	bx	lr
    }

    return -1.0f;
   d59c8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d59cc:	4770      	bx	lr
   d59ce:	bf00      	nop
   d59d0:	477fff00 	.word	0x477fff00
   d59d4:	42c80000 	.word	0x42c80000

000d59d8 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d59d8:	7d03      	ldrb	r3, [r0, #20]
   d59da:	b17b      	cbz	r3, d59fc <_ZNK14CellularSignal11getStrengthEv+0x24>
   d59dc:	69c3      	ldr	r3, [r0, #28]
   d59de:	2b00      	cmp	r3, #0
   d59e0:	db0c      	blt.n	d59fc <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d59e2:	ee07 3a90 	vmov	s15, r3
   d59e6:	eddf 6a07 	vldr	s13, [pc, #28]	; d5a04 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d59ea:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5a08 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d59ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d59f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d59f6:	ee27 0a80 	vmul.f32	s0, s15, s0
   d59fa:	4770      	bx	lr
    }

    return -1.0f;
   d59fc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d5a00:	4770      	bx	lr
   d5a02:	bf00      	nop
   d5a04:	477fff00 	.word	0x477fff00
   d5a08:	42c80000 	.word	0x42c80000

000d5a0c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d5a0c:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d5a0e:	460d      	mov	r5, r1
   d5a10:	f100 0410 	add.w	r4, r0, #16
   d5a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a18:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5a1c:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d5a20:	2001      	movs	r0, #1
   d5a22:	bd30      	pop	{r4, r5, pc}

000d5a24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5a24:	4770      	bx	lr

000d5a26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5a26:	2000      	movs	r0, #0
   d5a28:	4770      	bx	lr

000d5a2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5a2a:	b510      	push	{r4, lr}
   d5a2c:	2110      	movs	r1, #16
   d5a2e:	4604      	mov	r4, r0
   d5a30:	f001 fa9f 	bl	d6f72 <_ZdlPvj>
   d5a34:	4620      	mov	r0, r4
   d5a36:	bd10      	pop	{r4, pc}

000d5a38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5a38:	b508      	push	{r3, lr}
      { delete this; }
   d5a3a:	b108      	cbz	r0, d5a40 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5a3c:	f7ff fff5 	bl	d5a2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5a40:	bd08      	pop	{r3, pc}

000d5a42 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5a42:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5a44:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5a46:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5a48:	b113      	cbz	r3, d5a50 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5a4a:	2203      	movs	r2, #3
   d5a4c:	4601      	mov	r1, r0
   d5a4e:	4798      	blx	r3
    }
   d5a50:	4620      	mov	r0, r4
   d5a52:	bd10      	pop	{r4, pc}

000d5a54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5a54:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5a56:	68c4      	ldr	r4, [r0, #12]
   d5a58:	b1ec      	cbz	r4, d5a96 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5a5a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5a5c:	2b02      	cmp	r3, #2
   d5a5e:	d102      	bne.n	d5a66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5a60:	68e0      	ldr	r0, [r4, #12]
   d5a62:	f7ff fe71 	bl	d5748 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5a66:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5a68:	b135      	cbz	r5, d5a78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a6a:	4628      	mov	r0, r5
   d5a6c:	f7ff ffe9 	bl	d5a42 <_ZNSt14_Function_baseD1Ev>
   d5a70:	2110      	movs	r1, #16
   d5a72:	4628      	mov	r0, r5
   d5a74:	f001 fa7d 	bl	d6f72 <_ZdlPvj>
   d5a78:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5a7a:	b135      	cbz	r5, d5a8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d5a7c:	4628      	mov	r0, r5
   d5a7e:	f7ff ffe0 	bl	d5a42 <_ZNSt14_Function_baseD1Ev>
   d5a82:	2110      	movs	r1, #16
   d5a84:	4628      	mov	r0, r5
   d5a86:	f001 fa74 	bl	d6f72 <_ZdlPvj>
   d5a8a:	4620      	mov	r0, r4
   d5a8c:	2114      	movs	r1, #20
   d5a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5a92:	f001 ba6e 	b.w	d6f72 <_ZdlPvj>
   d5a96:	bd38      	pop	{r3, r4, r5, pc}

000d5a98 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d5a98:	b510      	push	{r4, lr}
   d5a9a:	b088      	sub	sp, #32
   d5a9c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5a9e:	4668      	mov	r0, sp
   d5aa0:	f000 fdfc 	bl	d669c <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d5aa4:	4669      	mov	r1, sp
   d5aa6:	a804      	add	r0, sp, #16
   d5aa8:	f000 fe1a 	bl	d66e0 <_ZN6StringC1ERKS_>
   d5aac:	a804      	add	r0, sp, #16
   d5aae:	47a0      	blx	r4
   d5ab0:	4604      	mov	r4, r0
   d5ab2:	a804      	add	r0, sp, #16
   d5ab4:	f000 fdab 	bl	d660e <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5ab8:	4668      	mov	r0, sp
   d5aba:	f000 fda8 	bl	d660e <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d5abe:	4620      	mov	r0, r4
   d5ac0:	b008      	add	sp, #32
   d5ac2:	bd10      	pop	{r4, pc}

000d5ac4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d5ac6:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5ac8:	b085      	sub	sp, #20
   d5aca:	4607      	mov	r7, r0
   d5acc:	460e      	mov	r6, r1
   d5ace:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d5ad0:	2100      	movs	r1, #0
   d5ad2:	4622      	mov	r2, r4
   d5ad4:	4668      	mov	r0, sp
   d5ad6:	f001 feb6 	bl	d7846 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5ada:	2200      	movs	r2, #0
   d5adc:	4669      	mov	r1, sp
   d5ade:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d5ae0:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d5ae4:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d5ae6:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d5ae8:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5aea:	f7ff fd7d 	bl	d55e8 <spark_function>
}
   d5aee:	b005      	add	sp, #20
   d5af0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5af2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5af2:	b513      	push	{r0, r1, r4, lr}
   d5af4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5af6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5afa:	2300      	movs	r3, #0
   d5afc:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5afe:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5b00:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5b02:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5b04:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5b06:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5b08:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5b0a:	f7fe fd33 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b0e:	4620      	mov	r0, r4
   d5b10:	b002      	add	sp, #8
   d5b12:	bd10      	pop	{r4, pc}

000d5b14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5b14:	680b      	ldr	r3, [r1, #0]
   d5b16:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5b18:	b113      	cbz	r3, d5b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5b1a:	685a      	ldr	r2, [r3, #4]
   d5b1c:	3201      	adds	r2, #1
   d5b1e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5b20:	4770      	bx	lr

000d5b22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b24:	460c      	mov	r4, r1
   d5b26:	ad02      	add	r5, sp, #8
   d5b28:	f854 3b04 	ldr.w	r3, [r4], #4
   d5b2c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5b30:	4606      	mov	r6, r0
   d5b32:	460f      	mov	r7, r1
   d5b34:	a801      	add	r0, sp, #4
   d5b36:	4621      	mov	r1, r4
   d5b38:	f7ff ffec 	bl	d5b14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5b3c:	4629      	mov	r1, r5
   d5b3e:	4630      	mov	r0, r6
   d5b40:	f7ff ffd7 	bl	d5af2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5b44:	a801      	add	r0, sp, #4
   d5b46:	f7fe fd15 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b4a:	4620      	mov	r0, r4
   d5b4c:	f7fe fd12 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5b50:	4638      	mov	r0, r7
   d5b52:	2108      	movs	r1, #8
   d5b54:	f001 fa0d 	bl	d6f72 <_ZdlPvj>
        return p;
    }
   d5b58:	4630      	mov	r0, r6
   d5b5a:	b003      	add	sp, #12
   d5b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b5e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5b5e:	b513      	push	{r0, r1, r4, lr}
   d5b60:	460b      	mov	r3, r1
   d5b62:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b64:	c803      	ldmia	r0, {r0, r1}
   d5b66:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5b6a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5b6e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5b72:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5b76:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5b7a:	b002      	add	sp, #8
   d5b7c:	bd10      	pop	{r4, pc}

000d5b7e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b7e:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5b80:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b82:	b90a      	cbnz	r2, d5b88 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5b84:	f001 f9f7 	bl	d6f76 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5b88:	68c3      	ldr	r3, [r0, #12]
    }
   d5b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5b8e:	4718      	bx	r3

000d5b90 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5b90:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5b92:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5b94:	f100 0110 	add.w	r1, r0, #16
   d5b98:	f7ff fff1 	bl	d5b7e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5b9c:	bd08      	pop	{r3, pc}

000d5b9e <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b9e:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5ba0:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5ba2:	b90a      	cbnz	r2, d5ba8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5ba4:	f001 f9e7 	bl	d6f76 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5ba8:	68c3      	ldr	r3, [r0, #12]
    }
   d5baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5bae:	4718      	bx	r3

000d5bb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5bb0:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5bb2:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5bb4:	f100 0110 	add.w	r1, r0, #16
   d5bb8:	f7ff fff1 	bl	d5b9e <_ZNKSt8functionIFvRKbEEclES1_>
   d5bbc:	bd08      	pop	{r3, pc}

000d5bbe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5bbe:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5bc0:	2300      	movs	r3, #0
   d5bc2:	6083      	str	r3, [r0, #8]
   d5bc4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5bc6:	4604      	mov	r4, r0
   d5bc8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5bca:	b12b      	cbz	r3, d5bd8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5bcc:	2202      	movs	r2, #2
   d5bce:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5bd0:	68eb      	ldr	r3, [r5, #12]
   d5bd2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5bd4:	68ab      	ldr	r3, [r5, #8]
   d5bd6:	60a3      	str	r3, [r4, #8]
	}
    }
   d5bd8:	4620      	mov	r0, r4
   d5bda:	bd38      	pop	{r3, r4, r5, pc}

000d5bdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d5be0:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5be4:	b086      	sub	sp, #24
   d5be6:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5be8:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5bec:	808b      	strh	r3, [r1, #4]
   d5bee:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5bf0:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5bf2:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d5bf6:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5bf8:	f04f 0002 	mov.w	r0, #2
   d5bfc:	e8d4 1f4f 	ldrexb	r1, [r4]
   d5c00:	4299      	cmp	r1, r3
   d5c02:	d103      	bne.n	d5c0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d5c04:	e8c4 0f45 	strexb	r5, r0, [r4]
   d5c08:	2d00      	cmp	r5, #0
   d5c0a:	d1f7      	bne.n	d5bfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5c0c:	d002      	beq.n	d5c14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d5c0e:	f88d 1000 	strb.w	r1, [sp]
   d5c12:	e06b      	b.n	d5cec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5c14:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5c18:	bf1e      	ittt	ne
   d5c1a:	60e7      	strne	r7, [r4, #12]
   d5c1c:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5c1e:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5c20:	2301      	movs	r3, #1
   d5c22:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5c26:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5c28:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5c2a:	f104 0308 	add.w	r3, r4, #8
   d5c2e:	f3bf 8f5f 	dmb	sy
   d5c32:	e853 6f00 	ldrex	r6, [r3]
   d5c36:	e843 0200 	strex	r2, r0, [r3]
   d5c3a:	2a00      	cmp	r2, #0
   d5c3c:	d1f9      	bne.n	d5c32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d5c3e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5c42:	2e00      	cmp	r6, #0
   d5c44:	d052      	beq.n	d5cec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5c46:	f7ff fc91 	bl	d556c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5c4a:	b120      	cbz	r0, d5c56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5c4c:	4629      	mov	r1, r5
   d5c4e:	4630      	mov	r0, r6
   d5c50:	f7ff ff95 	bl	d5b7e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5c54:	e043      	b.n	d5cde <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5c56:	4631      	mov	r1, r6
   d5c58:	4668      	mov	r0, sp
   d5c5a:	f7ff ffb0 	bl	d5bbe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5c5e:	68e0      	ldr	r0, [r4, #12]
   d5c60:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5c64:	b108      	cbz	r0, d5c6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d5c66:	f001 fe6b 	bl	d7940 <strdup>
   d5c6a:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5c6c:	2010      	movs	r0, #16
   d5c6e:	f8ad 5014 	strh.w	r5, [sp, #20]
   d5c72:	f7fe fa10 	bl	d4096 <_Znwj>
   d5c76:	4605      	mov	r5, r0
   d5c78:	b330      	cbz	r0, d5cc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c7a:	f04f 0800 	mov.w	r8, #0
   d5c7e:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5c82:	2018      	movs	r0, #24
   d5c84:	f7fe fa07 	bl	d4096 <_Znwj>
   d5c88:	4604      	mov	r4, r0
   d5c8a:	b1c0      	cbz	r0, d5cbe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c8c:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5c90:	4601      	mov	r1, r0
   d5c92:	4668      	mov	r0, sp
   d5c94:	f7ff ff63 	bl	d5b5e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c98:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5c9a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5c9c:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c9e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5ca0:	9202      	str	r2, [sp, #8]
   d5ca2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ca4:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5ca6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d5caa:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5cac:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5cb0:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5cb4:	9b04      	ldr	r3, [sp, #16]
   d5cb6:	9203      	str	r2, [sp, #12]
   d5cb8:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5cba:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5cbe:	4b0e      	ldr	r3, [pc, #56]	; (d5cf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d5cc0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5cc2:	4b0e      	ldr	r3, [pc, #56]	; (d5cfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5cc4:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5cc6:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5cc8:	9804      	ldr	r0, [sp, #16]
   d5cca:	f7ff fd3d 	bl	d5748 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5cce:	4668      	mov	r0, sp
   d5cd0:	f7ff feb7 	bl	d5a42 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5cd4:	2200      	movs	r2, #0
   d5cd6:	4629      	mov	r1, r5
   d5cd8:	4809      	ldr	r0, [pc, #36]	; (d5d00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d5cda:	f7ff fc4f 	bl	d557c <application_thread_invoke>
   d5cde:	4630      	mov	r0, r6
   d5ce0:	f7ff feaf 	bl	d5a42 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5ce4:	2110      	movs	r1, #16
   d5ce6:	4630      	mov	r0, r6
   d5ce8:	f001 f943 	bl	d6f72 <_ZdlPvj>
   d5cec:	4638      	mov	r0, r7
   d5cee:	f7ff fd2b 	bl	d5748 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d5cf2:	b006      	add	sp, #24
   d5cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5cf8:	000d5b91 	.word	0x000d5b91
   d5cfc:	000d5ded 	.word	0x000d5ded
   d5d00:	000d57bf 	.word	0x000d57bf

000d5d04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5d08:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5d0a:	ad07      	add	r5, sp, #28
   d5d0c:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5d10:	4606      	mov	r6, r0
   d5d12:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5d14:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5d16:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5d18:	460f      	mov	r7, r1
   d5d1a:	4690      	mov	r8, r2
   d5d1c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5d20:	f8c5 b004 	str.w	fp, [r5, #4]
   d5d24:	f8c5 b008 	str.w	fp, [r5, #8]
   d5d28:	9307      	str	r3, [sp, #28]
   d5d2a:	f7fe f9b4 	bl	d4096 <_Znwj>
   d5d2e:	4604      	mov	r4, r0
   d5d30:	b138      	cbz	r0, d5d42 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5d32:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5d36:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5d3a:	f8c0 b004 	str.w	fp, [r0, #4]
   d5d3e:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5d42:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5d44:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5d46:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5d48:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5d4a:	f7fe f9a4 	bl	d4096 <_Znwj>
   d5d4e:	b128      	cbz	r0, d5d5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5d50:	2301      	movs	r3, #1
   d5d52:	6043      	str	r3, [r0, #4]
   d5d54:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5d56:	4b23      	ldr	r3, [pc, #140]	; (d5de4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d5d58:	6003      	str	r3, [r0, #0]
   d5d5a:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5d5c:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5d5e:	4b22      	ldr	r3, [pc, #136]	; (d5de8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d5d60:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5d62:	2008      	movs	r0, #8
   d5d64:	f7fe f997 	bl	d4096 <_Znwj>
   d5d68:	4604      	mov	r4, r0
   d5d6a:	b128      	cbz	r0, d5d78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d6c:	9b03      	ldr	r3, [sp, #12]
   d5d6e:	f840 3b04 	str.w	r3, [r0], #4
   d5d72:	a904      	add	r1, sp, #16
   d5d74:	f7ff fece 	bl	d5b14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5d78:	9500      	str	r5, [sp, #0]
   d5d7a:	fa5f f38a 	uxtb.w	r3, sl
   d5d7e:	464a      	mov	r2, r9
   d5d80:	4641      	mov	r1, r8
   d5d82:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5d84:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5d86:	f7ff fc5f 	bl	d5648 <spark_send_event>
   d5d8a:	b9b8      	cbnz	r0, d5dbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5d8c:	9b03      	ldr	r3, [sp, #12]
   d5d8e:	785b      	ldrb	r3, [r3, #1]
   d5d90:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5d94:	b993      	cbnz	r3, d5dbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5d96:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5d9a:	a905      	add	r1, sp, #20
   d5d9c:	a803      	add	r0, sp, #12
   d5d9e:	9205      	str	r2, [sp, #20]
   d5da0:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5da4:	f7ff ff1a 	bl	d5bdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5da8:	9805      	ldr	r0, [sp, #20]
   d5daa:	f7ff fccd 	bl	d5748 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5dae:	a805      	add	r0, sp, #20
   d5db0:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5db2:	f7ff feb6 	bl	d5b22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5db6:	a806      	add	r0, sp, #24
   d5db8:	f7fe fbdc 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5dbc:	9b03      	ldr	r3, [sp, #12]
   d5dbe:	9305      	str	r3, [sp, #20]
   d5dc0:	a904      	add	r1, sp, #16
   d5dc2:	a806      	add	r0, sp, #24
   d5dc4:	f7ff fea6 	bl	d5b14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5dc8:	a905      	add	r1, sp, #20
   d5dca:	4630      	mov	r0, r6
   d5dcc:	f7ff fe91 	bl	d5af2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5dd0:	a806      	add	r0, sp, #24
   d5dd2:	f7fe fbcf 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5dd6:	a804      	add	r0, sp, #16
   d5dd8:	f7fe fbcc 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5ddc:	4630      	mov	r0, r6
   d5dde:	b00b      	add	sp, #44	; 0x2c
   d5de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5de4:	000d8728 	.word	0x000d8728
   d5de8:	000d5f59 	.word	0x000d5f59

000d5dec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5dec:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5df0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5df2:	d006      	beq.n	d5e02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5df4:	2a03      	cmp	r2, #3
   d5df6:	d017      	beq.n	d5e28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5df8:	2a01      	cmp	r2, #1
   d5dfa:	d121      	bne.n	d5e40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5dfc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5dfe:	6003      	str	r3, [r0, #0]
	      break;
   d5e00:	e01e      	b.n	d5e40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5e02:	2018      	movs	r0, #24
   d5e04:	680e      	ldr	r6, [r1, #0]
   d5e06:	f7fe f946 	bl	d4096 <_Znwj>
   d5e0a:	4605      	mov	r5, r0
   d5e0c:	b150      	cbz	r0, d5e24 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5e0e:	4631      	mov	r1, r6
   d5e10:	f7ff fed5 	bl	d5bbe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5e14:	6930      	ldr	r0, [r6, #16]
   d5e16:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5e1a:	b108      	cbz	r0, d5e20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5e1c:	f001 fd90 	bl	d7940 <strdup>
   d5e20:	6128      	str	r0, [r5, #16]
   d5e22:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5e24:	6025      	str	r5, [r4, #0]
   d5e26:	e00b      	b.n	d5e40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5e28:	6804      	ldr	r4, [r0, #0]
   d5e2a:	b14c      	cbz	r4, d5e40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5e2c:	6920      	ldr	r0, [r4, #16]
   d5e2e:	f7ff fc8b 	bl	d5748 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5e32:	4620      	mov	r0, r4
   d5e34:	f7ff fe05 	bl	d5a42 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5e38:	2118      	movs	r1, #24
   d5e3a:	4620      	mov	r0, r4
   d5e3c:	f001 f899 	bl	d6f72 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5e40:	2000      	movs	r0, #0
   d5e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e44 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5e44:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5e46:	2300      	movs	r3, #0
   d5e48:	6083      	str	r3, [r0, #8]
   d5e4a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5e4c:	4604      	mov	r4, r0
   d5e4e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5e50:	b12b      	cbz	r3, d5e5e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5e52:	2202      	movs	r2, #2
   d5e54:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5e56:	68eb      	ldr	r3, [r5, #12]
   d5e58:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5e5a:	68ab      	ldr	r3, [r5, #8]
   d5e5c:	60a3      	str	r3, [r4, #8]
	}
    }
   d5e5e:	4620      	mov	r0, r4
   d5e60:	bd38      	pop	{r3, r4, r5, pc}

000d5e62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5e62:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5e64:	b570      	push	{r4, r5, r6, lr}
   d5e66:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5e68:	d006      	beq.n	d5e78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5e6a:	2a03      	cmp	r2, #3
   d5e6c:	d011      	beq.n	d5e92 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5e6e:	2a01      	cmp	r2, #1
   d5e70:	d118      	bne.n	d5ea4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5e72:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5e74:	6003      	str	r3, [r0, #0]
	      break;
   d5e76:	e015      	b.n	d5ea4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5e78:	2014      	movs	r0, #20
   d5e7a:	680e      	ldr	r6, [r1, #0]
   d5e7c:	f7fe f90b 	bl	d4096 <_Znwj>
   d5e80:	4605      	mov	r5, r0
   d5e82:	b120      	cbz	r0, d5e8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5e84:	4631      	mov	r1, r6
   d5e86:	f7ff ffdd 	bl	d5e44 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5e8a:	7c33      	ldrb	r3, [r6, #16]
   d5e8c:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5e8e:	6025      	str	r5, [r4, #0]
   d5e90:	e008      	b.n	d5ea4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5e92:	6804      	ldr	r4, [r0, #0]
   d5e94:	b134      	cbz	r4, d5ea4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5e96:	4620      	mov	r0, r4
   d5e98:	f7ff fdd3 	bl	d5a42 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5e9c:	2114      	movs	r1, #20
   d5e9e:	4620      	mov	r0, r4
   d5ea0:	f001 f867 	bl	d6f72 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5ea4:	2000      	movs	r0, #0
   d5ea6:	bd70      	pop	{r4, r5, r6, pc}

000d5ea8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5ea8:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5eaa:	2300      	movs	r3, #0
   d5eac:	b087      	sub	sp, #28
   d5eae:	460c      	mov	r4, r1
   d5eb0:	f3bf 8f5f 	dmb	sy
   d5eb4:	e850 6f00 	ldrex	r6, [r0]
   d5eb8:	e840 3200 	strex	r2, r3, [r0]
   d5ebc:	2a00      	cmp	r2, #0
   d5ebe:	d1f9      	bne.n	d5eb4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5ec0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5ec4:	2e00      	cmp	r6, #0
   d5ec6:	d03f      	beq.n	d5f48 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5ec8:	4618      	mov	r0, r3
   d5eca:	f7ff fb4f 	bl	d556c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5ece:	4607      	mov	r7, r0
   d5ed0:	b120      	cbz	r0, d5edc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5ed2:	4621      	mov	r1, r4
   d5ed4:	4630      	mov	r0, r6
   d5ed6:	f7ff fe62 	bl	d5b9e <_ZNKSt8functionIFvRKbEEclES1_>
   d5eda:	e02e      	b.n	d5f3a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5edc:	4631      	mov	r1, r6
   d5ede:	a801      	add	r0, sp, #4
   d5ee0:	f7ff ffb0 	bl	d5e44 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5ee4:	7823      	ldrb	r3, [r4, #0]
   d5ee6:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5eea:	2010      	movs	r0, #16
   d5eec:	f7fe f8d3 	bl	d4096 <_Znwj>
   d5ef0:	4605      	mov	r5, r0
   d5ef2:	b1d0      	cbz	r0, d5f2a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5ef4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5ef6:	2014      	movs	r0, #20
   d5ef8:	f7fe f8cd 	bl	d4096 <_Znwj>
   d5efc:	4604      	mov	r4, r0
   d5efe:	b178      	cbz	r0, d5f20 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f00:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5f02:	4601      	mov	r1, r0
   d5f04:	a801      	add	r0, sp, #4
   d5f06:	f7ff fe2a 	bl	d5b5e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f0a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5f0c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f0e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f10:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5f12:	9203      	str	r2, [sp, #12]
   d5f14:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f16:	60e3      	str	r3, [r4, #12]
   d5f18:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5f1c:	9204      	str	r2, [sp, #16]
   d5f1e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5f20:	4b0a      	ldr	r3, [pc, #40]	; (d5f4c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5f22:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5f24:	4b0a      	ldr	r3, [pc, #40]	; (d5f50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5f26:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5f28:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5f2a:	a801      	add	r0, sp, #4
   d5f2c:	f7ff fd89 	bl	d5a42 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5f30:	2200      	movs	r2, #0
   d5f32:	4629      	mov	r1, r5
   d5f34:	4807      	ldr	r0, [pc, #28]	; (d5f54 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5f36:	f7ff fb21 	bl	d557c <application_thread_invoke>
   d5f3a:	4630      	mov	r0, r6
   d5f3c:	f7ff fd81 	bl	d5a42 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5f40:	2110      	movs	r1, #16
   d5f42:	4630      	mov	r0, r6
   d5f44:	f001 f815 	bl	d6f72 <_ZdlPvj>
        }
    }
   d5f48:	b007      	add	sp, #28
   d5f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5f4c:	000d5bb1 	.word	0x000d5bb1
   d5f50:	000d5e63 	.word	0x000d5e63
   d5f54:	000d57bf 	.word	0x000d57bf

000d5f58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5f58:	b530      	push	{r4, r5, lr}
   d5f5a:	b085      	sub	sp, #20
   d5f5c:	4604      	mov	r4, r0
   d5f5e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5f60:	4668      	mov	r0, sp
   d5f62:	4611      	mov	r1, r2
   d5f64:	f7ff fddd 	bl	d5b22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5f68:	b17c      	cbz	r4, d5f8a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5f6a:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5f6c:	4628      	mov	r0, r5
   d5f6e:	b10d      	cbz	r5, d5f74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5f70:	f001 fce6 	bl	d7940 <strdup>
   d5f74:	9002      	str	r0, [sp, #8]
   d5f76:	a902      	add	r1, sp, #8
   d5f78:	4668      	mov	r0, sp
   d5f7a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5f7e:	f7ff fe2d 	bl	d5bdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5f82:	9802      	ldr	r0, [sp, #8]
   d5f84:	f7ff fbe0 	bl	d5748 <free>
   d5f88:	e01d      	b.n	d5fc6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5f8a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5f8c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5f90:	f04f 0201 	mov.w	r2, #1
   d5f94:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5f98:	42a3      	cmp	r3, r4
   d5f9a:	d103      	bne.n	d5fa4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5f9c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5fa0:	2900      	cmp	r1, #0
   d5fa2:	d1f7      	bne.n	d5f94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5fa4:	d002      	beq.n	d5fac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5fa6:	f88d 3008 	strb.w	r3, [sp, #8]
   d5faa:	e00c      	b.n	d5fc6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5fac:	f110 010c 	adds.w	r1, r0, #12
   d5fb0:	f04f 0301 	mov.w	r3, #1
   d5fb4:	bf18      	it	ne
   d5fb6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5fb8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5fbc:	3004      	adds	r0, #4
   d5fbe:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5fc2:	f7ff ff71 	bl	d5ea8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5fc6:	a801      	add	r0, sp, #4
   d5fc8:	f7fe fad4 	bl	d4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5fcc:	b005      	add	sp, #20
   d5fce:	bd30      	pop	{r4, r5, pc}

000d5fd0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5fd0:	2200      	movs	r2, #0
   d5fd2:	4611      	mov	r1, r2
   d5fd4:	6840      	ldr	r0, [r0, #4]
   d5fd6:	f7ff bb97 	b.w	d5708 <network_listening>

000d5fda <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5fda:	2200      	movs	r2, #0
   d5fdc:	4611      	mov	r1, r2
   d5fde:	6840      	ldr	r0, [r0, #4]
   d5fe0:	f7ff bba2 	b.w	d5728 <network_get_listen_timeout>

000d5fe4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5fe4:	2200      	movs	r2, #0
   d5fe6:	6840      	ldr	r0, [r0, #4]
   d5fe8:	f7ff bb96 	b.w	d5718 <network_set_listen_timeout>

000d5fec <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5fec:	2200      	movs	r2, #0
   d5fee:	f081 0101 	eor.w	r1, r1, #1
   d5ff2:	6840      	ldr	r0, [r0, #4]
   d5ff4:	f7ff bb80 	b.w	d56f8 <network_listen>

000d5ff8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5ff8:	2300      	movs	r3, #0
   d5ffa:	461a      	mov	r2, r3
   d5ffc:	4619      	mov	r1, r3
   d5ffe:	6840      	ldr	r0, [r0, #4]
   d6000:	f7ff bb72 	b.w	d56e8 <network_off>

000d6004 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6004:	2300      	movs	r3, #0
   d6006:	461a      	mov	r2, r3
   d6008:	4619      	mov	r1, r3
   d600a:	6840      	ldr	r0, [r0, #4]
   d600c:	f7ff bb64 	b.w	d56d8 <network_on>

000d6010 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6010:	2200      	movs	r2, #0
   d6012:	4611      	mov	r1, r2
   d6014:	6840      	ldr	r0, [r0, #4]
   d6016:	f7ff bb57 	b.w	d56c8 <network_ready>

000d601a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d601a:	2200      	movs	r2, #0
   d601c:	4611      	mov	r1, r2
   d601e:	6840      	ldr	r0, [r0, #4]
   d6020:	f7ff bb42 	b.w	d56a8 <network_connecting>

000d6024 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6024:	2200      	movs	r2, #0
   d6026:	2102      	movs	r1, #2
   d6028:	6840      	ldr	r0, [r0, #4]
   d602a:	f7ff bb45 	b.w	d56b8 <network_disconnect>

000d602e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d602e:	2300      	movs	r3, #0
   d6030:	461a      	mov	r2, r3
   d6032:	6840      	ldr	r0, [r0, #4]
   d6034:	f7ff bb30 	b.w	d5698 <network_connect>

000d6038 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6038:	4b02      	ldr	r3, [pc, #8]	; (d6044 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d603a:	2203      	movs	r2, #3
   d603c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d603e:	4a02      	ldr	r2, [pc, #8]	; (d6048 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6040:	601a      	str	r2, [r3, #0]
   d6042:	4770      	bx	lr
   d6044:	2003e378 	.word	0x2003e378
   d6048:	000d8744 	.word	0x000d8744

000d604c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d604c:	4770      	bx	lr

000d604e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d604e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6050:	4606      	mov	r6, r0
   d6052:	4615      	mov	r5, r2
   d6054:	460c      	mov	r4, r1
   d6056:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6058:	42bc      	cmp	r4, r7
   d605a:	d006      	beq.n	d606a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d605c:	6833      	ldr	r3, [r6, #0]
   d605e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6062:	689b      	ldr	r3, [r3, #8]
   d6064:	4630      	mov	r0, r6
   d6066:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6068:	e7f6      	b.n	d6058 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d606a:	4628      	mov	r0, r5
   d606c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d606e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d606e:	2200      	movs	r2, #0
   d6070:	7c00      	ldrb	r0, [r0, #16]
   d6072:	f7ff b983 	b.w	d537c <HAL_I2C_Write_Data>

000d6076 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6076:	2100      	movs	r1, #0
   d6078:	7c00      	ldrb	r0, [r0, #16]
   d607a:	f7ff b987 	b.w	d538c <HAL_I2C_Available_Data>

000d607e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d607e:	2100      	movs	r1, #0
   d6080:	7c00      	ldrb	r0, [r0, #16]
   d6082:	f7ff b98b 	b.w	d539c <HAL_I2C_Read_Data>

000d6086 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6086:	2100      	movs	r1, #0
   d6088:	7c00      	ldrb	r0, [r0, #16]
   d608a:	f7ff b98f 	b.w	d53ac <HAL_I2C_Peek_Data>

000d608e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d608e:	2100      	movs	r1, #0
   d6090:	7c00      	ldrb	r0, [r0, #16]
   d6092:	f7ff b993 	b.w	d53bc <HAL_I2C_Flush_Data>

000d6096 <_ZN7TwoWireD0Ev>:
   d6096:	b510      	push	{r4, lr}
   d6098:	2114      	movs	r1, #20
   d609a:	4604      	mov	r4, r0
   d609c:	f000 ff69 	bl	d6f72 <_ZdlPvj>
   d60a0:	4620      	mov	r0, r4
   d60a2:	bd10      	pop	{r4, pc}

000d60a4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d60a4:	b510      	push	{r4, lr}
   d60a6:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d60a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d60ac:	4608      	mov	r0, r1
   d60ae:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d60b0:	2100      	movs	r1, #0
   d60b2:	4b04      	ldr	r3, [pc, #16]	; (d60c4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d60b4:	7420      	strb	r0, [r4, #16]
   d60b6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d60b8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d60ba:	f7ff f98f 	bl	d53dc <HAL_I2C_Init>

}
   d60be:	4620      	mov	r0, r4
   d60c0:	bd10      	pop	{r4, pc}
   d60c2:	bf00      	nop
   d60c4:	000d8778 	.word	0x000d8778

000d60c8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d60c8:	2100      	movs	r1, #0
   d60ca:	7c00      	ldrb	r0, [r0, #16]
   d60cc:	f7ff b97e 	b.w	d53cc <HAL_I2C_Is_Enabled>

000d60d0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d60d0:	4770      	bx	lr

000d60d2 <_ZN9IPAddressD0Ev>:
   d60d2:	b510      	push	{r4, lr}
   d60d4:	2118      	movs	r1, #24
   d60d6:	4604      	mov	r4, r0
   d60d8:	f000 ff4b 	bl	d6f72 <_ZdlPvj>
   d60dc:	4620      	mov	r0, r4
   d60de:	bd10      	pop	{r4, pc}

000d60e0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d60e0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d60e2:	7d03      	ldrb	r3, [r0, #20]
   d60e4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d60e6:	b08d      	sub	sp, #52	; 0x34
   d60e8:	460e      	mov	r6, r1
   d60ea:	f100 0704 	add.w	r7, r0, #4
   d60ee:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d60f2:	d002      	beq.n	d60fa <_ZNK9IPAddress7printToER5Print+0x1a>
   d60f4:	f100 0508 	add.w	r5, r0, #8
   d60f8:	e018      	b.n	d612c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d60fa:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d60fc:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d60fe:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6102:	232f      	movs	r3, #47	; 0x2f
   d6104:	462a      	mov	r2, r5
   d6106:	200a      	movs	r0, #10
   d6108:	f7ff f970 	bl	d53ec <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d610c:	4628      	mov	r0, r5
   d610e:	f001 fc32 	bl	d7976 <strlen>
   d6112:	6833      	ldr	r3, [r6, #0]
   d6114:	4602      	mov	r2, r0
   d6116:	68db      	ldr	r3, [r3, #12]
   d6118:	4629      	mov	r1, r5
   d611a:	4630      	mov	r0, r6
   d611c:	4798      	blx	r3
   d611e:	e00f      	b.n	d6140 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6120:	b124      	cbz	r4, d612c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6122:	212e      	movs	r1, #46	; 0x2e
   d6124:	4630      	mov	r0, r6
   d6126:	f000 f9c7 	bl	d64b8 <_ZN5Print5printEc>
   d612a:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d612c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6130:	220a      	movs	r2, #10
   d6132:	4630      	mov	r0, r6
   d6134:	f000 fa06 	bl	d6544 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6138:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d613a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d613c:	d1f0      	bne.n	d6120 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d613e:	4620      	mov	r0, r4
    }
    return n;
}
   d6140:	b00d      	add	sp, #52	; 0x34
   d6142:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6144 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6144:	b510      	push	{r4, lr}
   d6146:	4b05      	ldr	r3, [pc, #20]	; (d615c <_ZN9IPAddressC1Ev+0x18>)
   d6148:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d614a:	2211      	movs	r2, #17
   d614c:	f840 3b04 	str.w	r3, [r0], #4
   d6150:	2100      	movs	r1, #0
   d6152:	f001 fb78 	bl	d7846 <memset>
{
    clear();
}
   d6156:	4620      	mov	r0, r4
   d6158:	bd10      	pop	{r4, pc}
   d615a:	bf00      	nop
   d615c:	000d87a0 	.word	0x000d87a0

000d6160 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6160:	4603      	mov	r3, r0
   d6162:	4a07      	ldr	r2, [pc, #28]	; (d6180 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6164:	b510      	push	{r4, lr}
   d6166:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d616a:	f101 0210 	add.w	r2, r1, #16
   d616e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6172:	f843 4b04 	str.w	r4, [r3], #4
   d6176:	4291      	cmp	r1, r2
   d6178:	d1f9      	bne.n	d616e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d617a:	780a      	ldrb	r2, [r1, #0]
   d617c:	701a      	strb	r2, [r3, #0]
}
   d617e:	bd10      	pop	{r4, pc}
   d6180:	000d87a0 	.word	0x000d87a0

000d6184 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6184:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6186:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d618a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d618e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6192:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6196:	2304      	movs	r3, #4
   d6198:	6041      	str	r1, [r0, #4]
   d619a:	7503      	strb	r3, [r0, #20]
   d619c:	bd10      	pop	{r4, pc}

000d619e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d619e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d61a0:	780d      	ldrb	r5, [r1, #0]
   d61a2:	788b      	ldrb	r3, [r1, #2]
   d61a4:	784a      	ldrb	r2, [r1, #1]
   d61a6:	78c9      	ldrb	r1, [r1, #3]
   d61a8:	9100      	str	r1, [sp, #0]
   d61aa:	4629      	mov	r1, r5
   d61ac:	f7ff ffea 	bl	d6184 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d61b0:	b003      	add	sp, #12
   d61b2:	bd30      	pop	{r4, r5, pc}

000d61b4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d61b4:	4b01      	ldr	r3, [pc, #4]	; (d61bc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d61b6:	4a02      	ldr	r2, [pc, #8]	; (d61c0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d61b8:	601a      	str	r2, [r3, #0]
   d61ba:	4770      	bx	lr
   d61bc:	2003e380 	.word	0x2003e380
   d61c0:	000d885e 	.word	0x000d885e

000d61c4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d61c4:	2200      	movs	r2, #0
   d61c6:	4611      	mov	r1, r2
   d61c8:	6840      	ldr	r0, [r0, #4]
   d61ca:	f7ff ba9d 	b.w	d5708 <network_listening>

000d61ce <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d61ce:	2200      	movs	r2, #0
   d61d0:	4611      	mov	r1, r2
   d61d2:	6840      	ldr	r0, [r0, #4]
   d61d4:	f7ff baa8 	b.w	d5728 <network_get_listen_timeout>

000d61d8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d61d8:	2200      	movs	r2, #0
   d61da:	6840      	ldr	r0, [r0, #4]
   d61dc:	f7ff ba9c 	b.w	d5718 <network_set_listen_timeout>

000d61e0 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d61e0:	2200      	movs	r2, #0
   d61e2:	f081 0101 	eor.w	r1, r1, #1
   d61e6:	6840      	ldr	r0, [r0, #4]
   d61e8:	f7ff ba86 	b.w	d56f8 <network_listen>

000d61ec <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d61ec:	2300      	movs	r3, #0
   d61ee:	461a      	mov	r2, r3
   d61f0:	4619      	mov	r1, r3
   d61f2:	6840      	ldr	r0, [r0, #4]
   d61f4:	f7ff ba78 	b.w	d56e8 <network_off>

000d61f8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d61f8:	2300      	movs	r3, #0
   d61fa:	461a      	mov	r2, r3
   d61fc:	4619      	mov	r1, r3
   d61fe:	6840      	ldr	r0, [r0, #4]
   d6200:	f7ff ba6a 	b.w	d56d8 <network_on>

000d6204 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6204:	2200      	movs	r2, #0
   d6206:	4611      	mov	r1, r2
   d6208:	6840      	ldr	r0, [r0, #4]
   d620a:	f7ff ba5d 	b.w	d56c8 <network_ready>

000d620e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d620e:	2200      	movs	r2, #0
   d6210:	4611      	mov	r1, r2
   d6212:	6840      	ldr	r0, [r0, #4]
   d6214:	f7ff ba48 	b.w	d56a8 <network_connecting>

000d6218 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6218:	2200      	movs	r2, #0
   d621a:	2102      	movs	r1, #2
   d621c:	6840      	ldr	r0, [r0, #4]
   d621e:	f7ff ba4b 	b.w	d56b8 <network_disconnect>

000d6222 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6222:	2300      	movs	r3, #0
   d6224:	461a      	mov	r2, r3
   d6226:	6840      	ldr	r0, [r0, #4]
   d6228:	f7ff ba36 	b.w	d5698 <network_connect>

000d622c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d622c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d622e:	4605      	mov	r5, r0
   d6230:	b188      	cbz	r0, d6256 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6232:	6804      	ldr	r4, [r0, #0]
   d6234:	b14c      	cbz	r4, d624a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6236:	68a3      	ldr	r3, [r4, #8]
   d6238:	b11b      	cbz	r3, d6242 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d623a:	2203      	movs	r2, #3
   d623c:	4621      	mov	r1, r4
   d623e:	4620      	mov	r0, r4
   d6240:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6242:	2110      	movs	r1, #16
   d6244:	4620      	mov	r0, r4
   d6246:	f000 fe94 	bl	d6f72 <_ZdlPvj>
   d624a:	4628      	mov	r0, r5
   d624c:	2114      	movs	r1, #20
      }
   d624e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6252:	f000 be8e 	b.w	d6f72 <_ZdlPvj>
   d6256:	bd38      	pop	{r3, r4, r5, pc}

000d6258 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d6258:	b110      	cbz	r0, d6260 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d625a:	6803      	ldr	r3, [r0, #0]
   d625c:	685b      	ldr	r3, [r3, #4]
   d625e:	4718      	bx	r3
   d6260:	4770      	bx	lr

000d6262 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6262:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6264:	6803      	ldr	r3, [r0, #0]
   d6266:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6268:	b1bb      	cbz	r3, d629a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d626a:	6858      	ldr	r0, [r3, #4]
   d626c:	f7fe ffde 	bl	d522c <os_thread_is_current>
   d6270:	b978      	cbnz	r0, d6292 <_ZN6ThreadD1Ev+0x30>
   d6272:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6274:	7c5a      	ldrb	r2, [r3, #17]
   d6276:	b912      	cbnz	r2, d627e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6278:	6858      	ldr	r0, [r3, #4]
   d627a:	f7fe ffdf 	bl	d523c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d627e:	6823      	ldr	r3, [r4, #0]
   d6280:	6858      	ldr	r0, [r3, #4]
   d6282:	f7fe ffe3 	bl	d524c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6286:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6288:	2300      	movs	r3, #0
   d628a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d628c:	b128      	cbz	r0, d629a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d628e:	f7ff ffcd 	bl	d622c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6292:	6820      	ldr	r0, [r4, #0]
   d6294:	b108      	cbz	r0, d629a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6296:	f7ff ffc9 	bl	d622c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d629a:	4620      	mov	r0, r4
   d629c:	bd10      	pop	{r4, pc}
	...

000d62a0 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d62a0:	b538      	push	{r3, r4, r5, lr}
   d62a2:	4b0c      	ldr	r3, [pc, #48]	; (d62d4 <_ZN5spark9MeshClassD1Ev+0x34>)
   d62a4:	6003      	str	r3, [r0, #0]
   d62a6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62a8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d62ac:	b108      	cbz	r0, d62b2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d62ae:	f7fd fef6 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62b2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d62b6:	b135      	cbz	r5, d62c6 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d62b8:	4628      	mov	r0, r5
   d62ba:	f7ff ffd2 	bl	d6262 <_ZN6ThreadD1Ev>
   d62be:	2104      	movs	r1, #4
   d62c0:	4628      	mov	r0, r5
   d62c2:	f000 fe56 	bl	d6f72 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62c6:	68a0      	ldr	r0, [r4, #8]
   d62c8:	b108      	cbz	r0, d62ce <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d62ca:	f7ff ffc5 	bl	d6258 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d62ce:	4620      	mov	r0, r4
   d62d0:	bd38      	pop	{r3, r4, r5, pc}
   d62d2:	bf00      	nop
   d62d4:	000d8890 	.word	0x000d8890

000d62d8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d62d8:	b538      	push	{r3, r4, r5, lr}
   d62da:	4c0d      	ldr	r4, [pc, #52]	; (d6310 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d62dc:	4b0d      	ldr	r3, [pc, #52]	; (d6314 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d62de:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d62e0:	2500      	movs	r5, #0
   d62e2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d62e4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d62e8:	6063      	str	r3, [r4, #4]
   d62ea:	60a5      	str	r5, [r4, #8]
   d62ec:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d62f0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d62f4:	f7fe ffba 	bl	d526c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d62f8:	4b07      	ldr	r3, [pc, #28]	; (d6318 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d62fa:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d62fe:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6300:	4620      	mov	r0, r4
   d6302:	4a06      	ldr	r2, [pc, #24]	; (d631c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d6304:	4906      	ldr	r1, [pc, #24]	; (d6320 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d6306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d630a:	f000 be2d 	b.w	d6f68 <__aeabi_atexit>
   d630e:	bf00      	nop
   d6310:	2003e384 	.word	0x2003e384
   d6314:	000d88c4 	.word	0x000d88c4
   d6318:	000d8890 	.word	0x000d8890
   d631c:	2003e180 	.word	0x2003e180
   d6320:	000d62a1 	.word	0x000d62a1

000d6324 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6324:	2300      	movs	r3, #0
   d6326:	461a      	mov	r2, r3
   d6328:	6840      	ldr	r0, [r0, #4]
   d632a:	f7ff b9b5 	b.w	d5698 <network_connect>

000d632e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d632e:	2200      	movs	r2, #0
   d6330:	2102      	movs	r1, #2
   d6332:	6840      	ldr	r0, [r0, #4]
   d6334:	f7ff b9c0 	b.w	d56b8 <network_disconnect>

000d6338 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6338:	2200      	movs	r2, #0
   d633a:	4611      	mov	r1, r2
   d633c:	6840      	ldr	r0, [r0, #4]
   d633e:	f7ff b9b3 	b.w	d56a8 <network_connecting>

000d6342 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6342:	2200      	movs	r2, #0
   d6344:	4611      	mov	r1, r2
   d6346:	6840      	ldr	r0, [r0, #4]
   d6348:	f7ff b9be 	b.w	d56c8 <network_ready>

000d634c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d634c:	2300      	movs	r3, #0
   d634e:	461a      	mov	r2, r3
   d6350:	4619      	mov	r1, r3
   d6352:	6840      	ldr	r0, [r0, #4]
   d6354:	f7ff b9c0 	b.w	d56d8 <network_on>

000d6358 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6358:	2300      	movs	r3, #0
   d635a:	461a      	mov	r2, r3
   d635c:	4619      	mov	r1, r3
   d635e:	6840      	ldr	r0, [r0, #4]
   d6360:	f7ff b9c2 	b.w	d56e8 <network_off>

000d6364 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6364:	2200      	movs	r2, #0
   d6366:	f081 0101 	eor.w	r1, r1, #1
   d636a:	6840      	ldr	r0, [r0, #4]
   d636c:	f7ff b9c4 	b.w	d56f8 <network_listen>

000d6370 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6370:	2200      	movs	r2, #0
   d6372:	6840      	ldr	r0, [r0, #4]
   d6374:	f7ff b9d0 	b.w	d5718 <network_set_listen_timeout>

000d6378 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6378:	2200      	movs	r2, #0
   d637a:	4611      	mov	r1, r2
   d637c:	6840      	ldr	r0, [r0, #4]
   d637e:	f7ff b9d3 	b.w	d5728 <network_get_listen_timeout>

000d6382 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6382:	2200      	movs	r2, #0
   d6384:	4611      	mov	r1, r2
   d6386:	6840      	ldr	r0, [r0, #4]
   d6388:	f7ff b9be 	b.w	d5708 <network_listening>

000d638c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d638c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6390:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6392:	b095      	sub	sp, #84	; 0x54
   d6394:	4616      	mov	r6, r2
   d6396:	460d      	mov	r5, r1
   d6398:	4607      	mov	r7, r0
    IPAddress addr;
   d639a:	f7ff fed3 	bl	d6144 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d639e:	4621      	mov	r1, r4
   d63a0:	2220      	movs	r2, #32
   d63a2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d63a4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d63a6:	f001 fa4e 	bl	d7846 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d63aa:	2340      	movs	r3, #64	; 0x40
   d63ac:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d63ae:	4621      	mov	r1, r4
   d63b0:	466b      	mov	r3, sp
   d63b2:	aa0c      	add	r2, sp, #48	; 0x30
   d63b4:	4630      	mov	r0, r6
   d63b6:	f7ff f829 	bl	d540c <netdb_getaddrinfo>
    if (!r) {
   d63ba:	4604      	mov	r4, r0
   d63bc:	2800      	cmp	r0, #0
   d63be:	d144      	bne.n	d644a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d63c0:	4602      	mov	r2, r0
   d63c2:	2101      	movs	r1, #1
   d63c4:	6868      	ldr	r0, [r5, #4]
   d63c6:	f7ff f97f 	bl	d56c8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d63ca:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d63cc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d63ce:	4622      	mov	r2, r4
   d63d0:	6868      	ldr	r0, [r5, #4]
   d63d2:	f7ff f979 	bl	d56c8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d63d6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d63d8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d63da:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d63dc:	2e00      	cmp	r6, #0
   d63de:	d034      	beq.n	d644a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d63e0:	2900      	cmp	r1, #0
   d63e2:	d132      	bne.n	d644a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d63e4:	6873      	ldr	r3, [r6, #4]
   d63e6:	2b02      	cmp	r3, #2
   d63e8:	d002      	beq.n	d63f0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d63ea:	2b0a      	cmp	r3, #10
   d63ec:	d009      	beq.n	d6402 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d63ee:	e02a      	b.n	d6446 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d63f0:	f1b8 0f00 	cmp.w	r8, #0
   d63f4:	d027      	beq.n	d6446 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d63f6:	6971      	ldr	r1, [r6, #20]
   d63f8:	4638      	mov	r0, r7
   d63fa:	3104      	adds	r1, #4
   d63fc:	f7ff fecf 	bl	d619e <_ZN9IPAddressaSEPKh>
   d6400:	e020      	b.n	d6444 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6402:	f1b9 0f00 	cmp.w	r9, #0
   d6406:	d01e      	beq.n	d6446 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6408:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d640a:	2211      	movs	r2, #17
   d640c:	a801      	add	r0, sp, #4
   d640e:	f001 fa1a 	bl	d7846 <memset>
                    a.v = 6;
   d6412:	2306      	movs	r3, #6
   d6414:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6418:	ad01      	add	r5, sp, #4
   d641a:	f104 0308 	add.w	r3, r4, #8
   d641e:	3418      	adds	r4, #24
   d6420:	6818      	ldr	r0, [r3, #0]
   d6422:	6859      	ldr	r1, [r3, #4]
   d6424:	462a      	mov	r2, r5
   d6426:	c203      	stmia	r2!, {r0, r1}
   d6428:	3308      	adds	r3, #8
   d642a:	42a3      	cmp	r3, r4
   d642c:	4615      	mov	r5, r2
   d642e:	d1f7      	bne.n	d6420 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6430:	a901      	add	r1, sp, #4
   d6432:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6434:	ad07      	add	r5, sp, #28
   d6436:	f7ff fe93 	bl	d6160 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d643a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d643c:	1d3c      	adds	r4, r7, #4
   d643e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6440:	682b      	ldr	r3, [r5, #0]
   d6442:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6444:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6446:	69f6      	ldr	r6, [r6, #28]
   d6448:	e7c8      	b.n	d63dc <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d644a:	9800      	ldr	r0, [sp, #0]
   d644c:	f7fe ffd6 	bl	d53fc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6450:	4638      	mov	r0, r7
   d6452:	b015      	add	sp, #84	; 0x54
   d6454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6458 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6458:	4b02      	ldr	r3, [pc, #8]	; (d6464 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d645a:	4a03      	ldr	r2, [pc, #12]	; (d6468 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d645c:	601a      	str	r2, [r3, #0]
   d645e:	2200      	movs	r2, #0
   d6460:	605a      	str	r2, [r3, #4]
   d6462:	4770      	bx	lr
   d6464:	2003e554 	.word	0x2003e554
   d6468:	000d88c4 	.word	0x000d88c4

000d646c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d646c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d646e:	4606      	mov	r6, r0
   d6470:	460d      	mov	r5, r1
   d6472:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6474:	2400      	movs	r4, #0
  while (size--) {
   d6476:	42bd      	cmp	r5, r7
   d6478:	d00c      	beq.n	d6494 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d647a:	6833      	ldr	r3, [r6, #0]
   d647c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6480:	689b      	ldr	r3, [r3, #8]
   d6482:	4630      	mov	r0, r6
   d6484:	4798      	blx	r3
     if (chunk>=0)
   d6486:	2800      	cmp	r0, #0
   d6488:	db01      	blt.n	d648e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d648a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d648c:	e7f3      	b.n	d6476 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d648e:	2c00      	cmp	r4, #0
   d6490:	bf08      	it	eq
   d6492:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6494:	4620      	mov	r0, r4
   d6496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6498 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6498:	b570      	push	{r4, r5, r6, lr}
   d649a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d649c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d649e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d64a0:	b149      	cbz	r1, d64b6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d64a2:	f001 fa68 	bl	d7976 <strlen>
   d64a6:	682b      	ldr	r3, [r5, #0]
   d64a8:	4602      	mov	r2, r0
   d64aa:	4621      	mov	r1, r4
   d64ac:	4628      	mov	r0, r5
   d64ae:	68db      	ldr	r3, [r3, #12]
    }
   d64b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d64b4:	4718      	bx	r3
    }
   d64b6:	bd70      	pop	{r4, r5, r6, pc}

000d64b8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d64b8:	6803      	ldr	r3, [r0, #0]
   d64ba:	689b      	ldr	r3, [r3, #8]
   d64bc:	4718      	bx	r3

000d64be <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d64be:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d64c0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d64c2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d64c4:	f7ff fff8 	bl	d64b8 <_ZN5Print5printEc>
  n += print('\n');
   d64c8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d64ca:	4604      	mov	r4, r0
  n += print('\n');
   d64cc:	4628      	mov	r0, r5
   d64ce:	f7ff fff3 	bl	d64b8 <_ZN5Print5printEc>
  return n;
}
   d64d2:	4420      	add	r0, r4
   d64d4:	bd38      	pop	{r3, r4, r5, pc}

000d64d6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d64d6:	b538      	push	{r3, r4, r5, lr}
   d64d8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d64da:	f7ff ffdd 	bl	d6498 <_ZN5Print5writeEPKc>
   d64de:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d64e0:	4628      	mov	r0, r5
   d64e2:	f7ff ffec 	bl	d64be <_ZN5Print7printlnEv>
  return n;
}
   d64e6:	4420      	add	r0, r4
   d64e8:	bd38      	pop	{r3, r4, r5, pc}

000d64ea <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d64ea:	b530      	push	{r4, r5, lr}
   d64ec:	b08b      	sub	sp, #44	; 0x2c
   d64ee:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d64f0:	2100      	movs	r1, #0
   d64f2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d64f6:	2a01      	cmp	r2, #1
   d64f8:	bf98      	it	ls
   d64fa:	220a      	movls	r2, #10
   d64fc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6500:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6504:	fb05 3312 	mls	r3, r5, r2, r3
   d6508:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d650c:	2b09      	cmp	r3, #9
   d650e:	bf94      	ite	ls
   d6510:	3330      	addls	r3, #48	; 0x30
   d6512:	3337      	addhi	r3, #55	; 0x37
   d6514:	b2db      	uxtb	r3, r3
   d6516:	4621      	mov	r1, r4
   d6518:	f804 3901 	strb.w	r3, [r4], #-1
   d651c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d651e:	2d00      	cmp	r5, #0
   d6520:	d1ee      	bne.n	d6500 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6522:	f7ff ffb9 	bl	d6498 <_ZN5Print5writeEPKc>
}
   d6526:	b00b      	add	sp, #44	; 0x2c
   d6528:	bd30      	pop	{r4, r5, pc}

000d652a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d652a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d652c:	b92a      	cbnz	r2, d653a <_ZN5Print5printEmi+0x10>
   d652e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6530:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6534:	689b      	ldr	r3, [r3, #8]
   d6536:	b2c9      	uxtb	r1, r1
   d6538:	4718      	bx	r3
  else return printNumber(n, base);
   d653a:	b2d2      	uxtb	r2, r2
}
   d653c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6540:	f7ff bfd3 	b.w	d64ea <_ZN5Print11printNumberEmh>

000d6544 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6544:	f7ff bff1 	b.w	d652a <_ZN5Print5printEmi>

000d6548 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d6548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d654c:	4607      	mov	r7, r0
   d654e:	460e      	mov	r6, r1
  if (base == 0) {
   d6550:	4615      	mov	r5, r2
   d6552:	b92a      	cbnz	r2, d6560 <_ZN5Print5printEli+0x18>
    return write(n);
   d6554:	6803      	ldr	r3, [r0, #0]
   d6556:	b2c9      	uxtb	r1, r1
   d6558:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d655a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d655e:	4718      	bx	r3
  } else if (base == 10) {
   d6560:	2a0a      	cmp	r2, #10
   d6562:	d102      	bne.n	d656a <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d6564:	2900      	cmp	r1, #0
   d6566:	da01      	bge.n	d656c <_ZN5Print5printEli+0x24>
   d6568:	e004      	b.n	d6574 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d656a:	b2d2      	uxtb	r2, r2
  }
}
   d656c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6570:	f7ff bfbb 	b.w	d64ea <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6574:	212d      	movs	r1, #45	; 0x2d
   d6576:	f7ff ff9f 	bl	d64b8 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d657a:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d657c:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d657e:	4271      	negs	r1, r6
   d6580:	4638      	mov	r0, r7
   d6582:	f7ff ffb2 	bl	d64ea <_ZN5Print11printNumberEmh>
   d6586:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d658c <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d658c:	f7ff bfdc 	b.w	d6548 <_ZN5Print5printEli>

000d6590 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d6590:	b510      	push	{r4, lr}
  if (0 == max) {
   d6592:	4604      	mov	r4, r0
   d6594:	b130      	cbz	r0, d65a4 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d6596:	f001 f987 	bl	d78a8 <rand>
   d659a:	fb90 f3f4 	sdiv	r3, r0, r4
   d659e:	fb03 0014 	mls	r0, r3, r4, r0
   d65a2:	bd10      	pop	{r4, pc}
}
   d65a4:	bd10      	pop	{r4, pc}

000d65a6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d65a6:	b510      	push	{r4, lr}
   d65a8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d65aa:	f7ff fa4a 	bl	d5a42 <_ZNSt14_Function_baseD1Ev>
   d65ae:	4620      	mov	r0, r4
   d65b0:	bd10      	pop	{r4, pc}
	...

000d65b4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d65b4:	4803      	ldr	r0, [pc, #12]	; (d65c4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d65b6:	4a04      	ldr	r2, [pc, #16]	; (d65c8 <_GLOBAL__sub_I_RGB+0x14>)
   d65b8:	4904      	ldr	r1, [pc, #16]	; (d65cc <_GLOBAL__sub_I_RGB+0x18>)
   d65ba:	2300      	movs	r3, #0
   d65bc:	6083      	str	r3, [r0, #8]
   d65be:	f000 bcd3 	b.w	d6f68 <__aeabi_atexit>
   d65c2:	bf00      	nop
   d65c4:	2003e55c 	.word	0x2003e55c
   d65c8:	2003e180 	.word	0x2003e180
   d65cc:	000d65a7 	.word	0x000d65a7

000d65d0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d65d0:	4770      	bx	lr

000d65d2 <_ZN8SPIClassD0Ev>:
   d65d2:	b510      	push	{r4, lr}
   d65d4:	2110      	movs	r1, #16
   d65d6:	4604      	mov	r4, r0
   d65d8:	f000 fccb 	bl	d6f72 <_ZdlPvj>
   d65dc:	4620      	mov	r0, r4
   d65de:	bd10      	pop	{r4, pc}

000d65e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d65e0:	b570      	push	{r4, r5, r6, lr}
   d65e2:	4b08      	ldr	r3, [pc, #32]	; (d6604 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d65e4:	6003      	str	r3, [r0, #0]
   d65e6:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d65e8:	2500      	movs	r5, #0
   d65ea:	460e      	mov	r6, r1
   d65ec:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d65f0:	f7fe fe34 	bl	d525c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d65f4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d65f6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d65f8:	f7fe ff10 	bl	d541c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d65fc:	60a5      	str	r5, [r4, #8]
}
   d65fe:	4620      	mov	r0, r4
   d6600:	bd70      	pop	{r4, r5, r6, pc}
   d6602:	bf00      	nop
   d6604:	000d88f8 	.word	0x000d88f8

000d6608 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d6608:	7900      	ldrb	r0, [r0, #4]
   d660a:	f7fe bf0f 	b.w	d542c <HAL_SPI_Is_Enabled>

000d660e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d660e:	b510      	push	{r4, lr}
   d6610:	4604      	mov	r4, r0
{
	free(buffer);
   d6612:	6800      	ldr	r0, [r0, #0]
   d6614:	f7ff f898 	bl	d5748 <free>
}
   d6618:	4620      	mov	r0, r4
   d661a:	bd10      	pop	{r4, pc}

000d661c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d661c:	b510      	push	{r4, lr}
   d661e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6620:	6800      	ldr	r0, [r0, #0]
   d6622:	b108      	cbz	r0, d6628 <_ZN6String10invalidateEv+0xc>
   d6624:	f7ff f890 	bl	d5748 <free>
	buffer = NULL;
   d6628:	2300      	movs	r3, #0
   d662a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d662c:	60a3      	str	r3, [r4, #8]
   d662e:	6063      	str	r3, [r4, #4]
   d6630:	bd10      	pop	{r4, pc}

000d6632 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6632:	b538      	push	{r3, r4, r5, lr}
   d6634:	4604      	mov	r4, r0
   d6636:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6638:	6800      	ldr	r0, [r0, #0]
   d663a:	3101      	adds	r1, #1
   d663c:	f7ff f88c 	bl	d5758 <realloc>
	if (newbuffer) {
   d6640:	b110      	cbz	r0, d6648 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6642:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6646:	2001      	movs	r0, #1
	}
	return 0;
}
   d6648:	bd38      	pop	{r3, r4, r5, pc}

000d664a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d664a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d664c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d664e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6650:	b113      	cbz	r3, d6658 <_ZN6String7reserveEj+0xe>
   d6652:	6843      	ldr	r3, [r0, #4]
   d6654:	428b      	cmp	r3, r1
   d6656:	d207      	bcs.n	d6668 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6658:	4620      	mov	r0, r4
   d665a:	f7ff ffea 	bl	d6632 <_ZN6String12changeBufferEj>
   d665e:	b120      	cbz	r0, d666a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6660:	68a3      	ldr	r3, [r4, #8]
   d6662:	b90b      	cbnz	r3, d6668 <_ZN6String7reserveEj+0x1e>
   d6664:	6822      	ldr	r2, [r4, #0]
   d6666:	7013      	strb	r3, [r2, #0]
   d6668:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d666a:	bd10      	pop	{r4, pc}

000d666c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d666c:	b570      	push	{r4, r5, r6, lr}
   d666e:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6670:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6672:	4604      	mov	r4, r0
   d6674:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6676:	f7ff ffe8 	bl	d664a <_ZN6String7reserveEj>
   d667a:	b918      	cbnz	r0, d6684 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d667c:	4620      	mov	r0, r4
   d667e:	f7ff ffcd 	bl	d661c <_ZN6String10invalidateEv>
		return *this;
   d6682:	e009      	b.n	d6698 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6684:	462a      	mov	r2, r5
   d6686:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6688:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d668a:	6820      	ldr	r0, [r4, #0]
   d668c:	f001 f8d0 	bl	d7830 <memcpy>
	buffer[len] = 0;
   d6690:	6822      	ldr	r2, [r4, #0]
   d6692:	68a3      	ldr	r3, [r4, #8]
   d6694:	2100      	movs	r1, #0
   d6696:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6698:	4620      	mov	r0, r4
   d669a:	bd70      	pop	{r4, r5, r6, pc}

000d669c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d669c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d669e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d66a0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d66a2:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d66a4:	6043      	str	r3, [r0, #4]
	len = 0;
   d66a6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d66a8:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d66aa:	460d      	mov	r5, r1
   d66ac:	b139      	cbz	r1, d66be <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d66ae:	4608      	mov	r0, r1
   d66b0:	f001 f961 	bl	d7976 <strlen>
   d66b4:	4629      	mov	r1, r5
   d66b6:	4602      	mov	r2, r0
   d66b8:	4620      	mov	r0, r4
   d66ba:	f7ff ffd7 	bl	d666c <_ZN6String4copyEPKcj>
}
   d66be:	4620      	mov	r0, r4
   d66c0:	bd38      	pop	{r3, r4, r5, pc}

000d66c2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d66c2:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d66c4:	b510      	push	{r4, lr}
   d66c6:	460b      	mov	r3, r1
   d66c8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d66ca:	d007      	beq.n	d66dc <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d66cc:	6809      	ldr	r1, [r1, #0]
   d66ce:	b119      	cbz	r1, d66d8 <_ZN6StringaSERKS_+0x16>
   d66d0:	689a      	ldr	r2, [r3, #8]
   d66d2:	f7ff ffcb 	bl	d666c <_ZN6String4copyEPKcj>
   d66d6:	e001      	b.n	d66dc <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d66d8:	f7ff ffa0 	bl	d661c <_ZN6String10invalidateEv>

	return *this;
}
   d66dc:	4620      	mov	r0, r4
   d66de:	bd10      	pop	{r4, pc}

000d66e0 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d66e0:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d66e2:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d66e4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d66e6:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d66e8:	6043      	str	r3, [r0, #4]
	len = 0;
   d66ea:	6083      	str	r3, [r0, #8]
	flags = 0;
   d66ec:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d66ee:	f7ff ffe8 	bl	d66c2 <_ZN6StringaSERKS_>
}
   d66f2:	4620      	mov	r0, r4
   d66f4:	bd10      	pop	{r4, pc}

000d66f6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d66f6:	b538      	push	{r3, r4, r5, lr}
   d66f8:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d66fa:	460c      	mov	r4, r1
   d66fc:	b141      	cbz	r1, d6710 <_ZN6StringaSEPKc+0x1a>
   d66fe:	4608      	mov	r0, r1
   d6700:	f001 f939 	bl	d7976 <strlen>
   d6704:	4621      	mov	r1, r4
   d6706:	4602      	mov	r2, r0
   d6708:	4628      	mov	r0, r5
   d670a:	f7ff ffaf 	bl	d666c <_ZN6String4copyEPKcj>
   d670e:	e001      	b.n	d6714 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d6710:	f7ff ff84 	bl	d661c <_ZN6String10invalidateEv>

	return *this;
}
   d6714:	4628      	mov	r0, r5
   d6716:	bd38      	pop	{r3, r4, r5, pc}

000d6718 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d6718:	b510      	push	{r4, lr}
   d671a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d671c:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d671e:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6720:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d6722:	6063      	str	r3, [r4, #4]
	len = 0;
   d6724:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6726:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d6728:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d672a:	a901      	add	r1, sp, #4
   d672c:	f000 faf8 	bl	d6d20 <itoa>
	*this = buf;
   d6730:	a901      	add	r1, sp, #4
   d6732:	4620      	mov	r0, r4
   d6734:	f7ff ffdf 	bl	d66f6 <_ZN6StringaSEPKc>
}
   d6738:	4620      	mov	r0, r4
   d673a:	b00a      	add	sp, #40	; 0x28
   d673c:	bd10      	pop	{r4, pc}

000d673e <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d673e:	b510      	push	{r4, lr}
   d6740:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6742:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d6744:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6746:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d6748:	6063      	str	r3, [r4, #4]
	len = 0;
   d674a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d674c:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d674e:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
   d6750:	a901      	add	r1, sp, #4
   d6752:	f000 fa7e 	bl	d6c52 <ltoa>
	*this = buf;
   d6756:	a901      	add	r1, sp, #4
   d6758:	4620      	mov	r0, r4
   d675a:	f7ff ffcc 	bl	d66f6 <_ZN6StringaSEPKc>
}
   d675e:	4620      	mov	r0, r4
   d6760:	b00a      	add	sp, #40	; 0x28
   d6762:	bd10      	pop	{r4, pc}

000d6764 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6764:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6766:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6768:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d676a:	b912      	cbnz	r2, d6772 <_ZNK6String6equalsEPKc+0xe>
   d676c:	b919      	cbnz	r1, d6776 <_ZNK6String6equalsEPKc+0x12>
   d676e:	2001      	movs	r0, #1
   d6770:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6772:	b911      	cbnz	r1, d677a <_ZNK6String6equalsEPKc+0x16>
   d6774:	6803      	ldr	r3, [r0, #0]
   d6776:	7818      	ldrb	r0, [r3, #0]
   d6778:	e002      	b.n	d6780 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d677a:	6800      	ldr	r0, [r0, #0]
   d677c:	f001 f8ce 	bl	d791c <strcmp>
   d6780:	fab0 f080 	clz	r0, r0
   d6784:	0940      	lsrs	r0, r0, #5
}
   d6786:	bd08      	pop	{r3, pc}

000d6788 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d6788:	b570      	push	{r4, r5, r6, lr}
   d678a:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d678c:	b19a      	cbz	r2, d67b6 <_ZNK6String8getBytesEPhjj+0x2e>
   d678e:	b191      	cbz	r1, d67b6 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d6790:	6885      	ldr	r5, [r0, #8]
   d6792:	429d      	cmp	r5, r3
   d6794:	d802      	bhi.n	d679c <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d6796:	2300      	movs	r3, #0
   d6798:	700b      	strb	r3, [r1, #0]
		return;
   d679a:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d679c:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d679e:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d67a0:	6801      	ldr	r1, [r0, #0]
   d67a2:	42ac      	cmp	r4, r5
   d67a4:	bf28      	it	cs
   d67a6:	462c      	movcs	r4, r5
   d67a8:	4419      	add	r1, r3
   d67aa:	4622      	mov	r2, r4
   d67ac:	4630      	mov	r0, r6
   d67ae:	f001 f8ff 	bl	d79b0 <strncpy>
	buf[n] = 0;
   d67b2:	2300      	movs	r3, #0
   d67b4:	5533      	strb	r3, [r6, r4]
   d67b6:	bd70      	pop	{r4, r5, r6, pc}

000d67b8 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d67b8:	4601      	mov	r1, r0
   d67ba:	2200      	movs	r2, #0
   d67bc:	208c      	movs	r0, #140	; 0x8c
   d67be:	f7fe bd65 	b.w	d528c <HAL_Core_System_Reset_Ex>

000d67c2 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d67c2:	2000      	movs	r0, #0
   d67c4:	f7ff bff8 	b.w	d67b8 <_ZN11SystemClass5resetEm>

000d67c8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d67c8:	b510      	push	{r4, lr}
   d67ca:	4604      	mov	r4, r0
   d67cc:	4608      	mov	r0, r1
   d67ce:	4611      	mov	r1, r2
   d67d0:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d67d2:	2300      	movs	r3, #0
   d67d4:	f7fe feba 	bl	d554c <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   d67d8:	4b06      	ldr	r3, [pc, #24]	; (d67f4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   d67da:	2200      	movs	r2, #0
   d67dc:	701a      	strb	r2, [r3, #0]
   d67de:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d67e2:	8058      	strh	r0, [r3, #2]
   d67e4:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d67e6:	681a      	ldr	r2, [r3, #0]
   d67e8:	889b      	ldrh	r3, [r3, #4]
   d67ea:	6022      	str	r2, [r4, #0]
   d67ec:	80a3      	strh	r3, [r4, #4]
}
   d67ee:	4620      	mov	r0, r4
   d67f0:	bd10      	pop	{r4, pc}
   d67f2:	bf00      	nop
   d67f4:	2003e56c 	.word	0x2003e56c

000d67f8 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d67f8:	b510      	push	{r4, lr}
   d67fa:	2400      	movs	r4, #0
   d67fc:	7004      	strb	r4, [r0, #0]
   d67fe:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d6800:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d6802:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d6806:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d6808:	dd07      	ble.n	d681a <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d680a:	3901      	subs	r1, #1
   d680c:	4299      	cmp	r1, r3
   d680e:	d209      	bcs.n	d6824 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d6810:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d6814:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d6816:	2301      	movs	r3, #1
   d6818:	e001      	b.n	d681e <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d681a:	d102      	bne.n	d6822 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d681c:	2302      	movs	r3, #2
   d681e:	7003      	strb	r3, [r0, #0]
   d6820:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d6822:	8041      	strh	r1, [r0, #2]
    }
}
   d6824:	bd10      	pop	{r4, pc}
	...

000d6828 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d6828:	b570      	push	{r4, r5, r6, lr}
   d682a:	b086      	sub	sp, #24
   d682c:	4616      	mov	r6, r2
   d682e:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d6830:	2300      	movs	r3, #0
   d6832:	9302      	str	r3, [sp, #8]
   d6834:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d6836:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d6838:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d683a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d683c:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d683e:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d6840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6842:	4631      	mov	r1, r6
   d6844:	4628      	mov	r0, r5
   d6846:	f7fe febd 	bl	d55c4 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   d684a:	4633      	mov	r3, r6
   d684c:	462a      	mov	r2, r5
   d684e:	4601      	mov	r1, r0
   d6850:	a804      	add	r0, sp, #16
   d6852:	f7ff ffd1 	bl	d67f8 <_ZN11SleepResultC1EiPKtj>
   d6856:	4b06      	ldr	r3, [pc, #24]	; (d6870 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d6858:	9804      	ldr	r0, [sp, #16]
   d685a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   d685e:	6018      	str	r0, [r3, #0]
   d6860:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d6862:	681a      	ldr	r2, [r3, #0]
   d6864:	889b      	ldrh	r3, [r3, #4]
   d6866:	6022      	str	r2, [r4, #0]
}
   d6868:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   d686a:	80a3      	strh	r3, [r4, #4]
}
   d686c:	b006      	add	sp, #24
   d686e:	bd70      	pop	{r4, r5, r6, pc}
   d6870:	2003e56c 	.word	0x2003e56c

000d6874 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d6874:	4b04      	ldr	r3, [pc, #16]	; (d6888 <_GLOBAL__sub_I_System+0x14>)
   d6876:	2000      	movs	r0, #0
   d6878:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d687c:	7018      	strb	r0, [r3, #0]
   d687e:	8058      	strh	r0, [r3, #2]
   d6880:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6882:	f7fe be53 	b.w	d552c <set_system_mode>
   d6886:	bf00      	nop
   d6888:	2003e56c 	.word	0x2003e56c

000d688c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d688c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d688e:	4b14      	ldr	r3, [pc, #80]	; (d68e0 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d6890:	4f14      	ldr	r7, [pc, #80]	; (d68e4 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d6892:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d6894:	4b14      	ldr	r3, [pc, #80]	; (d68e8 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d6896:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d6898:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d689a:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d689c:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d689e:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d68a0:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d68a2:	d01b      	beq.n	d68dc <_ZL22Refresh_UnixTime_Cachel+0x50>
   d68a4:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d68a6:	ad01      	add	r5, sp, #4
   d68a8:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d68ac:	f000 feb4 	bl	d7618 <localtime>
	calendar_time->tm_year += 1900;
   d68b0:	6943      	ldr	r3, [r0, #20]
   d68b2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d68b6:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d68b8:	4604      	mov	r4, r0
   d68ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d68bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d68be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d68c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d68c2:	f8d4 e000 	ldr.w	lr, [r4]
   d68c6:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d68ca:	ad01      	add	r5, sp, #4
   d68cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d68ce:	4c07      	ldr	r4, [pc, #28]	; (d68ec <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d68d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d68d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d68d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d68d6:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d68d8:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d68dc:	b00b      	add	sp, #44	; 0x2c
   d68de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d68e0:	2003e5a4 	.word	0x2003e5a4
   d68e4:	2003e5a0 	.word	0x2003e5a0
   d68e8:	2003e59c 	.word	0x2003e59c
   d68ec:	2003e574 	.word	0x2003e574

000d68f0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d68f0:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d68f2:	2000      	movs	r0, #0
   d68f4:	f7fe fec0 	bl	d5678 <spark_sync_time_pending>
   d68f8:	b128      	cbz	r0, d6906 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d68fa:	f7fe fe95 	bl	d5628 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d68fe:	f080 0001 	eor.w	r0, r0, #1
   d6902:	b2c0      	uxtb	r0, r0
   d6904:	bd08      	pop	{r3, pc}
   d6906:	2001      	movs	r0, #1
    }
   d6908:	bd08      	pop	{r3, pc}
	...

000d690c <_ZN9TimeClass6minuteEl>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   d690c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d690e:	f7ff ffbd 	bl	d688c <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_min;
}
   d6912:	4b01      	ldr	r3, [pc, #4]	; (d6918 <_ZN9TimeClass6minuteEl+0xc>)
   d6914:	6858      	ldr	r0, [r3, #4]
   d6916:	bd08      	pop	{r3, pc}
   d6918:	2003e574 	.word	0x2003e574

000d691c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d691c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d6920:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d6924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6928:	d40f      	bmi.n	d694a <_ZN9TimeClass4zoneEf+0x2e>
   d692a:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d692e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d6932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6936:	dc08      	bgt.n	d694a <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d6938:	eddf 7a04 	vldr	s15, [pc, #16]	; d694c <_ZN9TimeClass4zoneEf+0x30>
   d693c:	4b04      	ldr	r3, [pc, #16]	; (d6950 <_ZN9TimeClass4zoneEf+0x34>)
   d693e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d6942:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d6946:	ed83 0a00 	vstr	s0, [r3]
   d694a:	4770      	bx	lr
   d694c:	45610000 	.word	0x45610000
   d6950:	2003e5a4 	.word	0x2003e5a4

000d6954 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d6954:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d6956:	4b0e      	ldr	r3, [pc, #56]	; (d6990 <_ZN9TimeClass7timeStrEl+0x3c>)
   d6958:	681b      	ldr	r3, [r3, #0]
   d695a:	4419      	add	r1, r3
   d695c:	4b0d      	ldr	r3, [pc, #52]	; (d6994 <_ZN9TimeClass7timeStrEl+0x40>)
   d695e:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d6960:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d6962:	a802      	add	r0, sp, #8
   d6964:	4419      	add	r1, r3
   d6966:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d696a:	f000 fe55 	bl	d7618 <localtime>
        char* ascstr = asctime(calendar_time);
   d696e:	f000 fe05 	bl	d757c <asctime>
   d6972:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d6974:	f000 ffff 	bl	d7976 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d6978:	4428      	add	r0, r5
   d697a:	2300      	movs	r3, #0
   d697c:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d6980:	4629      	mov	r1, r5
   d6982:	4620      	mov	r0, r4
   d6984:	f7ff fe8a 	bl	d669c <_ZN6StringC1EPK19__FlashStringHelper>
}
   d6988:	4620      	mov	r0, r4
   d698a:	b003      	add	sp, #12
   d698c:	bd30      	pop	{r4, r5, pc}
   d698e:	bf00      	nop
   d6990:	2003e5a4 	.word	0x2003e5a4
   d6994:	2003e59c 	.word	0x2003e59c

000d6998 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d6998:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d699a:	2000      	movs	r0, #0
   d699c:	f7fe fcbe 	bl	d531c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d69a0:	4604      	mov	r4, r0
   d69a2:	b968      	cbnz	r0, d69c0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d69a4:	f7fe fdba 	bl	d551c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d69a8:	2801      	cmp	r0, #1
   d69aa:	d10b      	bne.n	d69c4 <_ZN9TimeClass7isValidEv+0x2c>
   d69ac:	4620      	mov	r0, r4
   d69ae:	f7fe fded 	bl	d558c <system_thread_get_state>
   d69b2:	b938      	cbnz	r0, d69c4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d69b4:	f7ff ff9c 	bl	d68f0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d69b8:	b930      	cbnz	r0, d69c8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d69ba:	f7fe fe1d 	bl	d55f8 <spark_process>
   d69be:	e7f9      	b.n	d69b4 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d69c0:	2001      	movs	r0, #1
   d69c2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d69c4:	2000      	movs	r0, #0
   d69c6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d69c8:	f7ff ff92 	bl	d68f0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d69cc:	2000      	movs	r0, #0
   d69ce:	f7fe fca5 	bl	d531c <HAL_RTC_Time_Is_Valid>
   d69d2:	3000      	adds	r0, #0
   d69d4:	bf18      	it	ne
   d69d6:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d69d8:	bd10      	pop	{r4, pc}

000d69da <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d69da:	b508      	push	{r3, lr}
    (void)isValid();
   d69dc:	f7ff ffdc 	bl	d6998 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d69e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d69e4:	f7fe bc72 	b.w	d52cc <HAL_RTC_Get_UnixTime>

000d69e8 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d69e8:	b508      	push	{r3, lr}
	return hour(now());
   d69ea:	f7ff fff6 	bl	d69da <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d69ee:	f7ff ff4d 	bl	d688c <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d69f2:	4b01      	ldr	r3, [pc, #4]	; (d69f8 <_ZN9TimeClass4hourEv+0x10>)
   d69f4:	6898      	ldr	r0, [r3, #8]
   d69f6:	bd08      	pop	{r3, pc}
   d69f8:	2003e574 	.word	0x2003e574

000d69fc <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d69fc:	b508      	push	{r3, lr}
	return minute(now());
   d69fe:	f7ff ffec 	bl	d69da <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d6a02:	f7ff ff43 	bl	d688c <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d6a06:	4b01      	ldr	r3, [pc, #4]	; (d6a0c <_ZN9TimeClass6minuteEv+0x10>)
   d6a08:	6858      	ldr	r0, [r3, #4]
   d6a0a:	bd08      	pop	{r3, pc}
   d6a0c:	2003e574 	.word	0x2003e574

000d6a10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6a10:	4b02      	ldr	r3, [pc, #8]	; (d6a1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6a12:	681a      	ldr	r2, [r3, #0]
   d6a14:	4b02      	ldr	r3, [pc, #8]	; (d6a20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6a16:	601a      	str	r2, [r3, #0]
   d6a18:	4770      	bx	lr
   d6a1a:	bf00      	nop
   d6a1c:	2003e0c8 	.word	0x2003e0c8
   d6a20:	2003e598 	.word	0x2003e598

000d6a24 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6a24:	4770      	bx	lr

000d6a26 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6a26:	7441      	strb	r1, [r0, #17]
   d6a28:	4770      	bx	lr

000d6a2a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6a2a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6a2c:	7c00      	ldrb	r0, [r0, #16]
   d6a2e:	f7fe fd3d 	bl	d54ac <HAL_USART_Available_Data_For_Write>
}
   d6a32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a36:	bd08      	pop	{r3, pc}

000d6a38 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6a38:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6a3a:	7c00      	ldrb	r0, [r0, #16]
   d6a3c:	f7fe fd0e 	bl	d545c <HAL_USART_Available_Data>
}
   d6a40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a44:	bd08      	pop	{r3, pc}

000d6a46 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6a46:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6a48:	7c00      	ldrb	r0, [r0, #16]
   d6a4a:	f7fe fd17 	bl	d547c <HAL_USART_Peek_Data>
}
   d6a4e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6a52:	bf28      	it	cs
   d6a54:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6a58:	bd08      	pop	{r3, pc}

000d6a5a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6a5a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6a5c:	7c00      	ldrb	r0, [r0, #16]
   d6a5e:	f7fe fd05 	bl	d546c <HAL_USART_Read_Data>
}
   d6a62:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6a66:	bf28      	it	cs
   d6a68:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6a6c:	bd08      	pop	{r3, pc}

000d6a6e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6a6e:	7c00      	ldrb	r0, [r0, #16]
   d6a70:	f7fe bd0c 	b.w	d548c <HAL_USART_Flush_Data>

000d6a74 <_ZN11USARTSerialD0Ev>:
   d6a74:	b510      	push	{r4, lr}
   d6a76:	2114      	movs	r1, #20
   d6a78:	4604      	mov	r4, r0
   d6a7a:	f000 fa7a 	bl	d6f72 <_ZdlPvj>
   d6a7e:	4620      	mov	r0, r4
   d6a80:	bd10      	pop	{r4, pc}

000d6a82 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6a82:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6a84:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6a86:	4604      	mov	r4, r0
   d6a88:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6a8a:	b925      	cbnz	r5, d6a96 <_ZN11USARTSerial5writeEh+0x14>
   d6a8c:	7c00      	ldrb	r0, [r0, #16]
   d6a8e:	f7fe fd0d 	bl	d54ac <HAL_USART_Available_Data_For_Write>
   d6a92:	2800      	cmp	r0, #0
   d6a94:	dd05      	ble.n	d6aa2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6a96:	4631      	mov	r1, r6
   d6a98:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6a9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6a9e:	f7fe bcd5 	b.w	d544c <HAL_USART_Write_Data>
  }
  return 0;
}
   d6aa2:	4628      	mov	r0, r5
   d6aa4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6aa8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6aa8:	b510      	push	{r4, lr}
   d6aaa:	4604      	mov	r4, r0
   d6aac:	4608      	mov	r0, r1
   d6aae:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6ab0:	2200      	movs	r2, #0
   d6ab2:	6062      	str	r2, [r4, #4]
   d6ab4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6ab8:	60a2      	str	r2, [r4, #8]
   d6aba:	4a05      	ldr	r2, [pc, #20]	; (d6ad0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6abc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6abe:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6ac0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6ac2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6ac4:	461a      	mov	r2, r3
   d6ac6:	f7fe fcb9 	bl	d543c <HAL_USART_Init>
}
   d6aca:	4620      	mov	r0, r4
   d6acc:	bd10      	pop	{r4, pc}
   d6ace:	bf00      	nop
   d6ad0:	000d8930 	.word	0x000d8930

000d6ad4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6ad4:	7c00      	ldrb	r0, [r0, #16]
   d6ad6:	f7fe bce1 	b.w	d549c <HAL_USART_Is_Enabled>
	...

000d6adc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6adc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6ade:	4d0c      	ldr	r5, [pc, #48]	; (d6b10 <_Z22__fetch_global_Serial1v+0x34>)
   d6ae0:	6829      	ldr	r1, [r5, #0]
   d6ae2:	f011 0401 	ands.w	r4, r1, #1
   d6ae6:	d111      	bne.n	d6b0c <_Z22__fetch_global_Serial1v+0x30>
   d6ae8:	4628      	mov	r0, r5
   d6aea:	f7fd fada 	bl	d40a2 <__cxa_guard_acquire>
   d6aee:	b168      	cbz	r0, d6b0c <_Z22__fetch_global_Serial1v+0x30>
   d6af0:	4a08      	ldr	r2, [pc, #32]	; (d6b14 <_Z22__fetch_global_Serial1v+0x38>)
   d6af2:	4b09      	ldr	r3, [pc, #36]	; (d6b18 <_Z22__fetch_global_Serial1v+0x3c>)
   d6af4:	4809      	ldr	r0, [pc, #36]	; (d6b1c <_Z22__fetch_global_Serial1v+0x40>)
   d6af6:	4621      	mov	r1, r4
   d6af8:	f7ff ffd6 	bl	d6aa8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6afc:	4628      	mov	r0, r5
   d6afe:	f7fd fad5 	bl	d40ac <__cxa_guard_release>
   d6b02:	4a07      	ldr	r2, [pc, #28]	; (d6b20 <_Z22__fetch_global_Serial1v+0x44>)
   d6b04:	4907      	ldr	r1, [pc, #28]	; (d6b24 <_Z22__fetch_global_Serial1v+0x48>)
   d6b06:	4805      	ldr	r0, [pc, #20]	; (d6b1c <_Z22__fetch_global_Serial1v+0x40>)
   d6b08:	f000 fa2e 	bl	d6f68 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6b0c:	4803      	ldr	r0, [pc, #12]	; (d6b1c <_Z22__fetch_global_Serial1v+0x40>)
   d6b0e:	bd38      	pop	{r3, r4, r5, pc}
   d6b10:	2003e640 	.word	0x2003e640
   d6b14:	2003e644 	.word	0x2003e644
   d6b18:	2003e5bc 	.word	0x2003e5bc
   d6b1c:	2003e5a8 	.word	0x2003e5a8
   d6b20:	2003e180 	.word	0x2003e180
   d6b24:	000d6a25 	.word	0x000d6a25

000d6b28 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6b28:	7441      	strb	r1, [r0, #17]
   d6b2a:	4770      	bx	lr

000d6b2c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6b2c:	4770      	bx	lr

000d6b2e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6b2e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6b30:	2100      	movs	r1, #0
   d6b32:	7c00      	ldrb	r0, [r0, #16]
   d6b34:	f7fe fcda 	bl	d54ec <HAL_USB_USART_Receive_Data>
}
   d6b38:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b3c:	bf28      	it	cs
   d6b3e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6b42:	bd08      	pop	{r3, pc}

000d6b44 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6b44:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6b46:	2101      	movs	r1, #1
   d6b48:	7c00      	ldrb	r0, [r0, #16]
   d6b4a:	f7fe fccf 	bl	d54ec <HAL_USB_USART_Receive_Data>
}
   d6b4e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b52:	bf28      	it	cs
   d6b54:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6b58:	bd08      	pop	{r3, pc}

000d6b5a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6b5a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6b5c:	7c00      	ldrb	r0, [r0, #16]
   d6b5e:	f7fe fcbd 	bl	d54dc <HAL_USB_USART_Available_Data_For_Write>
}
   d6b62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b66:	bd08      	pop	{r3, pc}

000d6b68 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6b68:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6b6a:	7c00      	ldrb	r0, [r0, #16]
   d6b6c:	f7fe fcae 	bl	d54cc <HAL_USB_USART_Available_Data>
}
   d6b70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b74:	bd08      	pop	{r3, pc}

000d6b76 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6b76:	7c00      	ldrb	r0, [r0, #16]
   d6b78:	f7fe bcc8 	b.w	d550c <HAL_USB_USART_Flush_Data>

000d6b7c <_ZN9USBSerialD0Ev>:
   d6b7c:	b510      	push	{r4, lr}
   d6b7e:	2114      	movs	r1, #20
   d6b80:	4604      	mov	r4, r0
   d6b82:	f000 f9f6 	bl	d6f72 <_ZdlPvj>
   d6b86:	4620      	mov	r0, r4
   d6b88:	bd10      	pop	{r4, pc}

000d6b8a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6b8a:	b538      	push	{r3, r4, r5, lr}
   d6b8c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6b8e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6b90:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6b92:	f7fe fca3 	bl	d54dc <HAL_USB_USART_Available_Data_For_Write>
   d6b96:	2800      	cmp	r0, #0
   d6b98:	dc01      	bgt.n	d6b9e <_ZN9USBSerial5writeEh+0x14>
   d6b9a:	7c60      	ldrb	r0, [r4, #17]
   d6b9c:	b128      	cbz	r0, d6baa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6b9e:	4629      	mov	r1, r5
   d6ba0:	7c20      	ldrb	r0, [r4, #16]
   d6ba2:	f7fe fcab 	bl	d54fc <HAL_USB_USART_Send_Data>
   d6ba6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6baa:	bd38      	pop	{r3, r4, r5, pc}

000d6bac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6bac:	b510      	push	{r4, lr}
   d6bae:	4604      	mov	r4, r0
   d6bb0:	2300      	movs	r3, #0
   d6bb2:	6063      	str	r3, [r4, #4]
   d6bb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6bb8:	60a3      	str	r3, [r4, #8]
   d6bba:	4b05      	ldr	r3, [pc, #20]	; (d6bd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6bbc:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6bbe:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6bc0:	4608      	mov	r0, r1
{
  _serial = serial;
   d6bc2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6bc4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6bc6:	4611      	mov	r1, r2
   d6bc8:	f7fe fc78 	bl	d54bc <HAL_USB_USART_Init>
}
   d6bcc:	4620      	mov	r0, r4
   d6bce:	bd10      	pop	{r4, pc}
   d6bd0:	000d8960 	.word	0x000d8960

000d6bd4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6bd4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6bd6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6bd8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6bda:	2100      	movs	r1, #0
   d6bdc:	f000 fe33 	bl	d7846 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6be0:	4620      	mov	r0, r4
   d6be2:	bd10      	pop	{r4, pc}

000d6be4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6be4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6be6:	4d0e      	ldr	r5, [pc, #56]	; (d6c20 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6be8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6bea:	a801      	add	r0, sp, #4
   d6bec:	f7ff fff2 	bl	d6bd4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6bf0:	6829      	ldr	r1, [r5, #0]
   d6bf2:	f011 0401 	ands.w	r4, r1, #1
   d6bf6:	d110      	bne.n	d6c1a <_Z16_fetch_usbserialv+0x36>
   d6bf8:	4628      	mov	r0, r5
   d6bfa:	f7fd fa52 	bl	d40a2 <__cxa_guard_acquire>
   d6bfe:	b160      	cbz	r0, d6c1a <_Z16_fetch_usbserialv+0x36>
   d6c00:	aa01      	add	r2, sp, #4
   d6c02:	4621      	mov	r1, r4
   d6c04:	4807      	ldr	r0, [pc, #28]	; (d6c24 <_Z16_fetch_usbserialv+0x40>)
   d6c06:	f7ff ffd1 	bl	d6bac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6c0a:	4628      	mov	r0, r5
   d6c0c:	f7fd fa4e 	bl	d40ac <__cxa_guard_release>
   d6c10:	4a05      	ldr	r2, [pc, #20]	; (d6c28 <_Z16_fetch_usbserialv+0x44>)
   d6c12:	4906      	ldr	r1, [pc, #24]	; (d6c2c <_Z16_fetch_usbserialv+0x48>)
   d6c14:	4803      	ldr	r0, [pc, #12]	; (d6c24 <_Z16_fetch_usbserialv+0x40>)
   d6c16:	f000 f9a7 	bl	d6f68 <__aeabi_atexit>
	return _usbserial;
}
   d6c1a:	4802      	ldr	r0, [pc, #8]	; (d6c24 <_Z16_fetch_usbserialv+0x40>)
   d6c1c:	b007      	add	sp, #28
   d6c1e:	bd30      	pop	{r4, r5, pc}
   d6c20:	2003e6c8 	.word	0x2003e6c8
   d6c24:	2003e6cc 	.word	0x2003e6cc
   d6c28:	2003e180 	.word	0x2003e180
   d6c2c:	000d6b2d 	.word	0x000d6b2d

000d6c30 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6c30:	b510      	push	{r4, lr}
   d6c32:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6c34:	f000 fe9f 	bl	d7976 <strlen>
   d6c38:	3801      	subs	r0, #1
   d6c3a:	1823      	adds	r3, r4, r0
   d6c3c:	4620      	mov	r0, r4
	while(i<j){
   d6c3e:	4298      	cmp	r0, r3
   d6c40:	d206      	bcs.n	d6c50 <_Z11str_reversePc+0x20>
		c = *i;
   d6c42:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6c44:	7819      	ldrb	r1, [r3, #0]
   d6c46:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d6c4a:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d6c4e:	e7f6      	b.n	d6c3e <_Z11str_reversePc+0xe>
   d6c50:	bd10      	pop	{r4, pc}

000d6c52 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d6c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d6c56:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d6c58:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d6c5a:	4615      	mov	r5, r2
   d6c5c:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d6c5e:	bf34      	ite	cc
   d6c60:	4615      	movcc	r5, r2
   d6c62:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d6c64:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d6c66:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d6c68:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d6c6a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d6c6e:	d107      	bne.n	d6c80 <ltoa+0x2e>
   d6c70:	4298      	cmp	r0, r3
   d6c72:	da05      	bge.n	d6c80 <ltoa+0x2e>
      {
            *head++ = '-';
   d6c74:	232d      	movs	r3, #45	; 0x2d
   d6c76:	f101 0801 	add.w	r8, r1, #1
   d6c7a:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d6c7c:	4240      	negs	r0, r0
   d6c7e:	e001      	b.n	d6c84 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d6c80:	b1b0      	cbz	r0, d6cb0 <ltoa+0x5e>
   d6c82:	46a0      	mov	r8, r4
   d6c84:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d6c88:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d6c8a:	462a      	mov	r2, r5
   d6c8c:	4601      	mov	r1, r0
   d6c8e:	a801      	add	r0, sp, #4
   d6c90:	f000 fdba 	bl	d7808 <ldiv>
   d6c94:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d6c96:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d6c98:	2b09      	cmp	r3, #9
   d6c9a:	bfcc      	ite	gt
   d6c9c:	2237      	movgt	r2, #55	; 0x37
   d6c9e:	2230      	movle	r2, #48	; 0x30
   d6ca0:	fa52 f383 	uxtab	r3, r2, r3
   d6ca4:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d6ca8:	3701      	adds	r7, #1
   d6caa:	2800      	cmp	r0, #0
   d6cac:	d1ed      	bne.n	d6c8a <ltoa+0x38>
   d6cae:	e006      	b.n	d6cbe <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d6cb0:	2330      	movs	r3, #48	; 0x30
   d6cb2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d6cb6:	46a0      	mov	r8, r4
   d6cb8:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d6cbc:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d6cbe:	463a      	mov	r2, r7
   d6cc0:	1c71      	adds	r1, r6, #1
   d6cc2:	4640      	mov	r0, r8
   d6cc4:	f000 fdb4 	bl	d7830 <memcpy>
      return str;
}
   d6cc8:	4620      	mov	r0, r4
   d6cca:	b00c      	add	sp, #48	; 0x30
   d6ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6cd0 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6cd0:	b570      	push	{r4, r5, r6, lr}
   d6cd2:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d6cd4:	1e91      	subs	r1, r2, #2
   d6cd6:	2922      	cmp	r1, #34	; 0x22
   d6cd8:	d820      	bhi.n	d6d1c <ultoa+0x4c>
   d6cda:	4625      	mov	r5, r4
   d6cdc:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d6cde:	b910      	cbnz	r0, d6ce6 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6ce0:	4423      	add	r3, r4
            *ptr++ = '0';
   d6ce2:	2230      	movs	r2, #48	; 0x30
   d6ce4:	e00e      	b.n	d6d04 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6ce6:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d6cea:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d6cee:	b2c1      	uxtb	r1, r0
   d6cf0:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d6cf4:	2809      	cmp	r0, #9
                *ptr += '0';
   d6cf6:	bf94      	ite	ls
   d6cf8:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6cfa:	3157      	addhi	r1, #87	; 0x57
   d6cfc:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d6d00:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d6d02:	e7eb      	b.n	d6cdc <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6d04:	4299      	cmp	r1, r3
   d6d06:	d202      	bcs.n	d6d0e <ultoa+0x3e>
            *ptr++ = '0';
   d6d08:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6d0c:	e7fa      	b.n	d6d04 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d6d0e:	2300      	movs	r3, #0
	str_reverse(buffer);
   d6d10:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d6d12:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d6d14:	f7ff ff8c 	bl	d6c30 <_Z11str_reversePc>
	return buffer;
   d6d18:	4620      	mov	r0, r4
   d6d1a:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d6d1c:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d6d1e:	bd70      	pop	{r4, r5, r6, pc}

000d6d20 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6d20:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d6d22:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6d24:	460c      	mov	r4, r1
   d6d26:	4615      	mov	r5, r2
	if(a<0){
   d6d28:	da0b      	bge.n	d6d42 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d6d2e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6d32:	bf14      	ite	ne
   d6d34:	4258      	negne	r0, r3
   d6d36:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d6d38:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d6d3a:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d6d3c:	462a      	mov	r2, r5
   d6d3e:	4419      	add	r1, r3
   d6d40:	e000      	b.n	d6d44 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d6d42:	2301      	movs	r3, #1
   d6d44:	f7ff ffc4 	bl	d6cd0 <ultoa>
	}
	return buffer;
}
   d6d48:	4620      	mov	r0, r4
   d6d4a:	bd38      	pop	{r3, r4, r5, pc}

000d6d4c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6d4c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6d4e:	4b0c      	ldr	r3, [pc, #48]	; (d6d80 <serialEventRun+0x34>)
   d6d50:	b133      	cbz	r3, d6d60 <serialEventRun+0x14>
   d6d52:	f7ff ff47 	bl	d6be4 <_Z16_fetch_usbserialv>
   d6d56:	6803      	ldr	r3, [r0, #0]
   d6d58:	691b      	ldr	r3, [r3, #16]
   d6d5a:	4798      	blx	r3
   d6d5c:	2800      	cmp	r0, #0
   d6d5e:	dc09      	bgt.n	d6d74 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6d60:	4b08      	ldr	r3, [pc, #32]	; (d6d84 <serialEventRun+0x38>)
   d6d62:	b163      	cbz	r3, d6d7e <serialEventRun+0x32>
   d6d64:	f7ff feba 	bl	d6adc <_Z22__fetch_global_Serial1v>
   d6d68:	6803      	ldr	r3, [r0, #0]
   d6d6a:	691b      	ldr	r3, [r3, #16]
   d6d6c:	4798      	blx	r3
   d6d6e:	2800      	cmp	r0, #0
   d6d70:	dc03      	bgt.n	d6d7a <serialEventRun+0x2e>
   d6d72:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6d74:	f3af 8000 	nop.w
   d6d78:	e7f2      	b.n	d6d60 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6d7a:	f3af 8000 	nop.w
   d6d7e:	bd08      	pop	{r3, pc}
	...

000d6d88 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6d88:	b508      	push	{r3, lr}
	serialEventRun();
   d6d8a:	f7ff ffdf 	bl	d6d4c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6d8e:	f7fe fa95 	bl	d52bc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6d92:	4b01      	ldr	r3, [pc, #4]	; (d6d98 <_post_loop+0x10>)
   d6d94:	6018      	str	r0, [r3, #0]
   d6d96:	bd08      	pop	{r3, pc}
   d6d98:	2003e6e4 	.word	0x2003e6e4

000d6d9c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6d9c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6d9e:	2300      	movs	r3, #0
   d6da0:	9300      	str	r3, [sp, #0]
   d6da2:	461a      	mov	r2, r3
   d6da4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6da8:	f7fe fc02 	bl	d55b0 <system_ctrl_set_result>
}
   d6dac:	b003      	add	sp, #12
   d6dae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6db4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6db4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6db6:	8843      	ldrh	r3, [r0, #2]
   d6db8:	2b0a      	cmp	r3, #10
   d6dba:	d008      	beq.n	d6dce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6dbc:	2b50      	cmp	r3, #80	; 0x50
   d6dbe:	d109      	bne.n	d6dd4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6dc0:	4b09      	ldr	r3, [pc, #36]	; (d6de8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6dc2:	681b      	ldr	r3, [r3, #0]
   d6dc4:	b13b      	cbz	r3, d6dd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6dc6:	b003      	add	sp, #12
   d6dc8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6dcc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6dce:	f7ff ffe5 	bl	d6d9c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6dd2:	e006      	b.n	d6de2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6dd4:	2300      	movs	r3, #0
   d6dd6:	9300      	str	r3, [sp, #0]
   d6dd8:	461a      	mov	r2, r3
   d6dda:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6dde:	f7fe fbe7 	bl	d55b0 <system_ctrl_set_result>
        break;
    }
}
   d6de2:	b003      	add	sp, #12
   d6de4:	f85d fb04 	ldr.w	pc, [sp], #4
   d6de8:	2003e6e0 	.word	0x2003e6e0

000d6dec <module_user_init_hook>:

void module_user_init_hook()
{
   d6dec:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6dee:	f7fe fa5d 	bl	d52ac <HAL_RNG_GetRandomNumber>
   d6df2:	4604      	mov	r4, r0
    srand(seed);
   d6df4:	f000 fd30 	bl	d7858 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6df8:	4b07      	ldr	r3, [pc, #28]	; (d6e18 <module_user_init_hook+0x2c>)
   d6dfa:	b113      	cbz	r3, d6e02 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6dfc:	4620      	mov	r0, r4
   d6dfe:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6e02:	2100      	movs	r1, #0
   d6e04:	4804      	ldr	r0, [pc, #16]	; (d6e18 <module_user_init_hook+0x2c>)
   d6e06:	f7fe fc3f 	bl	d5688 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6e0a:	2100      	movs	r1, #0
   d6e0c:	4803      	ldr	r0, [pc, #12]	; (d6e1c <module_user_init_hook+0x30>)
}
   d6e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6e12:	f7fe bbc3 	b.w	d559c <system_ctrl_set_app_request_handler>
   d6e16:	bf00      	nop
   d6e18:	00000000 	.word	0x00000000
   d6e1c:	000d6db5 	.word	0x000d6db5

000d6e20 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6e20:	b510      	push	{r4, lr}
   d6e22:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6e24:	480f      	ldr	r0, [pc, #60]	; (d6e64 <pinAvailable+0x44>)
   d6e26:	f7ff fbef 	bl	d6608 <_ZN8SPIClass9isEnabledEv>
   d6e2a:	b128      	cbz	r0, d6e38 <pinAvailable+0x18>
   d6e2c:	f1a4 030b 	sub.w	r3, r4, #11
   d6e30:	2b02      	cmp	r3, #2
   d6e32:	d801      	bhi.n	d6e38 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6e34:	2000      	movs	r0, #0
   d6e36:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6e38:	f000 f854 	bl	d6ee4 <_Z19__fetch_global_Wirev>
   d6e3c:	f7ff f944 	bl	d60c8 <_ZN7TwoWire9isEnabledEv>
   d6e40:	b108      	cbz	r0, d6e46 <pinAvailable+0x26>
   d6e42:	2c01      	cmp	r4, #1
   d6e44:	d9f6      	bls.n	d6e34 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6e46:	f7ff fe49 	bl	d6adc <_Z22__fetch_global_Serial1v>
   d6e4a:	f7ff fe43 	bl	d6ad4 <_ZN11USARTSerial9isEnabledEv>
   d6e4e:	b118      	cbz	r0, d6e58 <pinAvailable+0x38>
   d6e50:	f1a4 0309 	sub.w	r3, r4, #9
   d6e54:	2b01      	cmp	r3, #1
   d6e56:	d9ed      	bls.n	d6e34 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6e58:	2c23      	cmp	r4, #35	; 0x23
   d6e5a:	bf8c      	ite	hi
   d6e5c:	2000      	movhi	r0, #0
   d6e5e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6e60:	bd10      	pop	{r4, pc}
   d6e62:	bf00      	nop
   d6e64:	2003e708 	.word	0x2003e708

000d6e68 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6e68:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6e6a:	b538      	push	{r3, r4, r5, lr}
   d6e6c:	4604      	mov	r4, r0
   d6e6e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6e70:	d80a      	bhi.n	d6e88 <pinMode+0x20>
   d6e72:	29ff      	cmp	r1, #255	; 0xff
   d6e74:	d008      	beq.n	d6e88 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6e76:	f7ff ffd3 	bl	d6e20 <pinAvailable>
   d6e7a:	b128      	cbz	r0, d6e88 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6e7c:	4629      	mov	r1, r5
   d6e7e:	4620      	mov	r0, r4
}
   d6e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6e84:	f7fe ba62 	b.w	d534c <HAL_Pin_Mode>
   d6e88:	bd38      	pop	{r3, r4, r5, pc}

000d6e8a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6e8a:	b538      	push	{r3, r4, r5, lr}
   d6e8c:	4604      	mov	r4, r0
   d6e8e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6e90:	f7fe fa64 	bl	d535c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6e94:	28ff      	cmp	r0, #255	; 0xff
   d6e96:	d010      	beq.n	d6eba <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6e98:	2806      	cmp	r0, #6
   d6e9a:	d804      	bhi.n	d6ea6 <digitalWrite+0x1c>
   d6e9c:	234d      	movs	r3, #77	; 0x4d
   d6e9e:	fa23 f000 	lsr.w	r0, r3, r0
   d6ea2:	07c3      	lsls	r3, r0, #31
   d6ea4:	d409      	bmi.n	d6eba <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6ea6:	4620      	mov	r0, r4
   d6ea8:	f7ff ffba 	bl	d6e20 <pinAvailable>
   d6eac:	b128      	cbz	r0, d6eba <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6eae:	4629      	mov	r1, r5
   d6eb0:	4620      	mov	r0, r4
}
   d6eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6eb6:	f7fe ba59 	b.w	d536c <HAL_GPIO_Write>
   d6eba:	bd38      	pop	{r3, r4, r5, pc}

000d6ebc <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d6ebc:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d6ebe:	4c07      	ldr	r4, [pc, #28]	; (d6edc <_Z21__fetch_global_EEPROMv+0x20>)
   d6ec0:	6823      	ldr	r3, [r4, #0]
   d6ec2:	07db      	lsls	r3, r3, #31
   d6ec4:	d408      	bmi.n	d6ed8 <_Z21__fetch_global_EEPROMv+0x1c>
   d6ec6:	4620      	mov	r0, r4
   d6ec8:	f7fd f8eb 	bl	d40a2 <__cxa_guard_acquire>
   d6ecc:	b120      	cbz	r0, d6ed8 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d6ece:	f7fe fa05 	bl	d52dc <HAL_EEPROM_Init>
   d6ed2:	4620      	mov	r0, r4
   d6ed4:	f7fd f8ea 	bl	d40ac <__cxa_guard_release>
	return eeprom;
}
   d6ed8:	4801      	ldr	r0, [pc, #4]	; (d6ee0 <_Z21__fetch_global_EEPROMv+0x24>)
   d6eda:	bd10      	pop	{r4, pc}
   d6edc:	2003e6e8 	.word	0x2003e6e8
   d6ee0:	2003e6ec 	.word	0x2003e6ec

000d6ee4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6ee4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6ee6:	4d0b      	ldr	r5, [pc, #44]	; (d6f14 <_Z19__fetch_global_Wirev+0x30>)
   d6ee8:	6829      	ldr	r1, [r5, #0]
   d6eea:	f011 0401 	ands.w	r4, r1, #1
   d6eee:	d10f      	bne.n	d6f10 <_Z19__fetch_global_Wirev+0x2c>
   d6ef0:	4628      	mov	r0, r5
   d6ef2:	f7fd f8d6 	bl	d40a2 <__cxa_guard_acquire>
   d6ef6:	b158      	cbz	r0, d6f10 <_Z19__fetch_global_Wirev+0x2c>
   d6ef8:	4621      	mov	r1, r4
   d6efa:	4807      	ldr	r0, [pc, #28]	; (d6f18 <_Z19__fetch_global_Wirev+0x34>)
   d6efc:	f7ff f8d2 	bl	d60a4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6f00:	4628      	mov	r0, r5
   d6f02:	f7fd f8d3 	bl	d40ac <__cxa_guard_release>
   d6f06:	4a05      	ldr	r2, [pc, #20]	; (d6f1c <_Z19__fetch_global_Wirev+0x38>)
   d6f08:	4905      	ldr	r1, [pc, #20]	; (d6f20 <_Z19__fetch_global_Wirev+0x3c>)
   d6f0a:	4803      	ldr	r0, [pc, #12]	; (d6f18 <_Z19__fetch_global_Wirev+0x34>)
   d6f0c:	f000 f82c 	bl	d6f68 <__aeabi_atexit>
	return wire;
}
   d6f10:	4801      	ldr	r0, [pc, #4]	; (d6f18 <_Z19__fetch_global_Wirev+0x34>)
   d6f12:	bd38      	pop	{r3, r4, r5, pc}
   d6f14:	2003e6f0 	.word	0x2003e6f0
   d6f18:	2003e6f4 	.word	0x2003e6f4
   d6f1c:	2003e180 	.word	0x2003e180
   d6f20:	000d604d 	.word	0x000d604d

000d6f24 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6f24:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6f26:	4c0c      	ldr	r4, [pc, #48]	; (d6f58 <_GLOBAL__sub_I_SPI+0x34>)
   d6f28:	4e0c      	ldr	r6, [pc, #48]	; (d6f5c <_GLOBAL__sub_I_SPI+0x38>)
   d6f2a:	4d0d      	ldr	r5, [pc, #52]	; (d6f60 <_GLOBAL__sub_I_SPI+0x3c>)
   d6f2c:	2100      	movs	r1, #0
   d6f2e:	4620      	mov	r0, r4
   d6f30:	f7ff fb56 	bl	d65e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6f34:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6f36:	4c0b      	ldr	r4, [pc, #44]	; (d6f64 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6f38:	4632      	mov	r2, r6
   d6f3a:	4629      	mov	r1, r5
   d6f3c:	f000 f814 	bl	d6f68 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6f40:	2101      	movs	r1, #1
   d6f42:	4620      	mov	r0, r4
   d6f44:	f7ff fb4c 	bl	d65e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6f48:	4632      	mov	r2, r6
   d6f4a:	4629      	mov	r1, r5
   d6f4c:	4620      	mov	r0, r4
   d6f4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6f52:	f000 b809 	b.w	d6f68 <__aeabi_atexit>
   d6f56:	bf00      	nop
   d6f58:	2003e708 	.word	0x2003e708
   d6f5c:	2003e180 	.word	0x2003e180
   d6f60:	000d65d1 	.word	0x000d65d1
   d6f64:	2003e718 	.word	0x2003e718

000d6f68 <__aeabi_atexit>:
   d6f68:	460b      	mov	r3, r1
   d6f6a:	4601      	mov	r1, r0
   d6f6c:	4618      	mov	r0, r3
   d6f6e:	f000 bb45 	b.w	d75fc <__cxa_atexit>

000d6f72 <_ZdlPvj>:
   d6f72:	f7fd b892 	b.w	d409a <_ZdlPv>

000d6f76 <_ZSt25__throw_bad_function_callv>:
   d6f76:	b508      	push	{r3, lr}
   d6f78:	f7fe fc0e 	bl	d5798 <abort>

000d6f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6f7c:	4b24      	ldr	r3, [pc, #144]	; (d7010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6f7e:	681a      	ldr	r2, [r3, #0]
   d6f80:	07d0      	lsls	r0, r2, #31
   d6f82:	bf5c      	itt	pl
   d6f84:	2201      	movpl	r2, #1
   d6f86:	601a      	strpl	r2, [r3, #0]
   d6f88:	4b22      	ldr	r3, [pc, #136]	; (d7014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6f8a:	681a      	ldr	r2, [r3, #0]
   d6f8c:	07d1      	lsls	r1, r2, #31
   d6f8e:	bf5c      	itt	pl
   d6f90:	2201      	movpl	r2, #1
   d6f92:	601a      	strpl	r2, [r3, #0]
   d6f94:	4b20      	ldr	r3, [pc, #128]	; (d7018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6f96:	681a      	ldr	r2, [r3, #0]
   d6f98:	07d2      	lsls	r2, r2, #31
   d6f9a:	bf5c      	itt	pl
   d6f9c:	2201      	movpl	r2, #1
   d6f9e:	601a      	strpl	r2, [r3, #0]
   d6fa0:	4b1e      	ldr	r3, [pc, #120]	; (d701c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6fa2:	681a      	ldr	r2, [r3, #0]
   d6fa4:	07d0      	lsls	r0, r2, #31
   d6fa6:	bf5c      	itt	pl
   d6fa8:	2201      	movpl	r2, #1
   d6faa:	601a      	strpl	r2, [r3, #0]
   d6fac:	4b1c      	ldr	r3, [pc, #112]	; (d7020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6fae:	681a      	ldr	r2, [r3, #0]
   d6fb0:	07d1      	lsls	r1, r2, #31
   d6fb2:	bf5c      	itt	pl
   d6fb4:	2201      	movpl	r2, #1
   d6fb6:	601a      	strpl	r2, [r3, #0]
   d6fb8:	4b1a      	ldr	r3, [pc, #104]	; (d7024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6fba:	681a      	ldr	r2, [r3, #0]
   d6fbc:	07d2      	lsls	r2, r2, #31
   d6fbe:	bf5c      	itt	pl
   d6fc0:	2201      	movpl	r2, #1
   d6fc2:	601a      	strpl	r2, [r3, #0]
   d6fc4:	4b18      	ldr	r3, [pc, #96]	; (d7028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6fc6:	681a      	ldr	r2, [r3, #0]
   d6fc8:	07d0      	lsls	r0, r2, #31
   d6fca:	bf5c      	itt	pl
   d6fcc:	2201      	movpl	r2, #1
   d6fce:	601a      	strpl	r2, [r3, #0]
   d6fd0:	4b16      	ldr	r3, [pc, #88]	; (d702c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6fd2:	681a      	ldr	r2, [r3, #0]
   d6fd4:	07d1      	lsls	r1, r2, #31
   d6fd6:	bf5c      	itt	pl
   d6fd8:	2201      	movpl	r2, #1
   d6fda:	601a      	strpl	r2, [r3, #0]
   d6fdc:	4b14      	ldr	r3, [pc, #80]	; (d7030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6fde:	681a      	ldr	r2, [r3, #0]
   d6fe0:	07d2      	lsls	r2, r2, #31
   d6fe2:	bf5c      	itt	pl
   d6fe4:	2201      	movpl	r2, #1
   d6fe6:	601a      	strpl	r2, [r3, #0]
   d6fe8:	4b12      	ldr	r3, [pc, #72]	; (d7034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6fea:	681a      	ldr	r2, [r3, #0]
   d6fec:	07d0      	lsls	r0, r2, #31
   d6fee:	bf5c      	itt	pl
   d6ff0:	2201      	movpl	r2, #1
   d6ff2:	601a      	strpl	r2, [r3, #0]
   d6ff4:	4b10      	ldr	r3, [pc, #64]	; (d7038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6ff6:	681a      	ldr	r2, [r3, #0]
   d6ff8:	07d1      	lsls	r1, r2, #31
   d6ffa:	bf5c      	itt	pl
   d6ffc:	2201      	movpl	r2, #1
   d6ffe:	601a      	strpl	r2, [r3, #0]
   d7000:	4b0e      	ldr	r3, [pc, #56]	; (d703c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7002:	681a      	ldr	r2, [r3, #0]
   d7004:	07d2      	lsls	r2, r2, #31
   d7006:	bf5c      	itt	pl
   d7008:	2201      	movpl	r2, #1
   d700a:	601a      	strpl	r2, [r3, #0]
   d700c:	4770      	bx	lr
   d700e:	bf00      	nop
   d7010:	2003e754 	.word	0x2003e754
   d7014:	2003e750 	.word	0x2003e750
   d7018:	2003e74c 	.word	0x2003e74c
   d701c:	2003e748 	.word	0x2003e748
   d7020:	2003e744 	.word	0x2003e744
   d7024:	2003e740 	.word	0x2003e740
   d7028:	2003e73c 	.word	0x2003e73c
   d702c:	2003e738 	.word	0x2003e738
   d7030:	2003e734 	.word	0x2003e734
   d7034:	2003e730 	.word	0x2003e730
   d7038:	2003e72c 	.word	0x2003e72c
   d703c:	2003e728 	.word	0x2003e728

000d7040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7040:	4b18      	ldr	r3, [pc, #96]	; (d70a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7042:	681a      	ldr	r2, [r3, #0]
   d7044:	07d1      	lsls	r1, r2, #31
   d7046:	bf5c      	itt	pl
   d7048:	2201      	movpl	r2, #1
   d704a:	601a      	strpl	r2, [r3, #0]
   d704c:	4b16      	ldr	r3, [pc, #88]	; (d70a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d704e:	681a      	ldr	r2, [r3, #0]
   d7050:	07d2      	lsls	r2, r2, #31
   d7052:	bf5c      	itt	pl
   d7054:	2201      	movpl	r2, #1
   d7056:	601a      	strpl	r2, [r3, #0]
   d7058:	4b14      	ldr	r3, [pc, #80]	; (d70ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d705a:	681a      	ldr	r2, [r3, #0]
   d705c:	07d0      	lsls	r0, r2, #31
   d705e:	bf5c      	itt	pl
   d7060:	2201      	movpl	r2, #1
   d7062:	601a      	strpl	r2, [r3, #0]
   d7064:	4b12      	ldr	r3, [pc, #72]	; (d70b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7066:	681a      	ldr	r2, [r3, #0]
   d7068:	07d1      	lsls	r1, r2, #31
   d706a:	bf5c      	itt	pl
   d706c:	2201      	movpl	r2, #1
   d706e:	601a      	strpl	r2, [r3, #0]
   d7070:	4b10      	ldr	r3, [pc, #64]	; (d70b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7072:	681a      	ldr	r2, [r3, #0]
   d7074:	07d2      	lsls	r2, r2, #31
   d7076:	bf5c      	itt	pl
   d7078:	2201      	movpl	r2, #1
   d707a:	601a      	strpl	r2, [r3, #0]
   d707c:	4b0e      	ldr	r3, [pc, #56]	; (d70b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d707e:	681a      	ldr	r2, [r3, #0]
   d7080:	07d0      	lsls	r0, r2, #31
   d7082:	bf5c      	itt	pl
   d7084:	2201      	movpl	r2, #1
   d7086:	601a      	strpl	r2, [r3, #0]
   d7088:	4b0c      	ldr	r3, [pc, #48]	; (d70bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d708a:	681a      	ldr	r2, [r3, #0]
   d708c:	07d1      	lsls	r1, r2, #31
   d708e:	bf5c      	itt	pl
   d7090:	2201      	movpl	r2, #1
   d7092:	601a      	strpl	r2, [r3, #0]
   d7094:	4b0a      	ldr	r3, [pc, #40]	; (d70c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7096:	681a      	ldr	r2, [r3, #0]
   d7098:	07d2      	lsls	r2, r2, #31
   d709a:	bf5c      	itt	pl
   d709c:	2201      	movpl	r2, #1
   d709e:	601a      	strpl	r2, [r3, #0]
   d70a0:	4770      	bx	lr
   d70a2:	bf00      	nop
   d70a4:	2003e774 	.word	0x2003e774
   d70a8:	2003e770 	.word	0x2003e770
   d70ac:	2003e76c 	.word	0x2003e76c
   d70b0:	2003e768 	.word	0x2003e768
   d70b4:	2003e764 	.word	0x2003e764
   d70b8:	2003e760 	.word	0x2003e760
   d70bc:	2003e75c 	.word	0x2003e75c
   d70c0:	2003e758 	.word	0x2003e758

000d70c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d70c4:	4b18      	ldr	r3, [pc, #96]	; (d7128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d70c6:	681a      	ldr	r2, [r3, #0]
   d70c8:	07d1      	lsls	r1, r2, #31
   d70ca:	bf5c      	itt	pl
   d70cc:	2201      	movpl	r2, #1
   d70ce:	601a      	strpl	r2, [r3, #0]
   d70d0:	4b16      	ldr	r3, [pc, #88]	; (d712c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d70d2:	681a      	ldr	r2, [r3, #0]
   d70d4:	07d2      	lsls	r2, r2, #31
   d70d6:	bf5c      	itt	pl
   d70d8:	2201      	movpl	r2, #1
   d70da:	601a      	strpl	r2, [r3, #0]
   d70dc:	4b14      	ldr	r3, [pc, #80]	; (d7130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d70de:	681a      	ldr	r2, [r3, #0]
   d70e0:	07d0      	lsls	r0, r2, #31
   d70e2:	bf5c      	itt	pl
   d70e4:	2201      	movpl	r2, #1
   d70e6:	601a      	strpl	r2, [r3, #0]
   d70e8:	4b12      	ldr	r3, [pc, #72]	; (d7134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d70ea:	681a      	ldr	r2, [r3, #0]
   d70ec:	07d1      	lsls	r1, r2, #31
   d70ee:	bf5c      	itt	pl
   d70f0:	2201      	movpl	r2, #1
   d70f2:	601a      	strpl	r2, [r3, #0]
   d70f4:	4b10      	ldr	r3, [pc, #64]	; (d7138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d70f6:	681a      	ldr	r2, [r3, #0]
   d70f8:	07d2      	lsls	r2, r2, #31
   d70fa:	bf5c      	itt	pl
   d70fc:	2201      	movpl	r2, #1
   d70fe:	601a      	strpl	r2, [r3, #0]
   d7100:	4b0e      	ldr	r3, [pc, #56]	; (d713c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7102:	681a      	ldr	r2, [r3, #0]
   d7104:	07d0      	lsls	r0, r2, #31
   d7106:	bf5c      	itt	pl
   d7108:	2201      	movpl	r2, #1
   d710a:	601a      	strpl	r2, [r3, #0]
   d710c:	4b0c      	ldr	r3, [pc, #48]	; (d7140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d710e:	681a      	ldr	r2, [r3, #0]
   d7110:	07d1      	lsls	r1, r2, #31
   d7112:	bf5c      	itt	pl
   d7114:	2201      	movpl	r2, #1
   d7116:	601a      	strpl	r2, [r3, #0]
   d7118:	4b0a      	ldr	r3, [pc, #40]	; (d7144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d711a:	681a      	ldr	r2, [r3, #0]
   d711c:	07d2      	lsls	r2, r2, #31
   d711e:	bf5c      	itt	pl
   d7120:	2201      	movpl	r2, #1
   d7122:	601a      	strpl	r2, [r3, #0]
   d7124:	4770      	bx	lr
   d7126:	bf00      	nop
   d7128:	2003e794 	.word	0x2003e794
   d712c:	2003e790 	.word	0x2003e790
   d7130:	2003e78c 	.word	0x2003e78c
   d7134:	2003e788 	.word	0x2003e788
   d7138:	2003e784 	.word	0x2003e784
   d713c:	2003e780 	.word	0x2003e780
   d7140:	2003e77c 	.word	0x2003e77c
   d7144:	2003e778 	.word	0x2003e778

000d7148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7148:	4b24      	ldr	r3, [pc, #144]	; (d71dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d714a:	681a      	ldr	r2, [r3, #0]
   d714c:	07d0      	lsls	r0, r2, #31
   d714e:	bf5c      	itt	pl
   d7150:	2201      	movpl	r2, #1
   d7152:	601a      	strpl	r2, [r3, #0]
   d7154:	4b22      	ldr	r3, [pc, #136]	; (d71e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7156:	681a      	ldr	r2, [r3, #0]
   d7158:	07d1      	lsls	r1, r2, #31
   d715a:	bf5c      	itt	pl
   d715c:	2201      	movpl	r2, #1
   d715e:	601a      	strpl	r2, [r3, #0]
   d7160:	4b20      	ldr	r3, [pc, #128]	; (d71e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7162:	681a      	ldr	r2, [r3, #0]
   d7164:	07d2      	lsls	r2, r2, #31
   d7166:	bf5c      	itt	pl
   d7168:	2201      	movpl	r2, #1
   d716a:	601a      	strpl	r2, [r3, #0]
   d716c:	4b1e      	ldr	r3, [pc, #120]	; (d71e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d716e:	681a      	ldr	r2, [r3, #0]
   d7170:	07d0      	lsls	r0, r2, #31
   d7172:	bf5c      	itt	pl
   d7174:	2201      	movpl	r2, #1
   d7176:	601a      	strpl	r2, [r3, #0]
   d7178:	4b1c      	ldr	r3, [pc, #112]	; (d71ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d717a:	681a      	ldr	r2, [r3, #0]
   d717c:	07d1      	lsls	r1, r2, #31
   d717e:	bf5c      	itt	pl
   d7180:	2201      	movpl	r2, #1
   d7182:	601a      	strpl	r2, [r3, #0]
   d7184:	4b1a      	ldr	r3, [pc, #104]	; (d71f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7186:	681a      	ldr	r2, [r3, #0]
   d7188:	07d2      	lsls	r2, r2, #31
   d718a:	bf5c      	itt	pl
   d718c:	2201      	movpl	r2, #1
   d718e:	601a      	strpl	r2, [r3, #0]
   d7190:	4b18      	ldr	r3, [pc, #96]	; (d71f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7192:	681a      	ldr	r2, [r3, #0]
   d7194:	07d0      	lsls	r0, r2, #31
   d7196:	bf5c      	itt	pl
   d7198:	2201      	movpl	r2, #1
   d719a:	601a      	strpl	r2, [r3, #0]
   d719c:	4b16      	ldr	r3, [pc, #88]	; (d71f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d719e:	681a      	ldr	r2, [r3, #0]
   d71a0:	07d1      	lsls	r1, r2, #31
   d71a2:	bf5c      	itt	pl
   d71a4:	2201      	movpl	r2, #1
   d71a6:	601a      	strpl	r2, [r3, #0]
   d71a8:	4b14      	ldr	r3, [pc, #80]	; (d71fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d71aa:	681a      	ldr	r2, [r3, #0]
   d71ac:	07d2      	lsls	r2, r2, #31
   d71ae:	bf5c      	itt	pl
   d71b0:	2201      	movpl	r2, #1
   d71b2:	601a      	strpl	r2, [r3, #0]
   d71b4:	4b12      	ldr	r3, [pc, #72]	; (d7200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d71b6:	681a      	ldr	r2, [r3, #0]
   d71b8:	07d0      	lsls	r0, r2, #31
   d71ba:	bf5c      	itt	pl
   d71bc:	2201      	movpl	r2, #1
   d71be:	601a      	strpl	r2, [r3, #0]
   d71c0:	4b10      	ldr	r3, [pc, #64]	; (d7204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d71c2:	681a      	ldr	r2, [r3, #0]
   d71c4:	07d1      	lsls	r1, r2, #31
   d71c6:	bf5c      	itt	pl
   d71c8:	2201      	movpl	r2, #1
   d71ca:	601a      	strpl	r2, [r3, #0]
   d71cc:	4b0e      	ldr	r3, [pc, #56]	; (d7208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d71ce:	681a      	ldr	r2, [r3, #0]
   d71d0:	07d2      	lsls	r2, r2, #31
   d71d2:	bf5c      	itt	pl
   d71d4:	2201      	movpl	r2, #1
   d71d6:	601a      	strpl	r2, [r3, #0]
   d71d8:	4770      	bx	lr
   d71da:	bf00      	nop
   d71dc:	2003e7c4 	.word	0x2003e7c4
   d71e0:	2003e7c0 	.word	0x2003e7c0
   d71e4:	2003e7bc 	.word	0x2003e7bc
   d71e8:	2003e7b8 	.word	0x2003e7b8
   d71ec:	2003e7b4 	.word	0x2003e7b4
   d71f0:	2003e7b0 	.word	0x2003e7b0
   d71f4:	2003e7ac 	.word	0x2003e7ac
   d71f8:	2003e7a8 	.word	0x2003e7a8
   d71fc:	2003e7a4 	.word	0x2003e7a4
   d7200:	2003e7a0 	.word	0x2003e7a0
   d7204:	2003e79c 	.word	0x2003e79c
   d7208:	2003e798 	.word	0x2003e798

000d720c <__aeabi_drsub>:
   d720c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7210:	e002      	b.n	d7218 <__adddf3>
   d7212:	bf00      	nop

000d7214 <__aeabi_dsub>:
   d7214:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7218 <__adddf3>:
   d7218:	b530      	push	{r4, r5, lr}
   d721a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d721e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7222:	ea94 0f05 	teq	r4, r5
   d7226:	bf08      	it	eq
   d7228:	ea90 0f02 	teqeq	r0, r2
   d722c:	bf1f      	itttt	ne
   d722e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7232:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7236:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d723a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d723e:	f000 80e2 	beq.w	d7406 <__adddf3+0x1ee>
   d7242:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7246:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d724a:	bfb8      	it	lt
   d724c:	426d      	neglt	r5, r5
   d724e:	dd0c      	ble.n	d726a <__adddf3+0x52>
   d7250:	442c      	add	r4, r5
   d7252:	ea80 0202 	eor.w	r2, r0, r2
   d7256:	ea81 0303 	eor.w	r3, r1, r3
   d725a:	ea82 0000 	eor.w	r0, r2, r0
   d725e:	ea83 0101 	eor.w	r1, r3, r1
   d7262:	ea80 0202 	eor.w	r2, r0, r2
   d7266:	ea81 0303 	eor.w	r3, r1, r3
   d726a:	2d36      	cmp	r5, #54	; 0x36
   d726c:	bf88      	it	hi
   d726e:	bd30      	pophi	{r4, r5, pc}
   d7270:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7274:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7278:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d727c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7280:	d002      	beq.n	d7288 <__adddf3+0x70>
   d7282:	4240      	negs	r0, r0
   d7284:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7288:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d728c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7290:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7294:	d002      	beq.n	d729c <__adddf3+0x84>
   d7296:	4252      	negs	r2, r2
   d7298:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d729c:	ea94 0f05 	teq	r4, r5
   d72a0:	f000 80a7 	beq.w	d73f2 <__adddf3+0x1da>
   d72a4:	f1a4 0401 	sub.w	r4, r4, #1
   d72a8:	f1d5 0e20 	rsbs	lr, r5, #32
   d72ac:	db0d      	blt.n	d72ca <__adddf3+0xb2>
   d72ae:	fa02 fc0e 	lsl.w	ip, r2, lr
   d72b2:	fa22 f205 	lsr.w	r2, r2, r5
   d72b6:	1880      	adds	r0, r0, r2
   d72b8:	f141 0100 	adc.w	r1, r1, #0
   d72bc:	fa03 f20e 	lsl.w	r2, r3, lr
   d72c0:	1880      	adds	r0, r0, r2
   d72c2:	fa43 f305 	asr.w	r3, r3, r5
   d72c6:	4159      	adcs	r1, r3
   d72c8:	e00e      	b.n	d72e8 <__adddf3+0xd0>
   d72ca:	f1a5 0520 	sub.w	r5, r5, #32
   d72ce:	f10e 0e20 	add.w	lr, lr, #32
   d72d2:	2a01      	cmp	r2, #1
   d72d4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d72d8:	bf28      	it	cs
   d72da:	f04c 0c02 	orrcs.w	ip, ip, #2
   d72de:	fa43 f305 	asr.w	r3, r3, r5
   d72e2:	18c0      	adds	r0, r0, r3
   d72e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d72e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d72ec:	d507      	bpl.n	d72fe <__adddf3+0xe6>
   d72ee:	f04f 0e00 	mov.w	lr, #0
   d72f2:	f1dc 0c00 	rsbs	ip, ip, #0
   d72f6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d72fa:	eb6e 0101 	sbc.w	r1, lr, r1
   d72fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7302:	d31b      	bcc.n	d733c <__adddf3+0x124>
   d7304:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7308:	d30c      	bcc.n	d7324 <__adddf3+0x10c>
   d730a:	0849      	lsrs	r1, r1, #1
   d730c:	ea5f 0030 	movs.w	r0, r0, rrx
   d7310:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7314:	f104 0401 	add.w	r4, r4, #1
   d7318:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d731c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7320:	f080 809a 	bcs.w	d7458 <__adddf3+0x240>
   d7324:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7328:	bf08      	it	eq
   d732a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d732e:	f150 0000 	adcs.w	r0, r0, #0
   d7332:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7336:	ea41 0105 	orr.w	r1, r1, r5
   d733a:	bd30      	pop	{r4, r5, pc}
   d733c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7340:	4140      	adcs	r0, r0
   d7342:	eb41 0101 	adc.w	r1, r1, r1
   d7346:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d734a:	f1a4 0401 	sub.w	r4, r4, #1
   d734e:	d1e9      	bne.n	d7324 <__adddf3+0x10c>
   d7350:	f091 0f00 	teq	r1, #0
   d7354:	bf04      	itt	eq
   d7356:	4601      	moveq	r1, r0
   d7358:	2000      	moveq	r0, #0
   d735a:	fab1 f381 	clz	r3, r1
   d735e:	bf08      	it	eq
   d7360:	3320      	addeq	r3, #32
   d7362:	f1a3 030b 	sub.w	r3, r3, #11
   d7366:	f1b3 0220 	subs.w	r2, r3, #32
   d736a:	da0c      	bge.n	d7386 <__adddf3+0x16e>
   d736c:	320c      	adds	r2, #12
   d736e:	dd08      	ble.n	d7382 <__adddf3+0x16a>
   d7370:	f102 0c14 	add.w	ip, r2, #20
   d7374:	f1c2 020c 	rsb	r2, r2, #12
   d7378:	fa01 f00c 	lsl.w	r0, r1, ip
   d737c:	fa21 f102 	lsr.w	r1, r1, r2
   d7380:	e00c      	b.n	d739c <__adddf3+0x184>
   d7382:	f102 0214 	add.w	r2, r2, #20
   d7386:	bfd8      	it	le
   d7388:	f1c2 0c20 	rsble	ip, r2, #32
   d738c:	fa01 f102 	lsl.w	r1, r1, r2
   d7390:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7394:	bfdc      	itt	le
   d7396:	ea41 010c 	orrle.w	r1, r1, ip
   d739a:	4090      	lslle	r0, r2
   d739c:	1ae4      	subs	r4, r4, r3
   d739e:	bfa2      	ittt	ge
   d73a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d73a4:	4329      	orrge	r1, r5
   d73a6:	bd30      	popge	{r4, r5, pc}
   d73a8:	ea6f 0404 	mvn.w	r4, r4
   d73ac:	3c1f      	subs	r4, #31
   d73ae:	da1c      	bge.n	d73ea <__adddf3+0x1d2>
   d73b0:	340c      	adds	r4, #12
   d73b2:	dc0e      	bgt.n	d73d2 <__adddf3+0x1ba>
   d73b4:	f104 0414 	add.w	r4, r4, #20
   d73b8:	f1c4 0220 	rsb	r2, r4, #32
   d73bc:	fa20 f004 	lsr.w	r0, r0, r4
   d73c0:	fa01 f302 	lsl.w	r3, r1, r2
   d73c4:	ea40 0003 	orr.w	r0, r0, r3
   d73c8:	fa21 f304 	lsr.w	r3, r1, r4
   d73cc:	ea45 0103 	orr.w	r1, r5, r3
   d73d0:	bd30      	pop	{r4, r5, pc}
   d73d2:	f1c4 040c 	rsb	r4, r4, #12
   d73d6:	f1c4 0220 	rsb	r2, r4, #32
   d73da:	fa20 f002 	lsr.w	r0, r0, r2
   d73de:	fa01 f304 	lsl.w	r3, r1, r4
   d73e2:	ea40 0003 	orr.w	r0, r0, r3
   d73e6:	4629      	mov	r1, r5
   d73e8:	bd30      	pop	{r4, r5, pc}
   d73ea:	fa21 f004 	lsr.w	r0, r1, r4
   d73ee:	4629      	mov	r1, r5
   d73f0:	bd30      	pop	{r4, r5, pc}
   d73f2:	f094 0f00 	teq	r4, #0
   d73f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d73fa:	bf06      	itte	eq
   d73fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7400:	3401      	addeq	r4, #1
   d7402:	3d01      	subne	r5, #1
   d7404:	e74e      	b.n	d72a4 <__adddf3+0x8c>
   d7406:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d740a:	bf18      	it	ne
   d740c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7410:	d029      	beq.n	d7466 <__adddf3+0x24e>
   d7412:	ea94 0f05 	teq	r4, r5
   d7416:	bf08      	it	eq
   d7418:	ea90 0f02 	teqeq	r0, r2
   d741c:	d005      	beq.n	d742a <__adddf3+0x212>
   d741e:	ea54 0c00 	orrs.w	ip, r4, r0
   d7422:	bf04      	itt	eq
   d7424:	4619      	moveq	r1, r3
   d7426:	4610      	moveq	r0, r2
   d7428:	bd30      	pop	{r4, r5, pc}
   d742a:	ea91 0f03 	teq	r1, r3
   d742e:	bf1e      	ittt	ne
   d7430:	2100      	movne	r1, #0
   d7432:	2000      	movne	r0, #0
   d7434:	bd30      	popne	{r4, r5, pc}
   d7436:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d743a:	d105      	bne.n	d7448 <__adddf3+0x230>
   d743c:	0040      	lsls	r0, r0, #1
   d743e:	4149      	adcs	r1, r1
   d7440:	bf28      	it	cs
   d7442:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7446:	bd30      	pop	{r4, r5, pc}
   d7448:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d744c:	bf3c      	itt	cc
   d744e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7452:	bd30      	popcc	{r4, r5, pc}
   d7454:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7458:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d745c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7460:	f04f 0000 	mov.w	r0, #0
   d7464:	bd30      	pop	{r4, r5, pc}
   d7466:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d746a:	bf1a      	itte	ne
   d746c:	4619      	movne	r1, r3
   d746e:	4610      	movne	r0, r2
   d7470:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7474:	bf1c      	itt	ne
   d7476:	460b      	movne	r3, r1
   d7478:	4602      	movne	r2, r0
   d747a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d747e:	bf06      	itte	eq
   d7480:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7484:	ea91 0f03 	teqeq	r1, r3
   d7488:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d748c:	bd30      	pop	{r4, r5, pc}
   d748e:	bf00      	nop

000d7490 <__aeabi_ui2d>:
   d7490:	f090 0f00 	teq	r0, #0
   d7494:	bf04      	itt	eq
   d7496:	2100      	moveq	r1, #0
   d7498:	4770      	bxeq	lr
   d749a:	b530      	push	{r4, r5, lr}
   d749c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d74a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d74a4:	f04f 0500 	mov.w	r5, #0
   d74a8:	f04f 0100 	mov.w	r1, #0
   d74ac:	e750      	b.n	d7350 <__adddf3+0x138>
   d74ae:	bf00      	nop

000d74b0 <__aeabi_i2d>:
   d74b0:	f090 0f00 	teq	r0, #0
   d74b4:	bf04      	itt	eq
   d74b6:	2100      	moveq	r1, #0
   d74b8:	4770      	bxeq	lr
   d74ba:	b530      	push	{r4, r5, lr}
   d74bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d74c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d74c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d74c8:	bf48      	it	mi
   d74ca:	4240      	negmi	r0, r0
   d74cc:	f04f 0100 	mov.w	r1, #0
   d74d0:	e73e      	b.n	d7350 <__adddf3+0x138>
   d74d2:	bf00      	nop

000d74d4 <__aeabi_f2d>:
   d74d4:	0042      	lsls	r2, r0, #1
   d74d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d74da:	ea4f 0131 	mov.w	r1, r1, rrx
   d74de:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d74e2:	bf1f      	itttt	ne
   d74e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d74e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d74ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d74f0:	4770      	bxne	lr
   d74f2:	f092 0f00 	teq	r2, #0
   d74f6:	bf14      	ite	ne
   d74f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d74fc:	4770      	bxeq	lr
   d74fe:	b530      	push	{r4, r5, lr}
   d7500:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d750c:	e720      	b.n	d7350 <__adddf3+0x138>
   d750e:	bf00      	nop

000d7510 <__aeabi_ul2d>:
   d7510:	ea50 0201 	orrs.w	r2, r0, r1
   d7514:	bf08      	it	eq
   d7516:	4770      	bxeq	lr
   d7518:	b530      	push	{r4, r5, lr}
   d751a:	f04f 0500 	mov.w	r5, #0
   d751e:	e00a      	b.n	d7536 <__aeabi_l2d+0x16>

000d7520 <__aeabi_l2d>:
   d7520:	ea50 0201 	orrs.w	r2, r0, r1
   d7524:	bf08      	it	eq
   d7526:	4770      	bxeq	lr
   d7528:	b530      	push	{r4, r5, lr}
   d752a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d752e:	d502      	bpl.n	d7536 <__aeabi_l2d+0x16>
   d7530:	4240      	negs	r0, r0
   d7532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7536:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d753a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d753e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7542:	f43f aedc 	beq.w	d72fe <__adddf3+0xe6>
   d7546:	f04f 0203 	mov.w	r2, #3
   d754a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d754e:	bf18      	it	ne
   d7550:	3203      	addne	r2, #3
   d7552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7556:	bf18      	it	ne
   d7558:	3203      	addne	r2, #3
   d755a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d755e:	f1c2 0320 	rsb	r3, r2, #32
   d7562:	fa00 fc03 	lsl.w	ip, r0, r3
   d7566:	fa20 f002 	lsr.w	r0, r0, r2
   d756a:	fa01 fe03 	lsl.w	lr, r1, r3
   d756e:	ea40 000e 	orr.w	r0, r0, lr
   d7572:	fa21 f102 	lsr.w	r1, r1, r2
   d7576:	4414      	add	r4, r2
   d7578:	e6c1      	b.n	d72fe <__adddf3+0xe6>
   d757a:	bf00      	nop

000d757c <asctime>:
   d757c:	4b09      	ldr	r3, [pc, #36]	; (d75a4 <asctime+0x28>)
   d757e:	b570      	push	{r4, r5, r6, lr}
   d7580:	681c      	ldr	r4, [r3, #0]
   d7582:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d7584:	4606      	mov	r6, r0
   d7586:	b93d      	cbnz	r5, d7598 <asctime+0x1c>
   d7588:	201a      	movs	r0, #26
   d758a:	f7fe f8d5 	bl	d5738 <malloc>
   d758e:	221a      	movs	r2, #26
   d7590:	6420      	str	r0, [r4, #64]	; 0x40
   d7592:	4629      	mov	r1, r5
   d7594:	f000 f957 	bl	d7846 <memset>
   d7598:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d759a:	4630      	mov	r0, r6
   d759c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d75a0:	f000 b802 	b.w	d75a8 <asctime_r>
   d75a4:	2003e130 	.word	0x2003e130

000d75a8 <asctime_r>:
   d75a8:	b510      	push	{r4, lr}
   d75aa:	460c      	mov	r4, r1
   d75ac:	6941      	ldr	r1, [r0, #20]
   d75ae:	6903      	ldr	r3, [r0, #16]
   d75b0:	6982      	ldr	r2, [r0, #24]
   d75b2:	b086      	sub	sp, #24
   d75b4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d75b8:	9104      	str	r1, [sp, #16]
   d75ba:	6801      	ldr	r1, [r0, #0]
   d75bc:	9103      	str	r1, [sp, #12]
   d75be:	6841      	ldr	r1, [r0, #4]
   d75c0:	9102      	str	r1, [sp, #8]
   d75c2:	6881      	ldr	r1, [r0, #8]
   d75c4:	9101      	str	r1, [sp, #4]
   d75c6:	68c1      	ldr	r1, [r0, #12]
   d75c8:	9100      	str	r1, [sp, #0]
   d75ca:	4907      	ldr	r1, [pc, #28]	; (d75e8 <asctime_r+0x40>)
   d75cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d75d0:	440b      	add	r3, r1
   d75d2:	4906      	ldr	r1, [pc, #24]	; (d75ec <asctime_r+0x44>)
   d75d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d75d8:	440a      	add	r2, r1
   d75da:	4620      	mov	r0, r4
   d75dc:	4904      	ldr	r1, [pc, #16]	; (d75f0 <asctime_r+0x48>)
   d75de:	f7fe f8c3 	bl	d5768 <siprintf>
   d75e2:	4620      	mov	r0, r4
   d75e4:	b006      	add	sp, #24
   d75e6:	bd10      	pop	{r4, pc}
   d75e8:	000d899d 	.word	0x000d899d
   d75ec:	000d8988 	.word	0x000d8988
   d75f0:	000d89c1 	.word	0x000d89c1

000d75f4 <atoi>:
   d75f4:	220a      	movs	r2, #10
   d75f6:	2100      	movs	r1, #0
   d75f8:	f000 ba74 	b.w	d7ae4 <strtol>

000d75fc <__cxa_atexit>:
   d75fc:	b510      	push	{r4, lr}
   d75fe:	4c05      	ldr	r4, [pc, #20]	; (d7614 <__cxa_atexit+0x18>)
   d7600:	4613      	mov	r3, r2
   d7602:	b12c      	cbz	r4, d7610 <__cxa_atexit+0x14>
   d7604:	460a      	mov	r2, r1
   d7606:	4601      	mov	r1, r0
   d7608:	2002      	movs	r0, #2
   d760a:	f3af 8000 	nop.w
   d760e:	bd10      	pop	{r4, pc}
   d7610:	4620      	mov	r0, r4
   d7612:	bd10      	pop	{r4, pc}
   d7614:	00000000 	.word	0x00000000

000d7618 <localtime>:
   d7618:	b538      	push	{r3, r4, r5, lr}
   d761a:	4b07      	ldr	r3, [pc, #28]	; (d7638 <localtime+0x20>)
   d761c:	681c      	ldr	r4, [r3, #0]
   d761e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7620:	4605      	mov	r5, r0
   d7622:	b91b      	cbnz	r3, d762c <localtime+0x14>
   d7624:	2024      	movs	r0, #36	; 0x24
   d7626:	f7fe f887 	bl	d5738 <malloc>
   d762a:	63e0      	str	r0, [r4, #60]	; 0x3c
   d762c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d762e:	4628      	mov	r0, r5
   d7630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7634:	f000 b802 	b.w	d763c <localtime_r>
   d7638:	2003e130 	.word	0x2003e130

000d763c <localtime_r>:
   d763c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7640:	460c      	mov	r4, r1
   d7642:	4680      	mov	r8, r0
   d7644:	f000 fd54 	bl	d80f0 <__gettzinfo>
   d7648:	4621      	mov	r1, r4
   d764a:	4607      	mov	r7, r0
   d764c:	4640      	mov	r0, r8
   d764e:	f000 fd53 	bl	d80f8 <gmtime_r>
   d7652:	6946      	ldr	r6, [r0, #20]
   d7654:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d7658:	07b3      	lsls	r3, r6, #30
   d765a:	4604      	mov	r4, r0
   d765c:	d105      	bne.n	d766a <localtime_r+0x2e>
   d765e:	2264      	movs	r2, #100	; 0x64
   d7660:	fb96 f3f2 	sdiv	r3, r6, r2
   d7664:	fb02 6313 	mls	r3, r2, r3, r6
   d7668:	b94b      	cbnz	r3, d767e <localtime_r+0x42>
   d766a:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d766e:	fb96 f3f5 	sdiv	r3, r6, r5
   d7672:	fb05 6513 	mls	r5, r5, r3, r6
   d7676:	fab5 f385 	clz	r3, r5
   d767a:	095b      	lsrs	r3, r3, #5
   d767c:	e000      	b.n	d7680 <localtime_r+0x44>
   d767e:	2301      	movs	r3, #1
   d7680:	4a5f      	ldr	r2, [pc, #380]	; (d7800 <localtime_r+0x1c4>)
   d7682:	2530      	movs	r5, #48	; 0x30
   d7684:	fb05 2503 	mla	r5, r5, r3, r2
   d7688:	f000 fb66 	bl	d7d58 <__tz_lock>
   d768c:	f000 fb66 	bl	d7d5c <_tzset_unlocked>
   d7690:	4b5c      	ldr	r3, [pc, #368]	; (d7804 <localtime_r+0x1c8>)
   d7692:	681b      	ldr	r3, [r3, #0]
   d7694:	b1f3      	cbz	r3, d76d4 <localtime_r+0x98>
   d7696:	687b      	ldr	r3, [r7, #4]
   d7698:	429e      	cmp	r6, r3
   d769a:	d105      	bne.n	d76a8 <localtime_r+0x6c>
   d769c:	6839      	ldr	r1, [r7, #0]
   d769e:	f8d8 3000 	ldr.w	r3, [r8]
   d76a2:	69fa      	ldr	r2, [r7, #28]
   d76a4:	b941      	cbnz	r1, d76b8 <localtime_r+0x7c>
   d76a6:	e00a      	b.n	d76be <localtime_r+0x82>
   d76a8:	4630      	mov	r0, r6
   d76aa:	f000 faad 	bl	d7c08 <__tzcalc_limits>
   d76ae:	2800      	cmp	r0, #0
   d76b0:	d1f4      	bne.n	d769c <localtime_r+0x60>
   d76b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d76b6:	e00d      	b.n	d76d4 <localtime_r+0x98>
   d76b8:	4293      	cmp	r3, r2
   d76ba:	db08      	blt.n	d76ce <localtime_r+0x92>
   d76bc:	e001      	b.n	d76c2 <localtime_r+0x86>
   d76be:	4293      	cmp	r3, r2
   d76c0:	da07      	bge.n	d76d2 <localtime_r+0x96>
   d76c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d76c4:	4293      	cmp	r3, r2
   d76c6:	bfac      	ite	ge
   d76c8:	2300      	movge	r3, #0
   d76ca:	2301      	movlt	r3, #1
   d76cc:	e002      	b.n	d76d4 <localtime_r+0x98>
   d76ce:	2300      	movs	r3, #0
   d76d0:	e000      	b.n	d76d4 <localtime_r+0x98>
   d76d2:	2301      	movs	r3, #1
   d76d4:	6223      	str	r3, [r4, #32]
   d76d6:	6a23      	ldr	r3, [r4, #32]
   d76d8:	2b01      	cmp	r3, #1
   d76da:	bf0c      	ite	eq
   d76dc:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d76de:	6a39      	ldrne	r1, [r7, #32]
   d76e0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d76e4:	203c      	movs	r0, #60	; 0x3c
   d76e6:	fb91 f6f3 	sdiv	r6, r1, r3
   d76ea:	fb03 1316 	mls	r3, r3, r6, r1
   d76ee:	6861      	ldr	r1, [r4, #4]
   d76f0:	fb93 f2f0 	sdiv	r2, r3, r0
   d76f4:	fb00 3012 	mls	r0, r0, r2, r3
   d76f8:	6823      	ldr	r3, [r4, #0]
   d76fa:	1a89      	subs	r1, r1, r2
   d76fc:	68a2      	ldr	r2, [r4, #8]
   d76fe:	6061      	str	r1, [r4, #4]
   d7700:	1a1b      	subs	r3, r3, r0
   d7702:	1b92      	subs	r2, r2, r6
   d7704:	2b3b      	cmp	r3, #59	; 0x3b
   d7706:	6023      	str	r3, [r4, #0]
   d7708:	60a2      	str	r2, [r4, #8]
   d770a:	dd03      	ble.n	d7714 <localtime_r+0xd8>
   d770c:	3101      	adds	r1, #1
   d770e:	6061      	str	r1, [r4, #4]
   d7710:	3b3c      	subs	r3, #60	; 0x3c
   d7712:	e004      	b.n	d771e <localtime_r+0xe2>
   d7714:	2b00      	cmp	r3, #0
   d7716:	da03      	bge.n	d7720 <localtime_r+0xe4>
   d7718:	3901      	subs	r1, #1
   d771a:	6061      	str	r1, [r4, #4]
   d771c:	333c      	adds	r3, #60	; 0x3c
   d771e:	6023      	str	r3, [r4, #0]
   d7720:	6863      	ldr	r3, [r4, #4]
   d7722:	2b3b      	cmp	r3, #59	; 0x3b
   d7724:	dd03      	ble.n	d772e <localtime_r+0xf2>
   d7726:	3201      	adds	r2, #1
   d7728:	60a2      	str	r2, [r4, #8]
   d772a:	3b3c      	subs	r3, #60	; 0x3c
   d772c:	e004      	b.n	d7738 <localtime_r+0xfc>
   d772e:	2b00      	cmp	r3, #0
   d7730:	da03      	bge.n	d773a <localtime_r+0xfe>
   d7732:	3a01      	subs	r2, #1
   d7734:	60a2      	str	r2, [r4, #8]
   d7736:	333c      	adds	r3, #60	; 0x3c
   d7738:	6063      	str	r3, [r4, #4]
   d773a:	68a3      	ldr	r3, [r4, #8]
   d773c:	2b17      	cmp	r3, #23
   d773e:	dd22      	ble.n	d7786 <localtime_r+0x14a>
   d7740:	69e2      	ldr	r2, [r4, #28]
   d7742:	3201      	adds	r2, #1
   d7744:	61e2      	str	r2, [r4, #28]
   d7746:	69a2      	ldr	r2, [r4, #24]
   d7748:	3201      	adds	r2, #1
   d774a:	2a06      	cmp	r2, #6
   d774c:	bfc8      	it	gt
   d774e:	2200      	movgt	r2, #0
   d7750:	61a2      	str	r2, [r4, #24]
   d7752:	68e2      	ldr	r2, [r4, #12]
   d7754:	3b18      	subs	r3, #24
   d7756:	3201      	adds	r2, #1
   d7758:	60a3      	str	r3, [r4, #8]
   d775a:	6923      	ldr	r3, [r4, #16]
   d775c:	60e2      	str	r2, [r4, #12]
   d775e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d7762:	428a      	cmp	r2, r1
   d7764:	dd46      	ble.n	d77f4 <localtime_r+0x1b8>
   d7766:	3301      	adds	r3, #1
   d7768:	2b0c      	cmp	r3, #12
   d776a:	bf0c      	ite	eq
   d776c:	6963      	ldreq	r3, [r4, #20]
   d776e:	6123      	strne	r3, [r4, #16]
   d7770:	eba2 0201 	sub.w	r2, r2, r1
   d7774:	60e2      	str	r2, [r4, #12]
   d7776:	bf01      	itttt	eq
   d7778:	3301      	addeq	r3, #1
   d777a:	2200      	moveq	r2, #0
   d777c:	6122      	streq	r2, [r4, #16]
   d777e:	6163      	streq	r3, [r4, #20]
   d7780:	bf08      	it	eq
   d7782:	61e2      	streq	r2, [r4, #28]
   d7784:	e036      	b.n	d77f4 <localtime_r+0x1b8>
   d7786:	2b00      	cmp	r3, #0
   d7788:	da34      	bge.n	d77f4 <localtime_r+0x1b8>
   d778a:	69e2      	ldr	r2, [r4, #28]
   d778c:	3a01      	subs	r2, #1
   d778e:	61e2      	str	r2, [r4, #28]
   d7790:	69a2      	ldr	r2, [r4, #24]
   d7792:	3a01      	subs	r2, #1
   d7794:	bf48      	it	mi
   d7796:	2206      	movmi	r2, #6
   d7798:	61a2      	str	r2, [r4, #24]
   d779a:	68e2      	ldr	r2, [r4, #12]
   d779c:	3318      	adds	r3, #24
   d779e:	3a01      	subs	r2, #1
   d77a0:	60e2      	str	r2, [r4, #12]
   d77a2:	60a3      	str	r3, [r4, #8]
   d77a4:	bb32      	cbnz	r2, d77f4 <localtime_r+0x1b8>
   d77a6:	6923      	ldr	r3, [r4, #16]
   d77a8:	3b01      	subs	r3, #1
   d77aa:	d401      	bmi.n	d77b0 <localtime_r+0x174>
   d77ac:	6123      	str	r3, [r4, #16]
   d77ae:	e01d      	b.n	d77ec <localtime_r+0x1b0>
   d77b0:	230b      	movs	r3, #11
   d77b2:	6123      	str	r3, [r4, #16]
   d77b4:	6963      	ldr	r3, [r4, #20]
   d77b6:	1e5a      	subs	r2, r3, #1
   d77b8:	f012 0f03 	tst.w	r2, #3
   d77bc:	6162      	str	r2, [r4, #20]
   d77be:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d77c2:	d105      	bne.n	d77d0 <localtime_r+0x194>
   d77c4:	2164      	movs	r1, #100	; 0x64
   d77c6:	fb93 f2f1 	sdiv	r2, r3, r1
   d77ca:	fb01 3212 	mls	r2, r1, r2, r3
   d77ce:	b94a      	cbnz	r2, d77e4 <localtime_r+0x1a8>
   d77d0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d77d4:	fb93 f2f1 	sdiv	r2, r3, r1
   d77d8:	fb01 3312 	mls	r3, r1, r2, r3
   d77dc:	fab3 f383 	clz	r3, r3
   d77e0:	095b      	lsrs	r3, r3, #5
   d77e2:	e000      	b.n	d77e6 <localtime_r+0x1aa>
   d77e4:	2301      	movs	r3, #1
   d77e6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d77ea:	61e3      	str	r3, [r4, #28]
   d77ec:	6923      	ldr	r3, [r4, #16]
   d77ee:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d77f2:	60e3      	str	r3, [r4, #12]
   d77f4:	f000 fab1 	bl	d7d5a <__tz_unlock>
   d77f8:	4620      	mov	r0, r4
   d77fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d77fe:	bf00      	nop
   d7800:	000d8b44 	.word	0x000d8b44
   d7804:	2003e7e4 	.word	0x2003e7e4

000d7808 <ldiv>:
   d7808:	2900      	cmp	r1, #0
   d780a:	b510      	push	{r4, lr}
   d780c:	fb91 f4f2 	sdiv	r4, r1, r2
   d7810:	fb02 1314 	mls	r3, r2, r4, r1
   d7814:	db04      	blt.n	d7820 <ldiv+0x18>
   d7816:	2b00      	cmp	r3, #0
   d7818:	da07      	bge.n	d782a <ldiv+0x22>
   d781a:	3401      	adds	r4, #1
   d781c:	1a9b      	subs	r3, r3, r2
   d781e:	e004      	b.n	d782a <ldiv+0x22>
   d7820:	2b00      	cmp	r3, #0
   d7822:	bfc4      	itt	gt
   d7824:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   d7828:	189b      	addgt	r3, r3, r2
   d782a:	6004      	str	r4, [r0, #0]
   d782c:	6043      	str	r3, [r0, #4]
   d782e:	bd10      	pop	{r4, pc}

000d7830 <memcpy>:
   d7830:	b510      	push	{r4, lr}
   d7832:	1e43      	subs	r3, r0, #1
   d7834:	440a      	add	r2, r1
   d7836:	4291      	cmp	r1, r2
   d7838:	d004      	beq.n	d7844 <memcpy+0x14>
   d783a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d783e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7842:	e7f8      	b.n	d7836 <memcpy+0x6>
   d7844:	bd10      	pop	{r4, pc}

000d7846 <memset>:
   d7846:	4402      	add	r2, r0
   d7848:	4603      	mov	r3, r0
   d784a:	4293      	cmp	r3, r2
   d784c:	d002      	beq.n	d7854 <memset+0xe>
   d784e:	f803 1b01 	strb.w	r1, [r3], #1
   d7852:	e7fa      	b.n	d784a <memset+0x4>
   d7854:	4770      	bx	lr
	...

000d7858 <srand>:
   d7858:	b538      	push	{r3, r4, r5, lr}
   d785a:	4b12      	ldr	r3, [pc, #72]	; (d78a4 <srand+0x4c>)
   d785c:	681c      	ldr	r4, [r3, #0]
   d785e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7860:	4605      	mov	r5, r0
   d7862:	b9d3      	cbnz	r3, d789a <srand+0x42>
   d7864:	2018      	movs	r0, #24
   d7866:	f7fd ff67 	bl	d5738 <malloc>
   d786a:	f243 330e 	movw	r3, #13070	; 0x330e
   d786e:	63a0      	str	r0, [r4, #56]	; 0x38
   d7870:	8003      	strh	r3, [r0, #0]
   d7872:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7876:	8043      	strh	r3, [r0, #2]
   d7878:	f241 2334 	movw	r3, #4660	; 0x1234
   d787c:	8083      	strh	r3, [r0, #4]
   d787e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7882:	80c3      	strh	r3, [r0, #6]
   d7884:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7888:	8103      	strh	r3, [r0, #8]
   d788a:	2305      	movs	r3, #5
   d788c:	8143      	strh	r3, [r0, #10]
   d788e:	230b      	movs	r3, #11
   d7890:	8183      	strh	r3, [r0, #12]
   d7892:	2201      	movs	r2, #1
   d7894:	2300      	movs	r3, #0
   d7896:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d789a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d789c:	2200      	movs	r2, #0
   d789e:	611d      	str	r5, [r3, #16]
   d78a0:	615a      	str	r2, [r3, #20]
   d78a2:	bd38      	pop	{r3, r4, r5, pc}
   d78a4:	2003e130 	.word	0x2003e130

000d78a8 <rand>:
   d78a8:	4b19      	ldr	r3, [pc, #100]	; (d7910 <rand+0x68>)
   d78aa:	b510      	push	{r4, lr}
   d78ac:	681c      	ldr	r4, [r3, #0]
   d78ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d78b0:	b9d3      	cbnz	r3, d78e8 <rand+0x40>
   d78b2:	2018      	movs	r0, #24
   d78b4:	f7fd ff40 	bl	d5738 <malloc>
   d78b8:	f243 330e 	movw	r3, #13070	; 0x330e
   d78bc:	63a0      	str	r0, [r4, #56]	; 0x38
   d78be:	8003      	strh	r3, [r0, #0]
   d78c0:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d78c4:	8043      	strh	r3, [r0, #2]
   d78c6:	f241 2334 	movw	r3, #4660	; 0x1234
   d78ca:	8083      	strh	r3, [r0, #4]
   d78cc:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d78d0:	80c3      	strh	r3, [r0, #6]
   d78d2:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d78d6:	8103      	strh	r3, [r0, #8]
   d78d8:	2305      	movs	r3, #5
   d78da:	8143      	strh	r3, [r0, #10]
   d78dc:	230b      	movs	r3, #11
   d78de:	8183      	strh	r3, [r0, #12]
   d78e0:	2201      	movs	r2, #1
   d78e2:	2300      	movs	r3, #0
   d78e4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d78e8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d78ea:	4c0a      	ldr	r4, [pc, #40]	; (d7914 <rand+0x6c>)
   d78ec:	690b      	ldr	r3, [r1, #16]
   d78ee:	6948      	ldr	r0, [r1, #20]
   d78f0:	4a09      	ldr	r2, [pc, #36]	; (d7918 <rand+0x70>)
   d78f2:	435c      	muls	r4, r3
   d78f4:	fb02 4000 	mla	r0, r2, r0, r4
   d78f8:	fba3 2302 	umull	r2, r3, r3, r2
   d78fc:	3201      	adds	r2, #1
   d78fe:	4403      	add	r3, r0
   d7900:	f143 0300 	adc.w	r3, r3, #0
   d7904:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d7908:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d790c:	bd10      	pop	{r4, pc}
   d790e:	bf00      	nop
   d7910:	2003e130 	.word	0x2003e130
   d7914:	5851f42d 	.word	0x5851f42d
   d7918:	4c957f2d 	.word	0x4c957f2d

000d791c <strcmp>:
   d791c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7920:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7924:	2a01      	cmp	r2, #1
   d7926:	bf28      	it	cs
   d7928:	429a      	cmpcs	r2, r3
   d792a:	d0f7      	beq.n	d791c <strcmp>
   d792c:	1ad0      	subs	r0, r2, r3
   d792e:	4770      	bx	lr

000d7930 <strcpy>:
   d7930:	4603      	mov	r3, r0
   d7932:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7936:	f803 2b01 	strb.w	r2, [r3], #1
   d793a:	2a00      	cmp	r2, #0
   d793c:	d1f9      	bne.n	d7932 <strcpy+0x2>
   d793e:	4770      	bx	lr

000d7940 <strdup>:
   d7940:	4b02      	ldr	r3, [pc, #8]	; (d794c <strdup+0xc>)
   d7942:	4601      	mov	r1, r0
   d7944:	6818      	ldr	r0, [r3, #0]
   d7946:	f000 b803 	b.w	d7950 <_strdup_r>
   d794a:	bf00      	nop
   d794c:	2003e130 	.word	0x2003e130

000d7950 <_strdup_r>:
   d7950:	b570      	push	{r4, r5, r6, lr}
   d7952:	4606      	mov	r6, r0
   d7954:	4608      	mov	r0, r1
   d7956:	460c      	mov	r4, r1
   d7958:	f000 f80d 	bl	d7976 <strlen>
   d795c:	1c45      	adds	r5, r0, #1
   d795e:	4629      	mov	r1, r5
   d7960:	4630      	mov	r0, r6
   d7962:	f7fd ff21 	bl	d57a8 <_malloc_r>
   d7966:	4606      	mov	r6, r0
   d7968:	b118      	cbz	r0, d7972 <_strdup_r+0x22>
   d796a:	462a      	mov	r2, r5
   d796c:	4621      	mov	r1, r4
   d796e:	f7ff ff5f 	bl	d7830 <memcpy>
   d7972:	4630      	mov	r0, r6
   d7974:	bd70      	pop	{r4, r5, r6, pc}

000d7976 <strlen>:
   d7976:	4603      	mov	r3, r0
   d7978:	f813 2b01 	ldrb.w	r2, [r3], #1
   d797c:	2a00      	cmp	r2, #0
   d797e:	d1fb      	bne.n	d7978 <strlen+0x2>
   d7980:	1a18      	subs	r0, r3, r0
   d7982:	3801      	subs	r0, #1
   d7984:	4770      	bx	lr

000d7986 <strncmp>:
   d7986:	b530      	push	{r4, r5, lr}
   d7988:	b182      	cbz	r2, d79ac <strncmp+0x26>
   d798a:	1e45      	subs	r5, r0, #1
   d798c:	3901      	subs	r1, #1
   d798e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d7992:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7996:	42a3      	cmp	r3, r4
   d7998:	d106      	bne.n	d79a8 <strncmp+0x22>
   d799a:	43ec      	mvns	r4, r5
   d799c:	4414      	add	r4, r2
   d799e:	42e0      	cmn	r0, r4
   d79a0:	d001      	beq.n	d79a6 <strncmp+0x20>
   d79a2:	2b00      	cmp	r3, #0
   d79a4:	d1f3      	bne.n	d798e <strncmp+0x8>
   d79a6:	461c      	mov	r4, r3
   d79a8:	1b18      	subs	r0, r3, r4
   d79aa:	bd30      	pop	{r4, r5, pc}
   d79ac:	4610      	mov	r0, r2
   d79ae:	bd30      	pop	{r4, r5, pc}

000d79b0 <strncpy>:
   d79b0:	b510      	push	{r4, lr}
   d79b2:	4603      	mov	r3, r0
   d79b4:	b142      	cbz	r2, d79c8 <strncpy+0x18>
   d79b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d79ba:	f803 4b01 	strb.w	r4, [r3], #1
   d79be:	3a01      	subs	r2, #1
   d79c0:	2c00      	cmp	r4, #0
   d79c2:	d1f7      	bne.n	d79b4 <strncpy+0x4>
   d79c4:	441a      	add	r2, r3
   d79c6:	e000      	b.n	d79ca <strncpy+0x1a>
   d79c8:	bd10      	pop	{r4, pc}
   d79ca:	4293      	cmp	r3, r2
   d79cc:	d002      	beq.n	d79d4 <strncpy+0x24>
   d79ce:	f803 4b01 	strb.w	r4, [r3], #1
   d79d2:	e7fa      	b.n	d79ca <strncpy+0x1a>
   d79d4:	bd10      	pop	{r4, pc}
	...

000d79d8 <_strtol_r>:
   d79d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d79dc:	4680      	mov	r8, r0
   d79de:	4840      	ldr	r0, [pc, #256]	; (d7ae0 <_strtol_r+0x108>)
   d79e0:	f8d0 9000 	ldr.w	r9, [r0]
   d79e4:	460f      	mov	r7, r1
   d79e6:	463d      	mov	r5, r7
   d79e8:	f815 4b01 	ldrb.w	r4, [r5], #1
   d79ec:	eb09 0004 	add.w	r0, r9, r4
   d79f0:	7840      	ldrb	r0, [r0, #1]
   d79f2:	f000 0008 	and.w	r0, r0, #8
   d79f6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d79fa:	b108      	cbz	r0, d7a00 <_strtol_r+0x28>
   d79fc:	462f      	mov	r7, r5
   d79fe:	e7f2      	b.n	d79e6 <_strtol_r+0xe>
   d7a00:	2c2d      	cmp	r4, #45	; 0x2d
   d7a02:	d103      	bne.n	d7a0c <_strtol_r+0x34>
   d7a04:	1cbd      	adds	r5, r7, #2
   d7a06:	787c      	ldrb	r4, [r7, #1]
   d7a08:	2601      	movs	r6, #1
   d7a0a:	e003      	b.n	d7a14 <_strtol_r+0x3c>
   d7a0c:	2c2b      	cmp	r4, #43	; 0x2b
   d7a0e:	bf04      	itt	eq
   d7a10:	787c      	ldrbeq	r4, [r7, #1]
   d7a12:	1cbd      	addeq	r5, r7, #2
   d7a14:	b113      	cbz	r3, d7a1c <_strtol_r+0x44>
   d7a16:	2b10      	cmp	r3, #16
   d7a18:	d10a      	bne.n	d7a30 <_strtol_r+0x58>
   d7a1a:	e05b      	b.n	d7ad4 <_strtol_r+0xfc>
   d7a1c:	2c30      	cmp	r4, #48	; 0x30
   d7a1e:	d157      	bne.n	d7ad0 <_strtol_r+0xf8>
   d7a20:	7828      	ldrb	r0, [r5, #0]
   d7a22:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7a26:	2858      	cmp	r0, #88	; 0x58
   d7a28:	d14d      	bne.n	d7ac6 <_strtol_r+0xee>
   d7a2a:	786c      	ldrb	r4, [r5, #1]
   d7a2c:	2310      	movs	r3, #16
   d7a2e:	3502      	adds	r5, #2
   d7a30:	2e00      	cmp	r6, #0
   d7a32:	bf14      	ite	ne
   d7a34:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d7a38:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d7a3c:	2700      	movs	r7, #0
   d7a3e:	fbbc faf3 	udiv	sl, ip, r3
   d7a42:	4638      	mov	r0, r7
   d7a44:	fb03 cc1a 	mls	ip, r3, sl, ip
   d7a48:	eb09 0e04 	add.w	lr, r9, r4
   d7a4c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7a50:	f01e 0f04 	tst.w	lr, #4
   d7a54:	d001      	beq.n	d7a5a <_strtol_r+0x82>
   d7a56:	3c30      	subs	r4, #48	; 0x30
   d7a58:	e00b      	b.n	d7a72 <_strtol_r+0x9a>
   d7a5a:	f01e 0e03 	ands.w	lr, lr, #3
   d7a5e:	d01b      	beq.n	d7a98 <_strtol_r+0xc0>
   d7a60:	f1be 0f01 	cmp.w	lr, #1
   d7a64:	bf0c      	ite	eq
   d7a66:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7a6a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7a6e:	ebce 0404 	rsb	r4, lr, r4
   d7a72:	42a3      	cmp	r3, r4
   d7a74:	dd10      	ble.n	d7a98 <_strtol_r+0xc0>
   d7a76:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d7a7a:	d00a      	beq.n	d7a92 <_strtol_r+0xba>
   d7a7c:	4550      	cmp	r0, sl
   d7a7e:	d806      	bhi.n	d7a8e <_strtol_r+0xb6>
   d7a80:	d101      	bne.n	d7a86 <_strtol_r+0xae>
   d7a82:	4564      	cmp	r4, ip
   d7a84:	dc03      	bgt.n	d7a8e <_strtol_r+0xb6>
   d7a86:	fb03 4000 	mla	r0, r3, r0, r4
   d7a8a:	2701      	movs	r7, #1
   d7a8c:	e001      	b.n	d7a92 <_strtol_r+0xba>
   d7a8e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d7a92:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7a96:	e7d7      	b.n	d7a48 <_strtol_r+0x70>
   d7a98:	1c7b      	adds	r3, r7, #1
   d7a9a:	d10c      	bne.n	d7ab6 <_strtol_r+0xde>
   d7a9c:	2e00      	cmp	r6, #0
   d7a9e:	f04f 0322 	mov.w	r3, #34	; 0x22
   d7aa2:	bf14      	ite	ne
   d7aa4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d7aa8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7aac:	f8c8 3000 	str.w	r3, [r8]
   d7ab0:	b92a      	cbnz	r2, d7abe <_strtol_r+0xe6>
   d7ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7ab6:	b106      	cbz	r6, d7aba <_strtol_r+0xe2>
   d7ab8:	4240      	negs	r0, r0
   d7aba:	b172      	cbz	r2, d7ada <_strtol_r+0x102>
   d7abc:	b107      	cbz	r7, d7ac0 <_strtol_r+0xe8>
   d7abe:	1e69      	subs	r1, r5, #1
   d7ac0:	6011      	str	r1, [r2, #0]
   d7ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7ac6:	2430      	movs	r4, #48	; 0x30
   d7ac8:	2b00      	cmp	r3, #0
   d7aca:	d1b1      	bne.n	d7a30 <_strtol_r+0x58>
   d7acc:	2308      	movs	r3, #8
   d7ace:	e7af      	b.n	d7a30 <_strtol_r+0x58>
   d7ad0:	230a      	movs	r3, #10
   d7ad2:	e7ad      	b.n	d7a30 <_strtol_r+0x58>
   d7ad4:	2c30      	cmp	r4, #48	; 0x30
   d7ad6:	d0a3      	beq.n	d7a20 <_strtol_r+0x48>
   d7ad8:	e7aa      	b.n	d7a30 <_strtol_r+0x58>
   d7ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7ade:	bf00      	nop
   d7ae0:	2003e0cc 	.word	0x2003e0cc

000d7ae4 <strtol>:
   d7ae4:	4613      	mov	r3, r2
   d7ae6:	460a      	mov	r2, r1
   d7ae8:	4601      	mov	r1, r0
   d7aea:	4802      	ldr	r0, [pc, #8]	; (d7af4 <strtol+0x10>)
   d7aec:	6800      	ldr	r0, [r0, #0]
   d7aee:	f7ff bf73 	b.w	d79d8 <_strtol_r>
   d7af2:	bf00      	nop
   d7af4:	2003e130 	.word	0x2003e130

000d7af8 <_strtoul_r>:
   d7af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7afc:	4680      	mov	r8, r0
   d7afe:	483c      	ldr	r0, [pc, #240]	; (d7bf0 <_strtoul_r+0xf8>)
   d7b00:	f8d0 9000 	ldr.w	r9, [r0]
   d7b04:	460e      	mov	r6, r1
   d7b06:	4635      	mov	r5, r6
   d7b08:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7b0c:	eb09 0004 	add.w	r0, r9, r4
   d7b10:	7840      	ldrb	r0, [r0, #1]
   d7b12:	f000 0008 	and.w	r0, r0, #8
   d7b16:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d7b1a:	b108      	cbz	r0, d7b20 <_strtoul_r+0x28>
   d7b1c:	462e      	mov	r6, r5
   d7b1e:	e7f2      	b.n	d7b06 <_strtoul_r+0xe>
   d7b20:	2c2d      	cmp	r4, #45	; 0x2d
   d7b22:	d103      	bne.n	d7b2c <_strtoul_r+0x34>
   d7b24:	1cb5      	adds	r5, r6, #2
   d7b26:	7874      	ldrb	r4, [r6, #1]
   d7b28:	2701      	movs	r7, #1
   d7b2a:	e003      	b.n	d7b34 <_strtoul_r+0x3c>
   d7b2c:	2c2b      	cmp	r4, #43	; 0x2b
   d7b2e:	bf04      	itt	eq
   d7b30:	7874      	ldrbeq	r4, [r6, #1]
   d7b32:	1cb5      	addeq	r5, r6, #2
   d7b34:	b113      	cbz	r3, d7b3c <_strtoul_r+0x44>
   d7b36:	2b10      	cmp	r3, #16
   d7b38:	d10a      	bne.n	d7b50 <_strtoul_r+0x58>
   d7b3a:	e053      	b.n	d7be4 <_strtoul_r+0xec>
   d7b3c:	2c30      	cmp	r4, #48	; 0x30
   d7b3e:	d14f      	bne.n	d7be0 <_strtoul_r+0xe8>
   d7b40:	7828      	ldrb	r0, [r5, #0]
   d7b42:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7b46:	2858      	cmp	r0, #88	; 0x58
   d7b48:	d145      	bne.n	d7bd6 <_strtoul_r+0xde>
   d7b4a:	786c      	ldrb	r4, [r5, #1]
   d7b4c:	2310      	movs	r3, #16
   d7b4e:	3502      	adds	r5, #2
   d7b50:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7b54:	2600      	movs	r6, #0
   d7b56:	fbbc fcf3 	udiv	ip, ip, r3
   d7b5a:	fb03 fa0c 	mul.w	sl, r3, ip
   d7b5e:	ea6f 0a0a 	mvn.w	sl, sl
   d7b62:	4630      	mov	r0, r6
   d7b64:	eb09 0e04 	add.w	lr, r9, r4
   d7b68:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7b6c:	f01e 0f04 	tst.w	lr, #4
   d7b70:	d001      	beq.n	d7b76 <_strtoul_r+0x7e>
   d7b72:	3c30      	subs	r4, #48	; 0x30
   d7b74:	e00b      	b.n	d7b8e <_strtoul_r+0x96>
   d7b76:	f01e 0e03 	ands.w	lr, lr, #3
   d7b7a:	d01a      	beq.n	d7bb2 <_strtoul_r+0xba>
   d7b7c:	f1be 0f01 	cmp.w	lr, #1
   d7b80:	bf0c      	ite	eq
   d7b82:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7b86:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7b8a:	ebce 0404 	rsb	r4, lr, r4
   d7b8e:	42a3      	cmp	r3, r4
   d7b90:	dd0f      	ble.n	d7bb2 <_strtoul_r+0xba>
   d7b92:	2e00      	cmp	r6, #0
   d7b94:	db08      	blt.n	d7ba8 <_strtoul_r+0xb0>
   d7b96:	4560      	cmp	r0, ip
   d7b98:	d806      	bhi.n	d7ba8 <_strtoul_r+0xb0>
   d7b9a:	d101      	bne.n	d7ba0 <_strtoul_r+0xa8>
   d7b9c:	4554      	cmp	r4, sl
   d7b9e:	dc03      	bgt.n	d7ba8 <_strtoul_r+0xb0>
   d7ba0:	fb03 4000 	mla	r0, r3, r0, r4
   d7ba4:	2601      	movs	r6, #1
   d7ba6:	e001      	b.n	d7bac <_strtoul_r+0xb4>
   d7ba8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d7bac:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7bb0:	e7d8      	b.n	d7b64 <_strtoul_r+0x6c>
   d7bb2:	2e00      	cmp	r6, #0
   d7bb4:	da07      	bge.n	d7bc6 <_strtoul_r+0xce>
   d7bb6:	2322      	movs	r3, #34	; 0x22
   d7bb8:	f8c8 3000 	str.w	r3, [r8]
   d7bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7bc0:	b92a      	cbnz	r2, d7bce <_strtoul_r+0xd6>
   d7bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7bc6:	b107      	cbz	r7, d7bca <_strtoul_r+0xd2>
   d7bc8:	4240      	negs	r0, r0
   d7bca:	b172      	cbz	r2, d7bea <_strtoul_r+0xf2>
   d7bcc:	b106      	cbz	r6, d7bd0 <_strtoul_r+0xd8>
   d7bce:	1e69      	subs	r1, r5, #1
   d7bd0:	6011      	str	r1, [r2, #0]
   d7bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7bd6:	2430      	movs	r4, #48	; 0x30
   d7bd8:	2b00      	cmp	r3, #0
   d7bda:	d1b9      	bne.n	d7b50 <_strtoul_r+0x58>
   d7bdc:	2308      	movs	r3, #8
   d7bde:	e7b7      	b.n	d7b50 <_strtoul_r+0x58>
   d7be0:	230a      	movs	r3, #10
   d7be2:	e7b5      	b.n	d7b50 <_strtoul_r+0x58>
   d7be4:	2c30      	cmp	r4, #48	; 0x30
   d7be6:	d0ab      	beq.n	d7b40 <_strtoul_r+0x48>
   d7be8:	e7b2      	b.n	d7b50 <_strtoul_r+0x58>
   d7bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7bee:	bf00      	nop
   d7bf0:	2003e0cc 	.word	0x2003e0cc

000d7bf4 <strtoul>:
   d7bf4:	4613      	mov	r3, r2
   d7bf6:	460a      	mov	r2, r1
   d7bf8:	4601      	mov	r1, r0
   d7bfa:	4802      	ldr	r0, [pc, #8]	; (d7c04 <strtoul+0x10>)
   d7bfc:	6800      	ldr	r0, [r0, #0]
   d7bfe:	f7ff bf7b 	b.w	d7af8 <_strtoul_r>
   d7c02:	bf00      	nop
   d7c04:	2003e130 	.word	0x2003e130

000d7c08 <__tzcalc_limits>:
   d7c08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7c0c:	4604      	mov	r4, r0
   d7c0e:	f000 fa6f 	bl	d80f0 <__gettzinfo>
   d7c12:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d7c16:	429c      	cmp	r4, r3
   d7c18:	f340 8096 	ble.w	d7d48 <__tzcalc_limits+0x140>
   d7c1c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d7c20:	18e3      	adds	r3, r4, r3
   d7c22:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d7c26:	109b      	asrs	r3, r3, #2
   d7c28:	f240 156d 	movw	r5, #365	; 0x16d
   d7c2c:	fb05 3502 	mla	r5, r5, r2, r3
   d7c30:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d7c34:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d7c38:	fb92 f3f3 	sdiv	r3, r2, r3
   d7c3c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d7c40:	442b      	add	r3, r5
   d7c42:	18a5      	adds	r5, r4, r2
   d7c44:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7c48:	fb95 f5f2 	sdiv	r5, r5, r2
   d7c4c:	441d      	add	r5, r3
   d7c4e:	2364      	movs	r3, #100	; 0x64
   d7c50:	fb94 f7f2 	sdiv	r7, r4, r2
   d7c54:	fb94 f6f3 	sdiv	r6, r4, r3
   d7c58:	fb02 4717 	mls	r7, r2, r7, r4
   d7c5c:	fb03 4616 	mls	r6, r3, r6, r4
   d7c60:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d7c64:	fab7 fe87 	clz	lr, r7
   d7c68:	9301      	str	r3, [sp, #4]
   d7c6a:	f004 0303 	and.w	r3, r4, #3
   d7c6e:	6044      	str	r4, [r0, #4]
   d7c70:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d7c74:	4601      	mov	r1, r0
   d7c76:	9300      	str	r3, [sp, #0]
   d7c78:	f04f 0c07 	mov.w	ip, #7
   d7c7c:	7a0b      	ldrb	r3, [r1, #8]
   d7c7e:	2b4a      	cmp	r3, #74	; 0x4a
   d7c80:	d10e      	bne.n	d7ca0 <__tzcalc_limits+0x98>
   d7c82:	694b      	ldr	r3, [r1, #20]
   d7c84:	9a00      	ldr	r2, [sp, #0]
   d7c86:	18ec      	adds	r4, r5, r3
   d7c88:	b902      	cbnz	r2, d7c8c <__tzcalc_limits+0x84>
   d7c8a:	b906      	cbnz	r6, d7c8e <__tzcalc_limits+0x86>
   d7c8c:	b927      	cbnz	r7, d7c98 <__tzcalc_limits+0x90>
   d7c8e:	2b3b      	cmp	r3, #59	; 0x3b
   d7c90:	bfd4      	ite	le
   d7c92:	2300      	movle	r3, #0
   d7c94:	2301      	movgt	r3, #1
   d7c96:	e000      	b.n	d7c9a <__tzcalc_limits+0x92>
   d7c98:	2300      	movs	r3, #0
   d7c9a:	4423      	add	r3, r4
   d7c9c:	3b01      	subs	r3, #1
   d7c9e:	e03f      	b.n	d7d20 <__tzcalc_limits+0x118>
   d7ca0:	2b44      	cmp	r3, #68	; 0x44
   d7ca2:	d102      	bne.n	d7caa <__tzcalc_limits+0xa2>
   d7ca4:	694b      	ldr	r3, [r1, #20]
   d7ca6:	442b      	add	r3, r5
   d7ca8:	e03a      	b.n	d7d20 <__tzcalc_limits+0x118>
   d7caa:	9b00      	ldr	r3, [sp, #0]
   d7cac:	b92b      	cbnz	r3, d7cba <__tzcalc_limits+0xb2>
   d7cae:	2e00      	cmp	r6, #0
   d7cb0:	bf0c      	ite	eq
   d7cb2:	46f0      	moveq	r8, lr
   d7cb4:	f04f 0801 	movne.w	r8, #1
   d7cb8:	e000      	b.n	d7cbc <__tzcalc_limits+0xb4>
   d7cba:	46f0      	mov	r8, lr
   d7cbc:	4b24      	ldr	r3, [pc, #144]	; (d7d50 <__tzcalc_limits+0x148>)
   d7cbe:	68cc      	ldr	r4, [r1, #12]
   d7cc0:	2230      	movs	r2, #48	; 0x30
   d7cc2:	fb02 3808 	mla	r8, r2, r8, r3
   d7cc6:	f1a8 0a04 	sub.w	sl, r8, #4
   d7cca:	46a9      	mov	r9, r5
   d7ccc:	2301      	movs	r3, #1
   d7cce:	42a3      	cmp	r3, r4
   d7cd0:	da04      	bge.n	d7cdc <__tzcalc_limits+0xd4>
   d7cd2:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d7cd6:	3301      	adds	r3, #1
   d7cd8:	44d9      	add	r9, fp
   d7cda:	e7f8      	b.n	d7cce <__tzcalc_limits+0xc6>
   d7cdc:	f109 0304 	add.w	r3, r9, #4
   d7ce0:	fb93 fbfc 	sdiv	fp, r3, ip
   d7ce4:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d7ce8:	2c01      	cmp	r4, #1
   d7cea:	ebca 0a03 	rsb	sl, sl, r3
   d7cee:	694b      	ldr	r3, [r1, #20]
   d7cf0:	bfb8      	it	lt
   d7cf2:	2401      	movlt	r4, #1
   d7cf4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d7cf8:	ebb3 0a0a 	subs.w	sl, r3, sl
   d7cfc:	690b      	ldr	r3, [r1, #16]
   d7cfe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d7d02:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d7d06:	bf48      	it	mi
   d7d08:	f10a 0a07 	addmi.w	sl, sl, #7
   d7d0c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7d10:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d7d14:	4453      	add	r3, sl
   d7d16:	42a3      	cmp	r3, r4
   d7d18:	db01      	blt.n	d7d1e <__tzcalc_limits+0x116>
   d7d1a:	3b07      	subs	r3, #7
   d7d1c:	e7fb      	b.n	d7d16 <__tzcalc_limits+0x10e>
   d7d1e:	444b      	add	r3, r9
   d7d20:	698c      	ldr	r4, [r1, #24]
   d7d22:	4a0c      	ldr	r2, [pc, #48]	; (d7d54 <__tzcalc_limits+0x14c>)
   d7d24:	fb02 4303 	mla	r3, r2, r3, r4
   d7d28:	6a0c      	ldr	r4, [r1, #32]
   d7d2a:	4423      	add	r3, r4
   d7d2c:	f841 3f1c 	str.w	r3, [r1, #28]!
   d7d30:	9b01      	ldr	r3, [sp, #4]
   d7d32:	4299      	cmp	r1, r3
   d7d34:	d1a2      	bne.n	d7c7c <__tzcalc_limits+0x74>
   d7d36:	69c3      	ldr	r3, [r0, #28]
   d7d38:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d7d3a:	4293      	cmp	r3, r2
   d7d3c:	bfac      	ite	ge
   d7d3e:	2300      	movge	r3, #0
   d7d40:	2301      	movlt	r3, #1
   d7d42:	6003      	str	r3, [r0, #0]
   d7d44:	2001      	movs	r0, #1
   d7d46:	e000      	b.n	d7d4a <__tzcalc_limits+0x142>
   d7d48:	2000      	movs	r0, #0
   d7d4a:	b003      	add	sp, #12
   d7d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7d50:	000d8b44 	.word	0x000d8b44
   d7d54:	00015180 	.word	0x00015180

000d7d58 <__tz_lock>:
   d7d58:	4770      	bx	lr

000d7d5a <__tz_unlock>:
   d7d5a:	4770      	bx	lr

000d7d5c <_tzset_unlocked>:
   d7d5c:	4b01      	ldr	r3, [pc, #4]	; (d7d64 <_tzset_unlocked+0x8>)
   d7d5e:	6818      	ldr	r0, [r3, #0]
   d7d60:	f000 b802 	b.w	d7d68 <_tzset_unlocked_r>
   d7d64:	2003e130 	.word	0x2003e130

000d7d68 <_tzset_unlocked_r>:
   d7d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7d6c:	b08d      	sub	sp, #52	; 0x34
   d7d6e:	4607      	mov	r7, r0
   d7d70:	f000 f9be 	bl	d80f0 <__gettzinfo>
   d7d74:	49b0      	ldr	r1, [pc, #704]	; (d8038 <_tzset_unlocked_r+0x2d0>)
   d7d76:	4eb1      	ldr	r6, [pc, #708]	; (d803c <_tzset_unlocked_r+0x2d4>)
   d7d78:	4604      	mov	r4, r0
   d7d7a:	4638      	mov	r0, r7
   d7d7c:	f000 f9b0 	bl	d80e0 <_getenv_r>
   d7d80:	4605      	mov	r5, r0
   d7d82:	b960      	cbnz	r0, d7d9e <_tzset_unlocked_r+0x36>
   d7d84:	4bae      	ldr	r3, [pc, #696]	; (d8040 <_tzset_unlocked_r+0x2d8>)
   d7d86:	4aaf      	ldr	r2, [pc, #700]	; (d8044 <_tzset_unlocked_r+0x2dc>)
   d7d88:	6018      	str	r0, [r3, #0]
   d7d8a:	4baf      	ldr	r3, [pc, #700]	; (d8048 <_tzset_unlocked_r+0x2e0>)
   d7d8c:	6018      	str	r0, [r3, #0]
   d7d8e:	4baf      	ldr	r3, [pc, #700]	; (d804c <_tzset_unlocked_r+0x2e4>)
   d7d90:	6830      	ldr	r0, [r6, #0]
   d7d92:	601a      	str	r2, [r3, #0]
   d7d94:	605a      	str	r2, [r3, #4]
   d7d96:	f7fd fcd7 	bl	d5748 <free>
   d7d9a:	6035      	str	r5, [r6, #0]
   d7d9c:	e148      	b.n	d8030 <_tzset_unlocked_r+0x2c8>
   d7d9e:	6831      	ldr	r1, [r6, #0]
   d7da0:	b979      	cbnz	r1, d7dc2 <_tzset_unlocked_r+0x5a>
   d7da2:	6830      	ldr	r0, [r6, #0]
   d7da4:	f7fd fcd0 	bl	d5748 <free>
   d7da8:	4628      	mov	r0, r5
   d7daa:	f7ff fde4 	bl	d7976 <strlen>
   d7dae:	1c41      	adds	r1, r0, #1
   d7db0:	4638      	mov	r0, r7
   d7db2:	f7fd fcf9 	bl	d57a8 <_malloc_r>
   d7db6:	6030      	str	r0, [r6, #0]
   d7db8:	b148      	cbz	r0, d7dce <_tzset_unlocked_r+0x66>
   d7dba:	4629      	mov	r1, r5
   d7dbc:	f7ff fdb8 	bl	d7930 <strcpy>
   d7dc0:	e005      	b.n	d7dce <_tzset_unlocked_r+0x66>
   d7dc2:	f7ff fdab 	bl	d791c <strcmp>
   d7dc6:	2800      	cmp	r0, #0
   d7dc8:	f000 8132 	beq.w	d8030 <_tzset_unlocked_r+0x2c8>
   d7dcc:	e7e9      	b.n	d7da2 <_tzset_unlocked_r+0x3a>
   d7dce:	782b      	ldrb	r3, [r5, #0]
   d7dd0:	4a9f      	ldr	r2, [pc, #636]	; (d8050 <_tzset_unlocked_r+0x2e8>)
   d7dd2:	49a0      	ldr	r1, [pc, #640]	; (d8054 <_tzset_unlocked_r+0x2ec>)
   d7dd4:	2b3a      	cmp	r3, #58	; 0x3a
   d7dd6:	bf08      	it	eq
   d7dd8:	3501      	addeq	r5, #1
   d7dda:	ae0a      	add	r6, sp, #40	; 0x28
   d7ddc:	4633      	mov	r3, r6
   d7dde:	4628      	mov	r0, r5
   d7de0:	f7fd fcca 	bl	d5778 <siscanf>
   d7de4:	2800      	cmp	r0, #0
   d7de6:	f340 8123 	ble.w	d8030 <_tzset_unlocked_r+0x2c8>
   d7dea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7dec:	18ef      	adds	r7, r5, r3
   d7dee:	5ceb      	ldrb	r3, [r5, r3]
   d7df0:	2b2d      	cmp	r3, #45	; 0x2d
   d7df2:	d103      	bne.n	d7dfc <_tzset_unlocked_r+0x94>
   d7df4:	3701      	adds	r7, #1
   d7df6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d7dfa:	e003      	b.n	d7e04 <_tzset_unlocked_r+0x9c>
   d7dfc:	2b2b      	cmp	r3, #43	; 0x2b
   d7dfe:	bf08      	it	eq
   d7e00:	3701      	addeq	r7, #1
   d7e02:	2501      	movs	r5, #1
   d7e04:	f10d 0a20 	add.w	sl, sp, #32
   d7e08:	f10d 0b1e 	add.w	fp, sp, #30
   d7e0c:	f04f 0800 	mov.w	r8, #0
   d7e10:	9603      	str	r6, [sp, #12]
   d7e12:	f8cd a008 	str.w	sl, [sp, #8]
   d7e16:	9601      	str	r6, [sp, #4]
   d7e18:	f8cd b000 	str.w	fp, [sp]
   d7e1c:	4633      	mov	r3, r6
   d7e1e:	aa07      	add	r2, sp, #28
   d7e20:	498d      	ldr	r1, [pc, #564]	; (d8058 <_tzset_unlocked_r+0x2f0>)
   d7e22:	f8ad 801e 	strh.w	r8, [sp, #30]
   d7e26:	4638      	mov	r0, r7
   d7e28:	f8ad 8020 	strh.w	r8, [sp, #32]
   d7e2c:	f7fd fca4 	bl	d5778 <siscanf>
   d7e30:	4540      	cmp	r0, r8
   d7e32:	f340 80fd 	ble.w	d8030 <_tzset_unlocked_r+0x2c8>
   d7e36:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7e3a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7e3e:	f8df 9224 	ldr.w	r9, [pc, #548]	; d8064 <_tzset_unlocked_r+0x2fc>
   d7e42:	213c      	movs	r1, #60	; 0x3c
   d7e44:	fb01 3302 	mla	r3, r1, r2, r3
   d7e48:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7e4c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7e50:	fb01 3302 	mla	r3, r1, r2, r3
   d7e54:	435d      	muls	r5, r3
   d7e56:	6225      	str	r5, [r4, #32]
   d7e58:	4d7c      	ldr	r5, [pc, #496]	; (d804c <_tzset_unlocked_r+0x2e4>)
   d7e5a:	4b7d      	ldr	r3, [pc, #500]	; (d8050 <_tzset_unlocked_r+0x2e8>)
   d7e5c:	602b      	str	r3, [r5, #0]
   d7e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7e60:	497c      	ldr	r1, [pc, #496]	; (d8054 <_tzset_unlocked_r+0x2ec>)
   d7e62:	441f      	add	r7, r3
   d7e64:	464a      	mov	r2, r9
   d7e66:	4633      	mov	r3, r6
   d7e68:	4638      	mov	r0, r7
   d7e6a:	f7fd fc85 	bl	d5778 <siscanf>
   d7e6e:	4540      	cmp	r0, r8
   d7e70:	dc08      	bgt.n	d7e84 <_tzset_unlocked_r+0x11c>
   d7e72:	682b      	ldr	r3, [r5, #0]
   d7e74:	606b      	str	r3, [r5, #4]
   d7e76:	4b72      	ldr	r3, [pc, #456]	; (d8040 <_tzset_unlocked_r+0x2d8>)
   d7e78:	6a22      	ldr	r2, [r4, #32]
   d7e7a:	601a      	str	r2, [r3, #0]
   d7e7c:	4b72      	ldr	r3, [pc, #456]	; (d8048 <_tzset_unlocked_r+0x2e0>)
   d7e7e:	f8c3 8000 	str.w	r8, [r3]
   d7e82:	e0d5      	b.n	d8030 <_tzset_unlocked_r+0x2c8>
   d7e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7e86:	f8c5 9004 	str.w	r9, [r5, #4]
   d7e8a:	18fd      	adds	r5, r7, r3
   d7e8c:	5cfb      	ldrb	r3, [r7, r3]
   d7e8e:	2b2d      	cmp	r3, #45	; 0x2d
   d7e90:	d103      	bne.n	d7e9a <_tzset_unlocked_r+0x132>
   d7e92:	3501      	adds	r5, #1
   d7e94:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d7e98:	e003      	b.n	d7ea2 <_tzset_unlocked_r+0x13a>
   d7e9a:	2b2b      	cmp	r3, #43	; 0x2b
   d7e9c:	bf08      	it	eq
   d7e9e:	3501      	addeq	r5, #1
   d7ea0:	2701      	movs	r7, #1
   d7ea2:	2300      	movs	r3, #0
   d7ea4:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7ea8:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7eac:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7eb0:	930a      	str	r3, [sp, #40]	; 0x28
   d7eb2:	9603      	str	r6, [sp, #12]
   d7eb4:	f8cd a008 	str.w	sl, [sp, #8]
   d7eb8:	9601      	str	r6, [sp, #4]
   d7eba:	f8cd b000 	str.w	fp, [sp]
   d7ebe:	4633      	mov	r3, r6
   d7ec0:	aa07      	add	r2, sp, #28
   d7ec2:	4965      	ldr	r1, [pc, #404]	; (d8058 <_tzset_unlocked_r+0x2f0>)
   d7ec4:	4628      	mov	r0, r5
   d7ec6:	f7fd fc57 	bl	d5778 <siscanf>
   d7eca:	2800      	cmp	r0, #0
   d7ecc:	dc04      	bgt.n	d7ed8 <_tzset_unlocked_r+0x170>
   d7ece:	6a23      	ldr	r3, [r4, #32]
   d7ed0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d7ed4:	63e3      	str	r3, [r4, #60]	; 0x3c
   d7ed6:	e00e      	b.n	d7ef6 <_tzset_unlocked_r+0x18e>
   d7ed8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7edc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7ee0:	213c      	movs	r1, #60	; 0x3c
   d7ee2:	fb01 3302 	mla	r3, r1, r2, r3
   d7ee6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7eea:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7eee:	fb01 3302 	mla	r3, r1, r2, r3
   d7ef2:	435f      	muls	r7, r3
   d7ef4:	63e7      	str	r7, [r4, #60]	; 0x3c
   d7ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7ef8:	4627      	mov	r7, r4
   d7efa:	441d      	add	r5, r3
   d7efc:	f04f 0900 	mov.w	r9, #0
   d7f00:	782b      	ldrb	r3, [r5, #0]
   d7f02:	2b2c      	cmp	r3, #44	; 0x2c
   d7f04:	bf08      	it	eq
   d7f06:	3501      	addeq	r5, #1
   d7f08:	f895 8000 	ldrb.w	r8, [r5]
   d7f0c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d7f10:	d126      	bne.n	d7f60 <_tzset_unlocked_r+0x1f8>
   d7f12:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d7f16:	9302      	str	r3, [sp, #8]
   d7f18:	ab09      	add	r3, sp, #36	; 0x24
   d7f1a:	9300      	str	r3, [sp, #0]
   d7f1c:	9603      	str	r6, [sp, #12]
   d7f1e:	9601      	str	r6, [sp, #4]
   d7f20:	4633      	mov	r3, r6
   d7f22:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d7f26:	494d      	ldr	r1, [pc, #308]	; (d805c <_tzset_unlocked_r+0x2f4>)
   d7f28:	4628      	mov	r0, r5
   d7f2a:	f7fd fc25 	bl	d5778 <siscanf>
   d7f2e:	2803      	cmp	r0, #3
   d7f30:	d17e      	bne.n	d8030 <_tzset_unlocked_r+0x2c8>
   d7f32:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d7f36:	1e4b      	subs	r3, r1, #1
   d7f38:	2b0b      	cmp	r3, #11
   d7f3a:	d879      	bhi.n	d8030 <_tzset_unlocked_r+0x2c8>
   d7f3c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d7f40:	1e53      	subs	r3, r2, #1
   d7f42:	2b04      	cmp	r3, #4
   d7f44:	d874      	bhi.n	d8030 <_tzset_unlocked_r+0x2c8>
   d7f46:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d7f4a:	2b06      	cmp	r3, #6
   d7f4c:	d870      	bhi.n	d8030 <_tzset_unlocked_r+0x2c8>
   d7f4e:	f887 8008 	strb.w	r8, [r7, #8]
   d7f52:	60f9      	str	r1, [r7, #12]
   d7f54:	613a      	str	r2, [r7, #16]
   d7f56:	617b      	str	r3, [r7, #20]
   d7f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7f5a:	eb05 0803 	add.w	r8, r5, r3
   d7f5e:	e02a      	b.n	d7fb6 <_tzset_unlocked_r+0x24e>
   d7f60:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d7f64:	bf06      	itte	eq
   d7f66:	3501      	addeq	r5, #1
   d7f68:	4643      	moveq	r3, r8
   d7f6a:	2344      	movne	r3, #68	; 0x44
   d7f6c:	220a      	movs	r2, #10
   d7f6e:	a90b      	add	r1, sp, #44	; 0x2c
   d7f70:	4628      	mov	r0, r5
   d7f72:	9305      	str	r3, [sp, #20]
   d7f74:	f7ff fe3e 	bl	d7bf4 <strtoul>
   d7f78:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d7f7c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d7f80:	4545      	cmp	r5, r8
   d7f82:	9b05      	ldr	r3, [sp, #20]
   d7f84:	d114      	bne.n	d7fb0 <_tzset_unlocked_r+0x248>
   d7f86:	234d      	movs	r3, #77	; 0x4d
   d7f88:	f1b9 0f00 	cmp.w	r9, #0
   d7f8c:	d107      	bne.n	d7f9e <_tzset_unlocked_r+0x236>
   d7f8e:	7223      	strb	r3, [r4, #8]
   d7f90:	2303      	movs	r3, #3
   d7f92:	60e3      	str	r3, [r4, #12]
   d7f94:	2302      	movs	r3, #2
   d7f96:	6123      	str	r3, [r4, #16]
   d7f98:	f8c4 9014 	str.w	r9, [r4, #20]
   d7f9c:	e00b      	b.n	d7fb6 <_tzset_unlocked_r+0x24e>
   d7f9e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d7fa2:	230b      	movs	r3, #11
   d7fa4:	62a3      	str	r3, [r4, #40]	; 0x28
   d7fa6:	2301      	movs	r3, #1
   d7fa8:	62e3      	str	r3, [r4, #44]	; 0x2c
   d7faa:	2300      	movs	r3, #0
   d7fac:	6323      	str	r3, [r4, #48]	; 0x30
   d7fae:	e002      	b.n	d7fb6 <_tzset_unlocked_r+0x24e>
   d7fb0:	b280      	uxth	r0, r0
   d7fb2:	723b      	strb	r3, [r7, #8]
   d7fb4:	6178      	str	r0, [r7, #20]
   d7fb6:	2302      	movs	r3, #2
   d7fb8:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7fbc:	2300      	movs	r3, #0
   d7fbe:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7fc2:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7fc6:	930a      	str	r3, [sp, #40]	; 0x28
   d7fc8:	f898 3000 	ldrb.w	r3, [r8]
   d7fcc:	2b2f      	cmp	r3, #47	; 0x2f
   d7fce:	d10b      	bne.n	d7fe8 <_tzset_unlocked_r+0x280>
   d7fd0:	9603      	str	r6, [sp, #12]
   d7fd2:	f8cd a008 	str.w	sl, [sp, #8]
   d7fd6:	9601      	str	r6, [sp, #4]
   d7fd8:	f8cd b000 	str.w	fp, [sp]
   d7fdc:	4633      	mov	r3, r6
   d7fde:	aa07      	add	r2, sp, #28
   d7fe0:	491f      	ldr	r1, [pc, #124]	; (d8060 <_tzset_unlocked_r+0x2f8>)
   d7fe2:	4640      	mov	r0, r8
   d7fe4:	f7fd fbc8 	bl	d5778 <siscanf>
   d7fe8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7fec:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7ff0:	213c      	movs	r1, #60	; 0x3c
   d7ff2:	fb01 3302 	mla	r3, r1, r2, r3
   d7ff6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7ffa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7ffe:	fb01 3302 	mla	r3, r1, r2, r3
   d8002:	61bb      	str	r3, [r7, #24]
   d8004:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d8006:	f109 0901 	add.w	r9, r9, #1
   d800a:	f1b9 0f02 	cmp.w	r9, #2
   d800e:	4445      	add	r5, r8
   d8010:	f107 071c 	add.w	r7, r7, #28
   d8014:	f47f af74 	bne.w	d7f00 <_tzset_unlocked_r+0x198>
   d8018:	6860      	ldr	r0, [r4, #4]
   d801a:	f7ff fdf5 	bl	d7c08 <__tzcalc_limits>
   d801e:	4b08      	ldr	r3, [pc, #32]	; (d8040 <_tzset_unlocked_r+0x2d8>)
   d8020:	6a22      	ldr	r2, [r4, #32]
   d8022:	601a      	str	r2, [r3, #0]
   d8024:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d8026:	1a9b      	subs	r3, r3, r2
   d8028:	4a07      	ldr	r2, [pc, #28]	; (d8048 <_tzset_unlocked_r+0x2e0>)
   d802a:	bf18      	it	ne
   d802c:	2301      	movne	r3, #1
   d802e:	6013      	str	r3, [r2, #0]
   d8030:	b00d      	add	sp, #52	; 0x34
   d8032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8036:	bf00      	nop
   d8038:	000d8ba4 	.word	0x000d8ba4
   d803c:	2003e7e0 	.word	0x2003e7e0
   d8040:	2003e7e8 	.word	0x2003e7e8
   d8044:	000d8ba7 	.word	0x000d8ba7
   d8048:	2003e7e4 	.word	0x2003e7e4
   d804c:	2003e134 	.word	0x2003e134
   d8050:	2003e7d3 	.word	0x2003e7d3
   d8054:	000d8bab 	.word	0x000d8bab
   d8058:	000d8bce 	.word	0x000d8bce
   d805c:	000d8bba 	.word	0x000d8bba
   d8060:	000d8bcd 	.word	0x000d8bcd
   d8064:	2003e7c8 	.word	0x2003e7c8

000d8068 <_findenv_r>:
   d8068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d806c:	4607      	mov	r7, r0
   d806e:	468b      	mov	fp, r1
   d8070:	4690      	mov	r8, r2
   d8072:	f000 f8d9 	bl	d8228 <__env_lock>
   d8076:	4b19      	ldr	r3, [pc, #100]	; (d80dc <_findenv_r+0x74>)
   d8078:	681d      	ldr	r5, [r3, #0]
   d807a:	469a      	mov	sl, r3
   d807c:	b13d      	cbz	r5, d808e <_findenv_r+0x26>
   d807e:	465c      	mov	r4, fp
   d8080:	4623      	mov	r3, r4
   d8082:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8086:	b142      	cbz	r2, d809a <_findenv_r+0x32>
   d8088:	2a3d      	cmp	r2, #61	; 0x3d
   d808a:	461c      	mov	r4, r3
   d808c:	d1f8      	bne.n	d8080 <_findenv_r+0x18>
   d808e:	4638      	mov	r0, r7
   d8090:	f000 f8cb 	bl	d822a <__env_unlock>
   d8094:	2000      	movs	r0, #0
   d8096:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d809a:	ebcb 0404 	rsb	r4, fp, r4
   d809e:	46a9      	mov	r9, r5
   d80a0:	f859 0b04 	ldr.w	r0, [r9], #4
   d80a4:	2800      	cmp	r0, #0
   d80a6:	d0f2      	beq.n	d808e <_findenv_r+0x26>
   d80a8:	4622      	mov	r2, r4
   d80aa:	4659      	mov	r1, fp
   d80ac:	f7ff fc6b 	bl	d7986 <strncmp>
   d80b0:	b988      	cbnz	r0, d80d6 <_findenv_r+0x6e>
   d80b2:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d80b6:	191e      	adds	r6, r3, r4
   d80b8:	5d1b      	ldrb	r3, [r3, r4]
   d80ba:	2b3d      	cmp	r3, #61	; 0x3d
   d80bc:	d10b      	bne.n	d80d6 <_findenv_r+0x6e>
   d80be:	f8da 3000 	ldr.w	r3, [sl]
   d80c2:	1aed      	subs	r5, r5, r3
   d80c4:	10ad      	asrs	r5, r5, #2
   d80c6:	4638      	mov	r0, r7
   d80c8:	f8c8 5000 	str.w	r5, [r8]
   d80cc:	f000 f8ad 	bl	d822a <__env_unlock>
   d80d0:	1c70      	adds	r0, r6, #1
   d80d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d80d6:	464d      	mov	r5, r9
   d80d8:	e7e1      	b.n	d809e <_findenv_r+0x36>
   d80da:	bf00      	nop
   d80dc:	2003e17c 	.word	0x2003e17c

000d80e0 <_getenv_r>:
   d80e0:	b507      	push	{r0, r1, r2, lr}
   d80e2:	aa01      	add	r2, sp, #4
   d80e4:	f7ff ffc0 	bl	d8068 <_findenv_r>
   d80e8:	b003      	add	sp, #12
   d80ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d80f0 <__gettzinfo>:
   d80f0:	4800      	ldr	r0, [pc, #0]	; (d80f4 <__gettzinfo+0x4>)
   d80f2:	4770      	bx	lr
   d80f4:	2003e13c 	.word	0x2003e13c

000d80f8 <gmtime_r>:
   d80f8:	6802      	ldr	r2, [r0, #0]
   d80fa:	4b47      	ldr	r3, [pc, #284]	; (d8218 <gmtime_r+0x120>)
   d80fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d80fe:	fb92 f4f3 	sdiv	r4, r2, r3
   d8102:	fb03 2214 	mls	r2, r3, r4, r2
   d8106:	2a00      	cmp	r2, #0
   d8108:	bfbc      	itt	lt
   d810a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d810e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d8112:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d8116:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d811a:	fb92 f3f0 	sdiv	r3, r2, r0
   d811e:	fb00 2213 	mls	r2, r0, r3, r2
   d8122:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d8126:	bfac      	ite	ge
   d8128:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d812c:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d8130:	608b      	str	r3, [r1, #8]
   d8132:	fb92 f3f0 	sdiv	r3, r2, r0
   d8136:	fb00 2213 	mls	r2, r0, r3, r2
   d813a:	604b      	str	r3, [r1, #4]
   d813c:	600a      	str	r2, [r1, #0]
   d813e:	2307      	movs	r3, #7
   d8140:	1ce2      	adds	r2, r4, #3
   d8142:	fb92 f3f3 	sdiv	r3, r2, r3
   d8146:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d814a:	1ad3      	subs	r3, r2, r3
   d814c:	618b      	str	r3, [r1, #24]
   d814e:	4b33      	ldr	r3, [pc, #204]	; (d821c <gmtime_r+0x124>)
   d8150:	4d33      	ldr	r5, [pc, #204]	; (d8220 <gmtime_r+0x128>)
   d8152:	fb94 f5f5 	sdiv	r5, r4, r5
   d8156:	fb03 4405 	mla	r4, r3, r5, r4
   d815a:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d815e:	fbb4 f2f2 	udiv	r2, r4, r2
   d8162:	4422      	add	r2, r4
   d8164:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d8168:	fbb4 f3f7 	udiv	r3, r4, r7
   d816c:	1ad2      	subs	r2, r2, r3
   d816e:	482d      	ldr	r0, [pc, #180]	; (d8224 <gmtime_r+0x12c>)
   d8170:	fbb4 f0f0 	udiv	r0, r4, r0
   d8174:	f648 6694 	movw	r6, #36500	; 0x8e94
   d8178:	1a13      	subs	r3, r2, r0
   d817a:	fbb3 f6f6 	udiv	r6, r3, r6
   d817e:	4434      	add	r4, r6
   d8180:	f240 126d 	movw	r2, #365	; 0x16d
   d8184:	fbb3 f0f2 	udiv	r0, r3, r2
   d8188:	fbb3 f3f7 	udiv	r3, r3, r7
   d818c:	1ae3      	subs	r3, r4, r3
   d818e:	fb02 3310 	mls	r3, r2, r0, r3
   d8192:	2499      	movs	r4, #153	; 0x99
   d8194:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d8198:	3202      	adds	r2, #2
   d819a:	fbb2 f2f4 	udiv	r2, r2, r4
   d819e:	2a0a      	cmp	r2, #10
   d81a0:	fb04 f402 	mul.w	r4, r4, r2
   d81a4:	f104 0602 	add.w	r6, r4, #2
   d81a8:	f04f 0405 	mov.w	r4, #5
   d81ac:	fbb6 f4f4 	udiv	r4, r6, r4
   d81b0:	bf34      	ite	cc
   d81b2:	2602      	movcc	r6, #2
   d81b4:	f06f 0609 	mvncs.w	r6, #9
   d81b8:	4416      	add	r6, r2
   d81ba:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d81be:	fb02 0505 	mla	r5, r2, r5, r0
   d81c2:	1c5f      	adds	r7, r3, #1
   d81c4:	2e01      	cmp	r6, #1
   d81c6:	bf98      	it	ls
   d81c8:	3501      	addls	r5, #1
   d81ca:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d81ce:	eba7 0704 	sub.w	r7, r7, r4
   d81d2:	d302      	bcc.n	d81da <gmtime_r+0xe2>
   d81d4:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d81d8:	e014      	b.n	d8204 <gmtime_r+0x10c>
   d81da:	0782      	lsls	r2, r0, #30
   d81dc:	d105      	bne.n	d81ea <gmtime_r+0xf2>
   d81de:	2464      	movs	r4, #100	; 0x64
   d81e0:	fbb0 f2f4 	udiv	r2, r0, r4
   d81e4:	fb04 0212 	mls	r2, r4, r2, r0
   d81e8:	b94a      	cbnz	r2, d81fe <gmtime_r+0x106>
   d81ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d81ee:	fbb0 f4f2 	udiv	r4, r0, r2
   d81f2:	fb02 0014 	mls	r0, r2, r4, r0
   d81f6:	fab0 f280 	clz	r2, r0
   d81fa:	0952      	lsrs	r2, r2, #5
   d81fc:	e000      	b.n	d8200 <gmtime_r+0x108>
   d81fe:	2201      	movs	r2, #1
   d8200:	333b      	adds	r3, #59	; 0x3b
   d8202:	441a      	add	r2, r3
   d8204:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d8208:	2300      	movs	r3, #0
   d820a:	61ca      	str	r2, [r1, #28]
   d820c:	614d      	str	r5, [r1, #20]
   d820e:	610e      	str	r6, [r1, #16]
   d8210:	60cf      	str	r7, [r1, #12]
   d8212:	620b      	str	r3, [r1, #32]
   d8214:	4608      	mov	r0, r1
   d8216:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8218:	00015180 	.word	0x00015180
   d821c:	fffdc54f 	.word	0xfffdc54f
   d8220:	00023ab1 	.word	0x00023ab1
   d8224:	00023ab0 	.word	0x00023ab0

000d8228 <__env_lock>:
   d8228:	4770      	bx	lr

000d822a <__env_unlock>:
   d822a:	4770      	bx	lr

000d822c <dynalib_user>:
   d822c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d823c:	0000 0000 7453 7261 7574 2070 7553 6363     ....Startup Succ
   d824c:	7365 6673 6c75 0000 0000 0000 0000 0000     essful..........
	...
   d8280:	7325 5320 253a 2e32 6630 2525 202c 3a51     %s S:%2.0f%%, Q:
   d8290:	3225 302e 2566 2025 2500 2e34 6631 2520     %2.0f%% .%4.1f %
   d82a0:	0025 6925 7420 7069 0073 3425 312e 2066     %.%i tips.%4.1f 
   d82b0:	0043 5441 432b 5546 3d4e 3631 0a0d 7b00     C.AT+CFUN=16...{
   d82c0:	5322 696f 6d6c 696f 7473 7275 3165 3a22     "Soilmoisture1":
   d82d0:	3425 312e 2c66 2220 6f53 6c69 6f6d 7369     %4.1f, "Soilmois
   d82e0:	7574 6572 2232 253a 2e34 6631 202c 5322     ture2":%4.1f, "S
   d82f0:	696f 6d6c 696f 7473 7275 3365 3a22 3425     oilmoisture3":%4
   d8300:	312e 2c66 2220 6f53 6c69 6f6d 7369 7574     .1f, "Soilmoistu
   d8310:	6572 2234 253a 2e34 6631 202c 5322 696f     re4":%4.1f, "Soi
   d8320:	6d6c 696f 7473 7275 3565 3a22 3425 312e     lmoisture5":%4.1
   d8330:	2c66 2220 6f53 6c69 6f6d 7369 7574 6572     f, "Soilmoisture
   d8340:	2236 253a 2e34 6631 202c 5022 6572 6963     6":%4.1f, "Preci
   d8350:	6970 6174 6974 6e6f 3a22 2520 2c69 2220     pitation": %i, "
   d8360:	6f53 6c69 6574 706d 3a22 3425 312e 2c66     Soiltemp":%4.1f,
   d8370:	2220 7548 696d 6964 7974 3a22 3425 312e      "Humidity":%4.1
   d8380:	2c66 2220 6554 706d 7265 7461 7275 2265     f, "Temperature"
   d8390:	253a 2e34 6631 202c 5022 6e61 6c65 7568     :%4.1f, "Panelhu
   d83a0:	696d 6964 7974 3a22 3425 312e 2c66 2220     midity":%4.1f, "
   d83b0:	6150 656e 746c 6d65 6570 6172 7574 6572     Paneltemperature
   d83c0:	3a22 3425 312e 2c66 2220 6142 7474 7265     ":%4.1f, "Batter
   d83d0:	2279 253a 2e34 6631 202c 5222 6461 6f69     y":%4.1f, "Radio
   d83e0:	6574 6863 3a22 2520 2c69 2220 6953 6e67     tech": %i, "Sign
   d83f0:	6c61 3a22 2520 2e34 6631 202c 5122 6175     al": %4.1f, "Qua
   d8400:	696c 7974 3a22 2520 2e34 6631 202c 5222     lity": %4.1f, "R
   d8410:	7365 7465 2273 253a 2c69 2220 6c41 7265     esets":%i, "Aler
   d8420:	7374 3a22 6925 007d 6543 6c6c 6c75 7261     ts":%i}.Cellular
   d8430:	4c5f 5069 5f6f 6f48 6b6f 4e00 206f 6144     _LiPo_Hook.No Da
   d8440:	6174 5500 6962 6f64 7374 4820 6f6f 006b     ta.Ubidots Hook.
   d8450:	6552 7073 6e6f 6573 5220 6365 6965 6576     Response Receive
   d8460:	0064 7453 7461 0065 6553 2074 6556 6272     d.State.Set Verb
   d8470:	736f 2065 6f4d 6564 3000 4300 656c 7261     ose Mode.0.Clear
   d8480:	6465 5620 7265 6f62 6573 4d20 646f 0065     ed Verbose Mode.
   d8490:	6954 656d 7a20 6e6f 2065 666f 7366 7465     Time zone offset
   d84a0:	2520 0069 6954 656d 4c00 776f 5020 776f      %i.Time.Low Pow
   d84b0:	7265 4e00 726f 616d 206c 704f 7265 7461     er.Normal Operat
   d84c0:	6f69 736e 4600 6f72 206d 7325 7420 206f     ions.From %s to 
   d84d0:	7325 5300 6174 6574 5420 6172 736e 7469     %s.State Transit
   d84e0:	6f69 006e 694d 756e 6574 0073 7245 6f72     ion.Minutes.Erro
   d84f0:	2072 6174 696b 676e 4d20 6165 7573 6572     r taking Measure
   d8500:	656d 746e 0073 7073 7261 2f6b 6564 6976     ments.spark/devi
   d8510:	6563 732f 7365 6973 6e6f 652f 646e 4700     ce/session/end.G
   d8520:	696f 676e 7420 206f 6c53 6565 0070 6f4c     oing to Sleep.Lo
   d8530:	2077 6142 7474 7265 2079 202d 6c53 6565     w Battery - Slee
   d8540:	6970 676e 4500 7272 726f 5320 6174 6574     ping.Error State
   d8550:	2d20 5220 7365 7465 4500 7272 726f 5320      - Reset.Error S
   d8560:	6174 6574 2d20 4c20 736f 2074 6553 7373     tate - Lost Sess
   d8570:	6f69 006e 7245 6f72 2072 7453 7461 2065     ion.Error State 
   d8580:	202d 7546 6c6c 4d20 646f 6d65 5220 7365     - Full Modem Res
   d8590:	7465 5300 6769 616e 006c 6552 6573 4374     et.Signal.ResetC
   d85a0:	756f 746e 5200 6c65 6165 6573 7300 6174     ount.Release.sta
   d85b0:	6574 664f 6843 0067 6f6c 5077 776f 7265     teOfChg.lowPower
   d85c0:	6f4d 6564 7400 6d65 6570 6172 7574 6572     Mode.temperature
   d85d0:	6800 6d75 6469 7469 0079 6f53 6c69 6554     .humidity.SoilTe
   d85e0:	706d 5300 696f 4d6c 696f 7473 7275 3165     mp.SoilMoisture1
   d85f0:	5300 696f 4d6c 696f 7473 7275 3265 5300     .SoilMoisture2.S
   d8600:	696f 4d6c 696f 7473 7275 3365 5300 696f     oilMoisture3.Soi
   d8610:	4d6c 696f 7473 7275 3465 5300 696f 4d6c     lMoisture4.SoilM
   d8620:	696f 7473 7275 3565 5300 696f 4d6c 696f     oisture5.SoilMoi
   d8630:	7473 7275 3665 4d00 6165 7573 6572 4e2d     sture6.Measure-N
   d8640:	776f 4c00 776f 6f50 6577 4d72 646f 0065     ow.LowPowerMode.
   d8650:	6556 6272 736f 2d65 6f4d 6564 5300 7465     Verbose-Mode.Set
   d8660:	6954 656d 6f5a 656e 4600 6961 656c 2064     TimeZone.Failed 
   d8670:	6f74 6320 6e6f 656e 7463 5300 6174 7472     to connect.Start
   d8680:	7075 5500 6b6e 6f6e 6e77 4e00 6e6f 0065     up.Unknown.None.
   d8690:	6957 6946 4700 4d53 5500 544d 0053 4443     WiFi.GSM.UMTS.CD
   d86a0:	414d 4c00 4554 4900 4545 3845 3230 3531     MA.LTE.IEEE80215
   d86b0:	0034 2e31 3530 0000                         4.1.05..

000d86b8 <_ZTVN5spark13CellularClassE>:
	...
   d86c0:	5845 000d 583b 000d 5831 000d 57e7 000d     EX..;X..1X...W..
   d86d0:	5825 000d 5819 000d 580d 000d 5805 000d     %X...X...X...X..
   d86e0:	57fb 000d 57f1 000d 638d 000d               .W...W...c..

000d86ec <_ZTV14CellularSignal>:
	...
   d86f4:	5905 000d 5997 000d 5907 000d 59d9 000d     .Y...Y...Y...Y..
   d8704:	590d 000d 59a5 000d 5939 000d 5965 000d     .Y...Y..9Y..eY..
   d8714:	fffc ffff 0000 0000 598f 000d               .........Y..

000d8720 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8728:	5a25 000d 5a2b 000d 5a55 000d 5a39 000d     %Z..+Z..UZ..9Z..
   d8738:	5a27 000d                                   'Z..

000d873c <_ZTVN5spark13EthernetClassE>:
	...
   d8744:	602f 000d 6025 000d 601b 000d 6011 000d     /`..%`...`...`..
   d8754:	6005 000d 5ff9 000d 5fed 000d 5fe5 000d     .`..._..._..._..
   d8764:	5fdb 000d 5fd1 000d 638d 000d               ._..._...c..

000d8770 <_ZTV7TwoWire>:
	...
   d8778:	604d 000d 6097 000d 606f 000d 604f 000d     M`...`..o`..O`..
   d8788:	6077 000d 607f 000d 6087 000d 608f 000d     w`...`...`...`..

000d8798 <_ZTV9IPAddress>:
	...
   d87a0:	60e1 000d 60d1 000d 60d3 000d 0066 6e6c     .`...`...`..f.ln
   d87b0:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d87c0:	3025 3031 2075 5d00 0020 6425 2c00 0020     %010u .] .%d., .
   d87d0:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d87e0:	6564 6174 6c69 2073 203d 6200 7561 0064     details = .baud.
   d87f0:	6553 6972 6c61 5300 7265 6169 316c 7400     Serial.Serial1.t
   d8800:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
   d8810:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
   d8820:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
   d8830:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
   d8840:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
   d8850:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   d8860:	0070 6f6e 656e 7400 6172 6563 6900 666e     p.none.trace.inf
   d8870:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
   d8880:	6369 6100 6c6c 0000                         ic.all..

000d8888 <_ZTVN5spark9MeshClassE>:
	...
   d8890:	6223 000d 6219 000d 620f 000d 6205 000d     #b...b...b...b..
   d88a0:	61f9 000d 61ed 000d 61e1 000d 61d9 000d     .a...a...a...a..
   d88b0:	61cf 000d 61c5 000d 638d 000d               .a...a...c..

000d88bc <_ZTVN5spark12NetworkClassE>:
	...
   d88c4:	6325 000d 632f 000d 6339 000d 6343 000d     %c../c..9c..Cc..
   d88d4:	634d 000d 6359 000d 6365 000d 6371 000d     Mc..Yc..ec..qc..
   d88e4:	6379 000d 6383 000d 638d 000d               yc...c...c..

000d88f0 <_ZTV8SPIClass>:
	...
   d88f8:	65d1 000d 65d3 000d 2b25 3330 3a64 3025     .e...e..%+03d:%0
   d8908:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d8918:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d8928 <_ZTV11USARTSerial>:
	...
   d8930:	6a25 000d 6a75 000d 6a83 000d 646d 000d     %j..uj...j..md..
   d8940:	6a39 000d 6a5b 000d 6a47 000d 6a6f 000d     9j..[j..Gj..oj..
   d8950:	6a27 000d 6a2b 000d                         'j..+j..

000d8958 <_ZTV9USBSerial>:
	...
   d8960:	6b2d 000d 6b7d 000d 6b8b 000d 646d 000d     -k..}k...k..md..
   d8970:	6b69 000d 6b2f 000d 6b45 000d 6b77 000d     ik../k..Ek..wk..
   d8980:	6b5b 000d 6b29 000d                         [k..)k..

000d8988 <day_name.4725>:
   d8988:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d8998:	6972 6153 4a74                                   riSat

000d899d <mon_name.4726>:
   d899d:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d89ad:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d89bd:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   d89cd:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   d89dd:	6425 000a                                   %d..

000d89e1 <_ctype_>:
   d89e1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d89f1:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d8a01:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d8a11:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d8a21:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d8a31:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d8a41:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d8a51:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d8a61:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d8ae4 <__sf_fake_stdin>:
	...

000d8b04 <__sf_fake_stdout>:
	...

000d8b24 <__sf_fake_stderr>:
	...

000d8b44 <__month_lengths>:
   d8b44:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d8b54:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d8b64:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d8b74:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d8b84:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d8b94:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d8ba4:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d8bb4:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d8bc4:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d8bd4:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d8be0 <link_const_variable_data_end>:
   d8be0:	000d51c9 	.word	0x000d51c9
   d8be4:	000d58c5 	.word	0x000d58c5
   d8be8:	000d6039 	.word	0x000d6039
   d8bec:	000d61b5 	.word	0x000d61b5
   d8bf0:	000d62d9 	.word	0x000d62d9
   d8bf4:	000d6459 	.word	0x000d6459
   d8bf8:	000d65b5 	.word	0x000d65b5
   d8bfc:	000d6875 	.word	0x000d6875
   d8c00:	000d6a11 	.word	0x000d6a11
   d8c04:	000d6f25 	.word	0x000d6f25
   d8c08:	000d6f7d 	.word	0x000d6f7d
   d8c0c:	000d7041 	.word	0x000d7041
   d8c10:	000d70c5 	.word	0x000d70c5
   d8c14:	000d7149 	.word	0x000d7149

000d8c18 <link_constructors_end>:
	...
