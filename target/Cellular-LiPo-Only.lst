
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-LiPo-Only/target/Cellular-LiPo-Only.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ca8  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  08084cc0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000154  20000400  08084cc4  00030400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000007dc  20000554  20000554  00040554  2**2
                  ALLOC
  5 .module_info_suffix 00000028  08084e18  08084e18  00034e18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  08084e40  08084e40  00034e40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000a0c6f  00000000  00000000  00034e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000ef64  00000000  00000000  000d5ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001352d  00000000  00000000  000e4a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001fe0  00000000  00000000  000f7f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003370  00000000  00000000  000f9f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00023f63  00000000  00000000  000fd294  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00022150  00000000  00000000  001211f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a4930  00000000  00000000  00143347  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bda8  00000000  00000000  001e7c78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	38 43 08 08                                         8C..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f003 fc87 	bl	8083940 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f003 fc8c 	bl	8083956 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08084cc4 	.word	0x08084cc4
 808004c:	20000554 	.word	0x20000554
 8080050:	20000554 	.word	0x20000554
 8080054:	20000d30 	.word	0x20000d30
 8080058:	20000d30 	.word	0x20000d30

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f002 fc1f 	bl	80828a0 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08084c80 	.word	0x08084c80
 8080084:	08084cb4 	.word	0x08084cb4

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 be94 	b.w	8080db4 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 fc99 	bl	80809c4 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f002 bbc5 	b.w	8082824 <_post_loop>

0808009a <_Znwj>:
 808009a:	f001 baa9 	b.w	80815f0 <malloc>

0808009e <_ZdlPv>:
 808009e:	f001 baaf 	b.w	8081600 <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr
	...

080800b4 <_Z10measureNow6String>:
// These are the particle functions that allow you to configure and run the device
// They are intended to allow for customization and control during installations
// and to allow for management.

int measureNow(String command) // Function to force sending data in current hour
{
 80800b4:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80800b6:	4904      	ldr	r1, [pc, #16]	; (80800c8 <_Z10measureNow6String+0x14>)
 80800b8:	f002 f931 	bl	808231e <_ZNK6String6equalsEPKc>
  if (command == "1")
 80800bc:	b118      	cbz	r0, 80800c6 <_Z10measureNow6String+0x12>
  {
    state = MEASURING_STATE;
 80800be:	4b03      	ldr	r3, [pc, #12]	; (80800cc <_Z10measureNow6String+0x18>)
 80800c0:	2203      	movs	r2, #3
 80800c2:	701a      	strb	r2, [r3, #0]
    return 1;
 80800c4:	2001      	movs	r0, #1
  }
  else return 0;
}
 80800c6:	bd08      	pop	{r3, pc}
 80800c8:	080847b8 	.word	0x080847b8
 80800cc:	200005d1 	.word	0x200005d1

080800d0 <_ZN11EEPROMClass4readEi.isra.14>:

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
 80800d0:	f001 b882 	b.w	80811d8 <HAL_EEPROM_Read>

080800d4 <_ZN11EEPROMClass5writeEih.isra.15>:
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
 80800d4:	f001 b888 	b.w	80811e8 <HAL_EEPROM_Write>

080800d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.33.constprop.37>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80800d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80800da:	4605      	mov	r5, r0
 80800dc:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80800e0:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80800e2:	f88d 3000 	strb.w	r3, [sp]
 80800e6:	233c      	movs	r3, #60	; 0x3c
 80800e8:	f001 fd78 	bl	8081bdc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
 80800ec:	4628      	mov	r0, r5
 80800ee:	b003      	add	sp, #12
 80800f0:	bd30      	pop	{r4, r5, pc}
	...

080800f4 <_Z17getSignalStrengthv>:

  return 1;
}

void getSignalStrength()
{
 80800f4:	b530      	push	{r4, r5, lr}
 80800f6:	b08f      	sub	sp, #60	; 0x3c
  // New Boron capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
 80800f8:	4913      	ldr	r1, [pc, #76]	; (8080148 <_Z17getSignalStrengthv+0x54>)
 80800fa:	a804      	add	r0, sp, #16
 80800fc:	f001 fb24 	bl	8081748 <_ZN5spark13CellularClass4RSSIEv>
  rat = sig.getAccessTechnology();
 8080100:	a804      	add	r0, sp, #16
 8080102:	f001 fb7c 	bl	80817fe <_ZNK14CellularSignal19getAccessTechnologyEv>
 8080106:	4d11      	ldr	r5, [pc, #68]	; (808014c <_Z17getSignalStrengthv+0x58>)
  //float strengthVal = sig.getStrengthValue();
  strengthPercentage = sig.getStrength();
 8080108:	4c11      	ldr	r4, [pc, #68]	; (8080150 <_Z17getSignalStrengthv+0x5c>)

void getSignalStrength()
{
  // New Boron capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
  rat = sig.getAccessTechnology();
 808010a:	6028      	str	r0, [r5, #0]
  //float strengthVal = sig.getStrengthValue();
  strengthPercentage = sig.getStrength();
 808010c:	a804      	add	r0, sp, #16
 808010e:	f001 fbd5 	bl	80818bc <_ZNK14CellularSignal11getStrengthEv>
 8080112:	6020      	str	r0, [r4, #0]
  //float qualityVal = sig.getQualityValue();
  qualityPercentage = sig.getQuality();
 8080114:	a804      	add	r0, sp, #16
 8080116:	f001 fbb9 	bl	808188c <_ZNK14CellularSignal10getQualityEv>
 808011a:	4b0e      	ldr	r3, [pc, #56]	; (8080154 <_Z17getSignalStrengthv+0x60>)
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 808011c:	682d      	ldr	r5, [r5, #0]
  CellularSignal sig = Cellular.RSSI();
  rat = sig.getAccessTechnology();
  //float strengthVal = sig.getStrengthValue();
  strengthPercentage = sig.getStrength();
  //float qualityVal = sig.getQualityValue();
  qualityPercentage = sig.getQuality();
 808011e:	6018      	str	r0, [r3, #0]
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 8080120:	f002 ff7a 	bl	8083018 <__aeabi_f2d>
 8080124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080128:	6820      	ldr	r0, [r4, #0]
 808012a:	f002 ff75 	bl	8083018 <__aeabi_f2d>
 808012e:	e9cd 0100 	strd	r0, r1, [sp]
 8080132:	4b09      	ldr	r3, [pc, #36]	; (8080158 <_Z17getSignalStrengthv+0x64>)
 8080134:	4a09      	ldr	r2, [pc, #36]	; (808015c <_Z17getSignalStrengthv+0x68>)
 8080136:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 808013a:	2140      	movs	r1, #64	; 0x40
 808013c:	4808      	ldr	r0, [pc, #32]	; (8080160 <_Z17getSignalStrengthv+0x6c>)
 808013e:	f001 fa7f 	bl	8081640 <snprintf>
}
 8080142:	b00f      	add	sp, #60	; 0x3c
 8080144:	bd30      	pop	{r4, r5, pc}
 8080146:	bf00      	nop
 8080148:	200006f4 	.word	0x200006f4
 808014c:	200005b4 	.word	0x200005b4
 8080150:	20000604 	.word	0x20000604
 8080154:	20000640 	.word	0x20000640
 8080158:	2000047c 	.word	0x2000047c
 808015c:	0808438c 	.word	0x0808438c
 8080160:	20000648 	.word	0x20000648

08080164 <_Z16takeMeasurementsv>:
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
 8080164:	b507      	push	{r0, r1, r2, lr}
  // Mocked up here for the call - need to replace with your real readings

  // SoilMoisture Measurements here
  soilMoisture1 = random(100);
 8080166:	2064      	movs	r0, #100	; 0x64
 8080168:	f002 f827 	bl	80821ba <_Z6randomi>
 808016c:	f003 f862 	bl	8083234 <__aeabi_i2f>
 8080170:	4b68      	ldr	r3, [pc, #416]	; (8080314 <_Z16takeMeasurementsv+0x1b0>)
 8080172:	6018      	str	r0, [r3, #0]
  snprintf(soilMoisture1String,sizeof(soilMoisture1String), "%4.1f %%", soilMoisture1);
 8080174:	f002 ff50 	bl	8083018 <__aeabi_f2d>
 8080178:	4a67      	ldr	r2, [pc, #412]	; (8080318 <_Z16takeMeasurementsv+0x1b4>)
 808017a:	e9cd 0100 	strd	r0, r1, [sp]
 808017e:	2110      	movs	r1, #16
 8080180:	4866      	ldr	r0, [pc, #408]	; (808031c <_Z16takeMeasurementsv+0x1b8>)
 8080182:	f001 fa5d 	bl	8081640 <snprintf>
  soilMoisture2 = random(100);
 8080186:	2064      	movs	r0, #100	; 0x64
 8080188:	f002 f817 	bl	80821ba <_Z6randomi>
 808018c:	f003 f852 	bl	8083234 <__aeabi_i2f>
 8080190:	4b63      	ldr	r3, [pc, #396]	; (8080320 <_Z16takeMeasurementsv+0x1bc>)
 8080192:	6018      	str	r0, [r3, #0]
  snprintf(soilMoisture2String,sizeof(soilMoisture2String), "%4.1f %%", soilMoisture2);
 8080194:	f002 ff40 	bl	8083018 <__aeabi_f2d>
 8080198:	4a5f      	ldr	r2, [pc, #380]	; (8080318 <_Z16takeMeasurementsv+0x1b4>)
 808019a:	e9cd 0100 	strd	r0, r1, [sp]
 808019e:	2110      	movs	r1, #16
 80801a0:	4860      	ldr	r0, [pc, #384]	; (8080324 <_Z16takeMeasurementsv+0x1c0>)
 80801a2:	f001 fa4d 	bl	8081640 <snprintf>
  soilMoisture3 = random(100);
 80801a6:	2064      	movs	r0, #100	; 0x64
 80801a8:	f002 f807 	bl	80821ba <_Z6randomi>
 80801ac:	f003 f842 	bl	8083234 <__aeabi_i2f>
 80801b0:	4b5d      	ldr	r3, [pc, #372]	; (8080328 <_Z16takeMeasurementsv+0x1c4>)
 80801b2:	6018      	str	r0, [r3, #0]
  snprintf(soilMoisture3String,sizeof(soilMoisture3String), "%4.1f %%", soilMoisture3);
 80801b4:	f002 ff30 	bl	8083018 <__aeabi_f2d>
 80801b8:	4a57      	ldr	r2, [pc, #348]	; (8080318 <_Z16takeMeasurementsv+0x1b4>)
 80801ba:	e9cd 0100 	strd	r0, r1, [sp]
 80801be:	2110      	movs	r1, #16
 80801c0:	485a      	ldr	r0, [pc, #360]	; (808032c <_Z16takeMeasurementsv+0x1c8>)
 80801c2:	f001 fa3d 	bl	8081640 <snprintf>
  soilMoisture4 = random(100);
 80801c6:	2064      	movs	r0, #100	; 0x64
 80801c8:	f001 fff7 	bl	80821ba <_Z6randomi>
 80801cc:	f003 f832 	bl	8083234 <__aeabi_i2f>
 80801d0:	4b57      	ldr	r3, [pc, #348]	; (8080330 <_Z16takeMeasurementsv+0x1cc>)
 80801d2:	6018      	str	r0, [r3, #0]
  snprintf(soilMoisture4String,sizeof(soilMoisture4String), "%4.1f %%", soilMoisture4);
 80801d4:	f002 ff20 	bl	8083018 <__aeabi_f2d>
 80801d8:	4a4f      	ldr	r2, [pc, #316]	; (8080318 <_Z16takeMeasurementsv+0x1b4>)
 80801da:	e9cd 0100 	strd	r0, r1, [sp]
 80801de:	2110      	movs	r1, #16
 80801e0:	4854      	ldr	r0, [pc, #336]	; (8080334 <_Z16takeMeasurementsv+0x1d0>)
 80801e2:	f001 fa2d 	bl	8081640 <snprintf>
  soilMoisture5 = random(100);
 80801e6:	2064      	movs	r0, #100	; 0x64
 80801e8:	f001 ffe7 	bl	80821ba <_Z6randomi>
 80801ec:	f003 f822 	bl	8083234 <__aeabi_i2f>
 80801f0:	4b51      	ldr	r3, [pc, #324]	; (8080338 <_Z16takeMeasurementsv+0x1d4>)
 80801f2:	6018      	str	r0, [r3, #0]
  snprintf(soilMoisture5String,sizeof(soilMoisture5String), "%4.1f %%", soilMoisture5);
 80801f4:	f002 ff10 	bl	8083018 <__aeabi_f2d>
 80801f8:	4a47      	ldr	r2, [pc, #284]	; (8080318 <_Z16takeMeasurementsv+0x1b4>)
 80801fa:	e9cd 0100 	strd	r0, r1, [sp]
 80801fe:	2110      	movs	r1, #16
 8080200:	484e      	ldr	r0, [pc, #312]	; (808033c <_Z16takeMeasurementsv+0x1d8>)
 8080202:	f001 fa1d 	bl	8081640 <snprintf>
  soilMoisture6 = random(100);
 8080206:	2064      	movs	r0, #100	; 0x64
 8080208:	f001 ffd7 	bl	80821ba <_Z6randomi>
 808020c:	f003 f812 	bl	8083234 <__aeabi_i2f>
 8080210:	4b4b      	ldr	r3, [pc, #300]	; (8080340 <_Z16takeMeasurementsv+0x1dc>)
 8080212:	6018      	str	r0, [r3, #0]
  snprintf(soilMoisture6String,sizeof(soilMoisture6String), "%4.1f %%", soilMoisture6);
 8080214:	f002 ff00 	bl	8083018 <__aeabi_f2d>
 8080218:	4a3f      	ldr	r2, [pc, #252]	; (8080318 <_Z16takeMeasurementsv+0x1b4>)
 808021a:	e9cd 0100 	strd	r0, r1, [sp]
 808021e:	2110      	movs	r1, #16
 8080220:	4848      	ldr	r0, [pc, #288]	; (8080344 <_Z16takeMeasurementsv+0x1e0>)
 8080222:	f001 fa0d 	bl	8081640 <snprintf>

  // Number of times the precipitation counter has tipped
  precipitationCount = random(1000);
 8080226:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808022a:	f001 ffc6 	bl	80821ba <_Z6randomi>
 808022e:	4a46      	ldr	r2, [pc, #280]	; (8080348 <_Z16takeMeasurementsv+0x1e4>)
 8080230:	4603      	mov	r3, r0
  snprintf(precipitationCountString,sizeof(precipitationCountString), "%i tips", precipitationCount);
 8080232:	2110      	movs	r1, #16
  snprintf(soilMoisture5String,sizeof(soilMoisture5String), "%4.1f %%", soilMoisture5);
  soilMoisture6 = random(100);
  snprintf(soilMoisture6String,sizeof(soilMoisture6String), "%4.1f %%", soilMoisture6);

  // Number of times the precipitation counter has tipped
  precipitationCount = random(1000);
 8080234:	6010      	str	r0, [r2, #0]
  snprintf(precipitationCountString,sizeof(precipitationCountString), "%i tips", precipitationCount);
 8080236:	4a45      	ldr	r2, [pc, #276]	; (808034c <_Z16takeMeasurementsv+0x1e8>)
 8080238:	4845      	ldr	r0, [pc, #276]	; (8080350 <_Z16takeMeasurementsv+0x1ec>)
 808023a:	f001 fa01 	bl	8081640 <snprintf>

  // Measure the soil temp
  soilTempInC = random(100);
 808023e:	2064      	movs	r0, #100	; 0x64
 8080240:	f001 ffbb 	bl	80821ba <_Z6randomi>
 8080244:	f002 fff6 	bl	8083234 <__aeabi_i2f>
 8080248:	4b42      	ldr	r3, [pc, #264]	; (8080354 <_Z16takeMeasurementsv+0x1f0>)
 808024a:	6018      	str	r0, [r3, #0]
  snprintf(soilTempInCString, sizeof(soilTempInCString), "%4.1f C", soilTempInC);
 808024c:	f002 fee4 	bl	8083018 <__aeabi_f2d>
 8080250:	4a41      	ldr	r2, [pc, #260]	; (8080358 <_Z16takeMeasurementsv+0x1f4>)
 8080252:	e9cd 0100 	strd	r0, r1, [sp]
 8080256:	2110      	movs	r1, #16
 8080258:	4840      	ldr	r0, [pc, #256]	; (808035c <_Z16takeMeasurementsv+0x1f8>)
 808025a:	f001 f9f1 	bl	8081640 <snprintf>

  // Meaure air temp and humidity
  humidity = random(100);
 808025e:	2064      	movs	r0, #100	; 0x64
 8080260:	f001 ffab 	bl	80821ba <_Z6randomi>
 8080264:	f002 ffe6 	bl	8083234 <__aeabi_i2f>
 8080268:	4b3d      	ldr	r3, [pc, #244]	; (8080360 <_Z16takeMeasurementsv+0x1fc>)
 808026a:	6018      	str	r0, [r3, #0]
  snprintf(humidityString,sizeof(humidityString), "%4.1f %%", humidity);
 808026c:	f002 fed4 	bl	8083018 <__aeabi_f2d>
 8080270:	4a29      	ldr	r2, [pc, #164]	; (8080318 <_Z16takeMeasurementsv+0x1b4>)
 8080272:	e9cd 0100 	strd	r0, r1, [sp]
 8080276:	2110      	movs	r1, #16
 8080278:	483a      	ldr	r0, [pc, #232]	; (8080364 <_Z16takeMeasurementsv+0x200>)
 808027a:	f001 f9e1 	bl	8081640 <snprintf>

  temperature = random(100);
 808027e:	2064      	movs	r0, #100	; 0x64
 8080280:	f001 ff9b 	bl	80821ba <_Z6randomi>
 8080284:	f002 ffd6 	bl	8083234 <__aeabi_i2f>
 8080288:	4b37      	ldr	r3, [pc, #220]	; (8080368 <_Z16takeMeasurementsv+0x204>)
 808028a:	6018      	str	r0, [r3, #0]
  snprintf(temperatureString,sizeof(temperatureString), "%4.1f C", temperature);
 808028c:	f002 fec4 	bl	8083018 <__aeabi_f2d>
 8080290:	4a31      	ldr	r2, [pc, #196]	; (8080358 <_Z16takeMeasurementsv+0x1f4>)
 8080292:	e9cd 0100 	strd	r0, r1, [sp]
 8080296:	2110      	movs	r1, #16
 8080298:	4834      	ldr	r0, [pc, #208]	; (808036c <_Z16takeMeasurementsv+0x208>)
 808029a:	f001 f9d1 	bl	8081640 <snprintf>

  // Measure panel temp and humidity
  panelHumidity = random(100);
 808029e:	2064      	movs	r0, #100	; 0x64
 80802a0:	f001 ff8b 	bl	80821ba <_Z6randomi>
 80802a4:	f002 ffc6 	bl	8083234 <__aeabi_i2f>
 80802a8:	4b31      	ldr	r3, [pc, #196]	; (8080370 <_Z16takeMeasurementsv+0x20c>)
 80802aa:	6018      	str	r0, [r3, #0]
  snprintf(panelHumidityString,sizeof(panelHumidityString), "%4.1f %%", panelHumidity);
 80802ac:	f002 feb4 	bl	8083018 <__aeabi_f2d>
 80802b0:	4a19      	ldr	r2, [pc, #100]	; (8080318 <_Z16takeMeasurementsv+0x1b4>)
 80802b2:	e9cd 0100 	strd	r0, r1, [sp]
 80802b6:	2110      	movs	r1, #16
 80802b8:	482e      	ldr	r0, [pc, #184]	; (8080374 <_Z16takeMeasurementsv+0x210>)
 80802ba:	f001 f9c1 	bl	8081640 <snprintf>

  panelTemperature = random(100);
 80802be:	2064      	movs	r0, #100	; 0x64
 80802c0:	f001 ff7b 	bl	80821ba <_Z6randomi>
 80802c4:	f002 ffb6 	bl	8083234 <__aeabi_i2f>
 80802c8:	4b2b      	ldr	r3, [pc, #172]	; (8080378 <_Z16takeMeasurementsv+0x214>)
 80802ca:	6018      	str	r0, [r3, #0]
  snprintf(panelTemperatureString,sizeof(panelTemperatureString), "%4.1f C", panelTemperature);
 80802cc:	f002 fea4 	bl	8083018 <__aeabi_f2d>
 80802d0:	4a21      	ldr	r2, [pc, #132]	; (8080358 <_Z16takeMeasurementsv+0x1f4>)
 80802d2:	e9cd 0100 	strd	r0, r1, [sp]
 80802d6:	2110      	movs	r1, #16
 80802d8:	4828      	ldr	r0, [pc, #160]	; (808037c <_Z16takeMeasurementsv+0x218>)
 80802da:	f001 f9b1 	bl	8081640 <snprintf>

  // Get battery voltage level
  batteryVoltage = 4.0;                      // Voltage level of battery
 80802de:	4b28      	ldr	r3, [pc, #160]	; (8080380 <_Z16takeMeasurementsv+0x21c>)
 80802e0:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80802e4:	601a      	str	r2, [r3, #0]
  snprintf(batteryString, sizeof(batteryString), "%4.1f %%", batteryVoltage);
 80802e6:	4b27      	ldr	r3, [pc, #156]	; (8080384 <_Z16takeMeasurementsv+0x220>)
 80802e8:	2200      	movs	r2, #0
 80802ea:	e9cd 2300 	strd	r2, r3, [sp]
 80802ee:	2110      	movs	r1, #16
 80802f0:	4a09      	ldr	r2, [pc, #36]	; (8080318 <_Z16takeMeasurementsv+0x1b4>)
 80802f2:	4825      	ldr	r0, [pc, #148]	; (8080388 <_Z16takeMeasurementsv+0x224>)
 80802f4:	f001 f9a4 	bl	8081640 <snprintf>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80802f8:	4b24      	ldr	r3, [pc, #144]	; (808038c <_Z16takeMeasurementsv+0x228>)
 80802fa:	2200      	movs	r2, #0
 80802fc:	4611      	mov	r1, r2
 80802fe:	6858      	ldr	r0, [r3, #4]
 8080300:	f001 f93e 	bl	8081580 <network_ready>

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
 8080304:	b108      	cbz	r0, 808030a <_Z16takeMeasurementsv+0x1a6>
 8080306:	f7ff fef5 	bl	80800f4 <_Z17getSignalStrengthv>

  return 1;
}
 808030a:	2001      	movs	r0, #1
 808030c:	b003      	add	sp, #12
 808030e:	f85d fb04 	ldr.w	pc, [sp], #4
 8080312:	bf00      	nop
 8080314:	20000628 	.word	0x20000628
 8080318:	080843a5 	.word	0x080843a5
 808031c:	20000580 	.word	0x20000580
 8080320:	2000062c 	.word	0x2000062c
 8080324:	200005a0 	.word	0x200005a0
 8080328:	20000620 	.word	0x20000620
 808032c:	200005c1 	.word	0x200005c1
 8080330:	20000634 	.word	0x20000634
 8080334:	200005d9 	.word	0x200005d9
 8080338:	20000638 	.word	0x20000638
 808033c:	20000608 	.word	0x20000608
 8080340:	20000624 	.word	0x20000624
 8080344:	20000570 	.word	0x20000570
 8080348:	200005bc 	.word	0x200005bc
 808034c:	080843ae 	.word	0x080843ae
 8080350:	200005f0 	.word	0x200005f0
 8080354:	200005ec 	.word	0x200005ec
 8080358:	080843b6 	.word	0x080843b6
 808035c:	200006e4 	.word	0x200006e4
 8080360:	20000590 	.word	0x20000590
 8080364:	200006b8 	.word	0x200006b8
 8080368:	200006dc 	.word	0x200006dc
 808036c:	20000559 	.word	0x20000559
 8080370:	200005d4 	.word	0x200005d4
 8080374:	200006a0 	.word	0x200006a0
 8080378:	200005b8 	.word	0x200005b8
 808037c:	20000690 	.word	0x20000690
 8080380:	200006b4 	.word	0x200006b4
 8080384:	40100000 	.word	0x40100000
 8080388:	200006c8 	.word	0x200006c8
 808038c:	200006f4 	.word	0x200006f4

08080390 <_Z17connectToParticlev>:
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
 8080390:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8080394:	481a      	ldr	r0, [pc, #104]	; (8080400 <_Z17connectToParticlev+0x70>)
 8080396:	2300      	movs	r3, #0
 8080398:	461a      	mov	r2, r3
 808039a:	4619      	mov	r1, r3
 808039c:	6840      	ldr	r0, [r0, #4]
 808039e:	f001 f8f7 	bl	8081590 <network_on>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80803a2:	f240 36e7 	movw	r6, #999	; 0x3e7
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80803a6:	f001 f88b 	bl	80814c0 <spark_cloud_flag_connect>
 80803aa:	f44f 7496 	mov.w	r4, #300	; 0x12c
 80803ae:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80803b0:	2000      	movs	r0, #0
 80803b2:	f000 ff31 	bl	8081218 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80803b6:	4680      	mov	r8, r0
 80803b8:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80803bc:	2000      	movs	r0, #0
 80803be:	f000 ff2b 	bl	8081218 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80803c2:	ebb0 0008 	subs.w	r0, r0, r8
 80803c6:	eb61 0109 	sbc.w	r1, r1, r9
 80803ca:	428f      	cmp	r7, r1
 80803cc:	bf08      	it	eq
 80803ce:	4286      	cmpeq	r6, r0
 80803d0:	d305      	bcc.n	80803de <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80803d2:	f001 f885 	bl	80814e0 <spark_cloud_flag_connected>
 80803d6:	b910      	cbnz	r0, 80803de <_Z17connectToParticlev+0x4e>
            spark_process();
 80803d8:	f001 f86a 	bl	80814b0 <spark_process>
 80803dc:	e7ee      	b.n	80803bc <_Z17connectToParticlev+0x2c>
 80803de:	f001 f87f 	bl	80814e0 <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 80803e2:	b118      	cbz	r0, 80803ec <_Z17connectToParticlev+0x5c>
    // Code I want to run while connecting
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
 80803e4:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
 80803e8:	f001 b87a 	b.w	80814e0 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80803ec:	f000 fedc 	bl	80811a8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80803f0:	4b04      	ldr	r3, [pc, #16]	; (8080404 <_Z17connectToParticlev+0x74>)
 80803f2:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80803f4:	f001 f85c 	bl	80814b0 <spark_process>
// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 80803f8:	3c01      	subs	r4, #1
 80803fa:	d0f3      	beq.n	80803e4 <_Z17connectToParticlev+0x54>
 80803fc:	e7d8      	b.n	80803b0 <_Z17connectToParticlev+0x20>
 80803fe:	bf00      	nop
 8080400:	200006f4 	.word	0x200006f4
 8080404:	20000c0c 	.word	0x20000c0c

08080408 <_Z22disconnectFromParticlev>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()
{
 8080408:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
 808040a:	f001 f861 	bl	80814d0 <spark_cloud_flag_disconnect>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 808040e:	4806      	ldr	r0, [pc, #24]	; (8080428 <_Z22disconnectFromParticlev+0x20>)
 8080410:	2300      	movs	r3, #0
 8080412:	461a      	mov	r2, r3
 8080414:	4619      	mov	r1, r3
 8080416:	6840      	ldr	r0, [r0, #4]
 8080418:	f001 f8c2 	bl	80815a0 <network_off>
  Particle.disconnect();                                          // Otherwise Electron will attempt to reconnect on wake
  Cellular.off();
  delay(1000);                                                    // Bummer but only should happen once an hour
 808041c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080420:	f001 f926 	bl	8081670 <delay>
  return true;
}
 8080424:	2001      	movs	r0, #1
 8080426:	bd08      	pop	{r3, pc}
 8080428:	200006f4 	.word	0x200006f4

0808042c <_Z20meterParticlePublishv>:
  }
  Serial.println(stateTransitionString);
}

bool meterParticlePublish(void)
{
 808042c:	b508      	push	{r3, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808042e:	f000 febb 	bl	80811a8 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
 8080432:	4b04      	ldr	r3, [pc, #16]	; (8080444 <_Z20meterParticlePublishv+0x18>)
 8080434:	681b      	ldr	r3, [r3, #0]
 8080436:	1ac0      	subs	r0, r0, r3
  else return 0;
}
 8080438:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 808043c:	bf34      	ite	cc
 808043e:	2000      	movcc	r0, #0
 8080440:	2001      	movcs	r0, #1
 8080442:	bd08      	pop	{r3, pc}
 8080444:	200006e0 	.word	0x200006e0

08080448 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.27>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
 8080448:	b508      	push	{r3, lr}
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
  oldState = state;
  if(Particle.connected()) {
    waitUntil(meterParticlePublish);
 808044a:	f7ff ffef 	bl	808042c <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808044e:	b118      	cbz	r0, 8080458 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.27+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
 8080450:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8080454:	f7ff bfea 	b.w	808042c <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
 8080458:	f001 f82a 	bl	80814b0 <spark_process>
 808045c:	e7f5      	b.n	808044a <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.27+0x2>
	...

08080460 <_Z14fullModemResetv>:
{
  if(millis() - lastPublish >= publishFrequency) return 1;
  else return 0;
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
 8080460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080462:	f001 f835 	bl	80814d0 <spark_cloud_flag_disconnect>
 8080466:	f000 fe9f 	bl	80811a8 <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 808046a:	f643 2597 	movw	r5, #14999	; 0x3a97
 808046e:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080470:	f001 f836 	bl	80814e0 <spark_cloud_flag_connected>
 8080474:	b140      	cbz	r0, 8080488 <_Z14fullModemResetv+0x28>
 8080476:	f000 fe97 	bl	80811a8 <HAL_Timer_Get_Milli_Seconds>
 808047a:	1b00      	subs	r0, r0, r4
 808047c:	42a8      	cmp	r0, r5
 808047e:	d803      	bhi.n	8080488 <_Z14fullModemResetv+0x28>
		delay(100);
 8080480:	2064      	movs	r0, #100	; 0x64
 8080482:	f001 f8f5 	bl	8081670 <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 8080486:	e7f3      	b.n	8080470 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 8080488:	2100      	movs	r1, #0
 808048a:	4b09      	ldr	r3, [pc, #36]	; (80804b0 <_Z14fullModemResetv+0x50>)
 808048c:	f247 5230 	movw	r2, #30000	; 0x7530
 8080490:	4608      	mov	r0, r1
 8080492:	f000 fe59 	bl	8081148 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 8080496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808049a:	f001 f8e9 	bl	8081670 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 808049e:	4b05      	ldr	r3, [pc, #20]	; (80804b4 <_Z14fullModemResetv+0x54>)
 80804a0:	220a      	movs	r2, #10
 80804a2:	681b      	ldr	r3, [r3, #0]
 80804a4:	2101      	movs	r1, #1
 80804a6:	4668      	mov	r0, sp
 80804a8:	f001 ff6c 	bl	8082384 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 80804ac:	b003      	add	sp, #12
 80804ae:	bd30      	pop	{r4, r5, pc}
 80804b0:	080843be 	.word	0x080843be
 80804b4:	20000630 	.word	0x20000630

080804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80804b8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80804ba:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80804bc:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80804be:	b17c      	cbz	r4, 80804e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80804c0:	6863      	ldr	r3, [r4, #4]
 80804c2:	3b01      	subs	r3, #1
 80804c4:	6063      	str	r3, [r4, #4]
 80804c6:	b95b      	cbnz	r3, 80804e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80804c8:	6823      	ldr	r3, [r4, #0]
 80804ca:	4620      	mov	r0, r4
 80804cc:	689b      	ldr	r3, [r3, #8]
 80804ce:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80804d0:	68a3      	ldr	r3, [r4, #8]
 80804d2:	3b01      	subs	r3, #1
 80804d4:	60a3      	str	r3, [r4, #8]
 80804d6:	b91b      	cbnz	r3, 80804e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80804d8:	6823      	ldr	r3, [r4, #0]
 80804da:	4620      	mov	r0, r4
 80804dc:	68db      	ldr	r3, [r3, #12]
 80804de:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80804e0:	4628      	mov	r0, r5
 80804e2:	bd38      	pop	{r3, r4, r5, pc}

080804e4 <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
 80804e4:	b500      	push	{lr}
  char data[512];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Soilmoisture1\":%4.1f, \"Soilmoisture2\":%4.1f, \"Soilmoisture3\":%4.1f, \"Soilmoisture4\":%4.1f, \"Soilmoisture5\":%4.1f, \"Soilmoisture6\":%4.1f, \"Precipitation\": %i, \"Soiltemp\":%4.1f, \"Humidity\":%4.1f, \"Temperature\":%4.1f, \"Panelhumidity\":%4.1f, \"Paneltemperature\":%4.1f, \"Battery\":%4.1f, \"Radiotech\": %i, \"Signal\": %4.1f, \"Quality\": %4.1f, \"Resets\":%i, \"Alerts\":%i}", soilMoisture1, soilMoisture2, soilMoisture3, soilMoisture4, soilMoisture5, soilMoisture6, precipitationCount, soilTempInC, humidity, temperature, panelHumidity, panelTemperature, batteryVoltage, rat, strengthPercentage, qualityPercentage,resetCount, alertCount);
 80804e6:	4b44      	ldr	r3, [pc, #272]	; (80805f8 <_Z9sendEventv+0x114>)
    break;
  }
}

void sendEvent()
{
 80804e8:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
  char data[512];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Soilmoisture1\":%4.1f, \"Soilmoisture2\":%4.1f, \"Soilmoisture3\":%4.1f, \"Soilmoisture4\":%4.1f, \"Soilmoisture5\":%4.1f, \"Soilmoisture6\":%4.1f, \"Precipitation\": %i, \"Soiltemp\":%4.1f, \"Humidity\":%4.1f, \"Temperature\":%4.1f, \"Panelhumidity\":%4.1f, \"Paneltemperature\":%4.1f, \"Battery\":%4.1f, \"Radiotech\": %i, \"Signal\": %4.1f, \"Quality\": %4.1f, \"Resets\":%i, \"Alerts\":%i}", soilMoisture1, soilMoisture2, soilMoisture3, soilMoisture4, soilMoisture5, soilMoisture6, precipitationCount, soilTempInC, humidity, temperature, panelHumidity, panelTemperature, batteryVoltage, rat, strengthPercentage, qualityPercentage,resetCount, alertCount);
 80804ec:	681b      	ldr	r3, [r3, #0]
 80804ee:	9321      	str	r3, [sp, #132]	; 0x84
 80804f0:	4b42      	ldr	r3, [pc, #264]	; (80805fc <_Z9sendEventv+0x118>)
 80804f2:	681b      	ldr	r3, [r3, #0]
 80804f4:	9320      	str	r3, [sp, #128]	; 0x80
 80804f6:	4b42      	ldr	r3, [pc, #264]	; (8080600 <_Z9sendEventv+0x11c>)
 80804f8:	6818      	ldr	r0, [r3, #0]
 80804fa:	f002 fd8d 	bl	8083018 <__aeabi_f2d>
 80804fe:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 8080502:	4b40      	ldr	r3, [pc, #256]	; (8080604 <_Z9sendEventv+0x120>)
 8080504:	6818      	ldr	r0, [r3, #0]
 8080506:	f002 fd87 	bl	8083018 <__aeabi_f2d>
 808050a:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 808050e:	4b3e      	ldr	r3, [pc, #248]	; (8080608 <_Z9sendEventv+0x124>)
 8080510:	681b      	ldr	r3, [r3, #0]
 8080512:	931a      	str	r3, [sp, #104]	; 0x68
 8080514:	4b3d      	ldr	r3, [pc, #244]	; (808060c <_Z9sendEventv+0x128>)
 8080516:	6818      	ldr	r0, [r3, #0]
 8080518:	f002 fd7e 	bl	8083018 <__aeabi_f2d>
 808051c:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8080520:	4b3b      	ldr	r3, [pc, #236]	; (8080610 <_Z9sendEventv+0x12c>)
 8080522:	6818      	ldr	r0, [r3, #0]
 8080524:	f002 fd78 	bl	8083018 <__aeabi_f2d>
 8080528:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 808052c:	4b39      	ldr	r3, [pc, #228]	; (8080614 <_Z9sendEventv+0x130>)
 808052e:	6818      	ldr	r0, [r3, #0]
 8080530:	f002 fd72 	bl	8083018 <__aeabi_f2d>
 8080534:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8080538:	4b37      	ldr	r3, [pc, #220]	; (8080618 <_Z9sendEventv+0x134>)
 808053a:	6818      	ldr	r0, [r3, #0]
 808053c:	f002 fd6c 	bl	8083018 <__aeabi_f2d>
 8080540:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8080544:	4b35      	ldr	r3, [pc, #212]	; (808061c <_Z9sendEventv+0x138>)
 8080546:	6818      	ldr	r0, [r3, #0]
 8080548:	f002 fd66 	bl	8083018 <__aeabi_f2d>
 808054c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8080550:	4b33      	ldr	r3, [pc, #204]	; (8080620 <_Z9sendEventv+0x13c>)
 8080552:	6818      	ldr	r0, [r3, #0]
 8080554:	f002 fd60 	bl	8083018 <__aeabi_f2d>
 8080558:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 808055c:	4b31      	ldr	r3, [pc, #196]	; (8080624 <_Z9sendEventv+0x140>)
 808055e:	681b      	ldr	r3, [r3, #0]
 8080560:	930c      	str	r3, [sp, #48]	; 0x30
 8080562:	4b31      	ldr	r3, [pc, #196]	; (8080628 <_Z9sendEventv+0x144>)
 8080564:	6818      	ldr	r0, [r3, #0]
 8080566:	f002 fd57 	bl	8083018 <__aeabi_f2d>
 808056a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 808056e:	4b2f      	ldr	r3, [pc, #188]	; (808062c <_Z9sendEventv+0x148>)
 8080570:	6818      	ldr	r0, [r3, #0]
 8080572:	f002 fd51 	bl	8083018 <__aeabi_f2d>
 8080576:	e9cd 0108 	strd	r0, r1, [sp, #32]
 808057a:	4b2d      	ldr	r3, [pc, #180]	; (8080630 <_Z9sendEventv+0x14c>)
 808057c:	6818      	ldr	r0, [r3, #0]
 808057e:	f002 fd4b 	bl	8083018 <__aeabi_f2d>
 8080582:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8080586:	4b2b      	ldr	r3, [pc, #172]	; (8080634 <_Z9sendEventv+0x150>)
 8080588:	6818      	ldr	r0, [r3, #0]
 808058a:	f002 fd45 	bl	8083018 <__aeabi_f2d>
 808058e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8080592:	4b29      	ldr	r3, [pc, #164]	; (8080638 <_Z9sendEventv+0x154>)
 8080594:	6818      	ldr	r0, [r3, #0]
 8080596:	f002 fd3f 	bl	8083018 <__aeabi_f2d>
 808059a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808059e:	4b27      	ldr	r3, [pc, #156]	; (808063c <_Z9sendEventv+0x158>)
 80805a0:	6818      	ldr	r0, [r3, #0]
 80805a2:	f002 fd39 	bl	8083018 <__aeabi_f2d>
 80805a6:	4a26      	ldr	r2, [pc, #152]	; (8080640 <_Z9sendEventv+0x15c>)
 80805a8:	e9cd 0100 	strd	r0, r1, [sp]
 80805ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80805b0:	a824      	add	r0, sp, #144	; 0x90
 80805b2:	f001 f845 	bl	8081640 <snprintf>
 80805b6:	4b23      	ldr	r3, [pc, #140]	; (8080644 <_Z9sendEventv+0x160>)
  Particle.publish("Cellular_LiPo_Hook", data, PRIVATE);
 80805b8:	2200      	movs	r2, #0
 80805ba:	4923      	ldr	r1, [pc, #140]	; (8080648 <_Z9sendEventv+0x164>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80805bc:	781b      	ldrb	r3, [r3, #0]
 80805be:	a822      	add	r0, sp, #136	; 0x88
 80805c0:	f88d 2000 	strb.w	r2, [sp]
 80805c4:	aa24      	add	r2, sp, #144	; 0x90
 80805c6:	f7ff fd87 	bl	80800d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.33.constprop.37>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80805ca:	a823      	add	r0, sp, #140	; 0x8c
 80805cc:	f7ff ff74 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentHourlyPeriod = Time.hour();                                      // Change the time period
 80805d0:	f001 ffa2 	bl	8082518 <_ZN9TimeClass4hourEv>
 80805d4:	4b1d      	ldr	r3, [pc, #116]	; (808064c <_Z9sendEventv+0x168>)
 80805d6:	7018      	strb	r0, [r3, #0]
  currentDailyPeriod = Time.day();
 80805d8:	f001 ffb2 	bl	8082540 <_ZN9TimeClass3dayEv>
 80805dc:	4b1c      	ldr	r3, [pc, #112]	; (8080650 <_Z9sendEventv+0x16c>)
  dataInFlight = true;                                                // set the data inflight flag
 80805de:	2201      	movs	r2, #1
{
  char data[512];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Soilmoisture1\":%4.1f, \"Soilmoisture2\":%4.1f, \"Soilmoisture3\":%4.1f, \"Soilmoisture4\":%4.1f, \"Soilmoisture5\":%4.1f, \"Soilmoisture6\":%4.1f, \"Precipitation\": %i, \"Soiltemp\":%4.1f, \"Humidity\":%4.1f, \"Temperature\":%4.1f, \"Panelhumidity\":%4.1f, \"Paneltemperature\":%4.1f, \"Battery\":%4.1f, \"Radiotech\": %i, \"Signal\": %4.1f, \"Quality\": %4.1f, \"Resets\":%i, \"Alerts\":%i}", soilMoisture1, soilMoisture2, soilMoisture3, soilMoisture4, soilMoisture5, soilMoisture6, precipitationCount, soilTempInC, humidity, temperature, panelHumidity, panelTemperature, batteryVoltage, rat, strengthPercentage, qualityPercentage,resetCount, alertCount);
  Particle.publish("Cellular_LiPo_Hook", data, PRIVATE);
  currentHourlyPeriod = Time.hour();                                      // Change the time period
  currentDailyPeriod = Time.day();
 80805e0:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                // set the data inflight flag
 80805e2:	4b1c      	ldr	r3, [pc, #112]	; (8080654 <_Z9sendEventv+0x170>)
 80805e4:	701a      	strb	r2, [r3, #0]
 80805e6:	f000 fddf 	bl	80811a8 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
 80805ea:	4b1b      	ldr	r3, [pc, #108]	; (8080658 <_Z9sendEventv+0x174>)
 80805ec:	6018      	str	r0, [r3, #0]

}
 80805ee:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 80805f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80805f6:	bf00      	nop
 80805f8:	20000600 	.word	0x20000600
 80805fc:	20000618 	.word	0x20000618
 8080600:	20000640 	.word	0x20000640
 8080604:	20000604 	.word	0x20000604
 8080608:	200005b4 	.word	0x200005b4
 808060c:	200006b4 	.word	0x200006b4
 8080610:	200005b8 	.word	0x200005b8
 8080614:	200005d4 	.word	0x200005d4
 8080618:	200006dc 	.word	0x200006dc
 808061c:	20000590 	.word	0x20000590
 8080620:	200005ec 	.word	0x200005ec
 8080624:	200005bc 	.word	0x200005bc
 8080628:	20000624 	.word	0x20000624
 808062c:	20000638 	.word	0x20000638
 8080630:	20000634 	.word	0x20000634
 8080634:	20000620 	.word	0x20000620
 8080638:	2000062c 	.word	0x2000062c
 808063c:	20000628 	.word	0x20000628
 8080640:	080843cb 	.word	0x080843cb
 8080644:	20000594 	.word	0x20000594
 8080648:	08084534 	.word	0x08084534
 808064c:	2000061c 	.word	0x2000061c
 8080650:	200005d8 	.word	0x200005d8
 8080654:	20000474 	.word	0x20000474
 8080658:	2000056c 	.word	0x2000056c

0808065c <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
 808065c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808065e:	b085      	sub	sp, #20
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
 8080660:	4608      	mov	r0, r1
  webhookTimeStamp = millis();

}

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
 8080662:	af02      	add	r7, sp, #8
 8080664:	460e      	mov	r6, r1
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
 8080666:	f003 fa0e 	bl	8083a86 <strlen>
 808066a:	f100 0308 	add.w	r3, r0, #8
 808066e:	f023 0307 	bic.w	r3, r3, #7
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
    lastPublish = millis();
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
 8080672:	466d      	mov	r5, sp

}

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
 8080674:	ebad 0d03 	sub.w	sp, sp, r3
 8080678:	ac02      	add	r4, sp, #8
  strncpy(dataCopy, data, sizeof(dataCopy));                          // Copy - overflow safe
 808067a:	1c42      	adds	r2, r0, #1
 808067c:	4631      	mov	r1, r6
 808067e:	4620      	mov	r0, r4
 8080680:	f003 fa1e 	bl	8083ac0 <strncpy>
  if (!strlen(dataCopy)) {                                            // First check to see if there is any data
 8080684:	f89d 6008 	ldrb.w	r6, [sp, #8]
 8080688:	b94e      	cbnz	r6, 808069e <_Z14UbidotsHandlerPKcS0_+0x42>
 808068a:	f000 ff29 	bl	80814e0 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
 808068e:	2800      	cmp	r0, #0
 8080690:	d03b      	beq.n	808070a <_Z14UbidotsHandlerPKcS0_+0xae>
 8080692:	4b20      	ldr	r3, [pc, #128]	; (8080714 <_Z14UbidotsHandlerPKcS0_+0xb8>)
 8080694:	4a20      	ldr	r2, [pc, #128]	; (8080718 <_Z14UbidotsHandlerPKcS0_+0xbc>)
 8080696:	781b      	ldrb	r3, [r3, #0]
 8080698:	f88d 6000 	strb.w	r6, [sp]
 808069c:	e02e      	b.n	80806fc <_Z14UbidotsHandlerPKcS0_+0xa0>
    return;
  }
  int responseCode = atoi(dataCopy);                                  // Response is only a single number thanks to Template
 808069e:	4620      	mov	r0, r4
 80806a0:	f003 f844 	bl	808372c <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 80806a4:	38c8      	subs	r0, #200	; 0xc8
 80806a6:	2801      	cmp	r0, #1
 80806a8:	d81f      	bhi.n	80806ea <_Z14UbidotsHandlerPKcS0_+0x8e>
 80806aa:	f000 ff19 	bl	80814e0 <spark_cloud_flag_connected>
  {
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
 80806ae:	b160      	cbz	r0, 80806ca <_Z14UbidotsHandlerPKcS0_+0x6e>
 80806b0:	4b18      	ldr	r3, [pc, #96]	; (8080714 <_Z14UbidotsHandlerPKcS0_+0xb8>)
 80806b2:	2200      	movs	r2, #0
 80806b4:	781b      	ldrb	r3, [r3, #0]
 80806b6:	4638      	mov	r0, r7
 80806b8:	f88d 2000 	strb.w	r2, [sp]
 80806bc:	4917      	ldr	r1, [pc, #92]	; (808071c <_Z14UbidotsHandlerPKcS0_+0xc0>)
 80806be:	4a18      	ldr	r2, [pc, #96]	; (8080720 <_Z14UbidotsHandlerPKcS0_+0xc4>)
 80806c0:	f7ff fd0a 	bl	80800d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.33.constprop.37>
 80806c4:	1d38      	adds	r0, r7, #4
 80806c6:	f7ff fef7 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80806ca:	f000 fd6d 	bl	80811a8 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 80806ce:	4b15      	ldr	r3, [pc, #84]	; (8080724 <_Z14UbidotsHandlerPKcS0_+0xc8>)
 80806d0:	6018      	str	r0, [r3, #0]
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
 80806d2:	f002 f973 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 80806d6:	f001 ff18 	bl	808250a <_ZN9TimeClass3nowEv>
 80806da:	b2c1      	uxtb	r1, r0
 80806dc:	2005      	movs	r0, #5
 80806de:	f7ff fcf9 	bl	80800d4 <_ZN11EEPROMClass5writeEih.isra.15>
    dataInFlight = false;                                             // Data has been received
 80806e2:	4b11      	ldr	r3, [pc, #68]	; (8080728 <_Z14UbidotsHandlerPKcS0_+0xcc>)
 80806e4:	2200      	movs	r2, #0
 80806e6:	701a      	strb	r2, [r3, #0]
 80806e8:	e00f      	b.n	808070a <_Z14UbidotsHandlerPKcS0_+0xae>
 80806ea:	f000 fef9 	bl	80814e0 <spark_cloud_flag_connected>
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
 80806ee:	b160      	cbz	r0, 808070a <_Z14UbidotsHandlerPKcS0_+0xae>
 80806f0:	4b08      	ldr	r3, [pc, #32]	; (8080714 <_Z14UbidotsHandlerPKcS0_+0xb8>)
 80806f2:	2200      	movs	r2, #0
 80806f4:	781b      	ldrb	r3, [r3, #0]
 80806f6:	f88d 2000 	strb.w	r2, [sp]
 80806fa:	4622      	mov	r2, r4
 80806fc:	4638      	mov	r0, r7
 80806fe:	490b      	ldr	r1, [pc, #44]	; (808072c <_Z14UbidotsHandlerPKcS0_+0xd0>)
 8080700:	f7ff fcea 	bl	80800d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.33.constprop.37>
 8080704:	1d38      	adds	r0, r7, #4
 8080706:	f7ff fed7 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
  strncpy(dataCopy, data, sizeof(dataCopy));                          // Copy - overflow safe
  if (!strlen(dataCopy)) {                                            // First check to see if there is any data
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    return;
 808070a:	46ad      	mov	sp, r5
    lastPublish = millis();
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
}
 808070c:	370c      	adds	r7, #12
 808070e:	46bd      	mov	sp, r7
 8080710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080712:	bf00      	nop
 8080714:	20000594 	.word	0x20000594
 8080718:	08084547 	.word	0x08084547
 808071c:	0808456e 	.word	0x0808456e
 8080720:	0808455c 	.word	0x0808455c
 8080724:	200006e0 	.word	0x200006e0
 8080728:	20000474 	.word	0x20000474
 808072c:	0808454f 	.word	0x0808454f

08080730 <_Z14setVerboseMode6String>:
  }
  else return 0;
}

int setVerboseMode(String command) // Function to force sending data in current hour
{
 8080730:	b530      	push	{r4, r5, lr}
 8080732:	4922      	ldr	r1, [pc, #136]	; (80807bc <_Z14setVerboseMode6String+0x8c>)
 8080734:	b085      	sub	sp, #20
 8080736:	4605      	mov	r5, r0
 8080738:	f001 fdf1 	bl	808231e <_ZNK6String6equalsEPKc>
  if (command == "1")
 808073c:	4604      	mov	r4, r0
 808073e:	b1c0      	cbz	r0, 8080772 <_Z14setVerboseMode6String+0x42>
  {
    verboseMode = true;
 8080740:	4b1f      	ldr	r3, [pc, #124]	; (80807c0 <_Z14setVerboseMode6String+0x90>)
 8080742:	2401      	movs	r4, #1
 8080744:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 8080746:	f002 f939 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 808074a:	2004      	movs	r0, #4
 808074c:	f7ff fcc0 	bl	80800d0 <_ZN11EEPROMClass4readEi.isra.14>
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 8080750:	4d1c      	ldr	r5, [pc, #112]	; (80807c4 <_Z14setVerboseMode6String+0x94>)
 8080752:	f040 0008 	orr.w	r0, r0, #8
 8080756:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 8080758:	f002 f930 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 808075c:	7829      	ldrb	r1, [r5, #0]
 808075e:	2004      	movs	r0, #4
 8080760:	f7ff fcb8 	bl	80800d4 <_ZN11EEPROMClass5writeEih.isra.15>
 8080764:	4b18      	ldr	r3, [pc, #96]	; (80807c8 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
 8080766:	2200      	movs	r2, #0
 8080768:	781b      	ldrb	r3, [r3, #0]
 808076a:	f88d 2000 	strb.w	r2, [sp]
 808076e:	4a17      	ldr	r2, [pc, #92]	; (80807cc <_Z14setVerboseMode6String+0x9c>)
 8080770:	e01a      	b.n	80807a8 <_Z14setVerboseMode6String+0x78>
 8080772:	4917      	ldr	r1, [pc, #92]	; (80807d0 <_Z14setVerboseMode6String+0xa0>)
 8080774:	4628      	mov	r0, r5
 8080776:	f001 fdd2 	bl	808231e <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 808077a:	b1e8      	cbz	r0, 80807b8 <_Z14setVerboseMode6String+0x88>
  {
    verboseMode = false;
 808077c:	4b10      	ldr	r3, [pc, #64]	; (80807c0 <_Z14setVerboseMode6String+0x90>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 808077e:	4d11      	ldr	r5, [pc, #68]	; (80807c4 <_Z14setVerboseMode6String+0x94>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
 8080780:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 8080782:	f002 f91b 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 8080786:	2004      	movs	r0, #4
 8080788:	f7ff fca2 	bl	80800d0 <_ZN11EEPROMClass4readEi.isra.14>
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 808078c:	f020 0008 	bic.w	r0, r0, #8
 8080790:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 8080792:	f002 f913 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 8080796:	7829      	ldrb	r1, [r5, #0]
 8080798:	2004      	movs	r0, #4
 808079a:	f7ff fc9b 	bl	80800d4 <_ZN11EEPROMClass5writeEih.isra.15>
 808079e:	4b0a      	ldr	r3, [pc, #40]	; (80807c8 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 80807a0:	4a0c      	ldr	r2, [pc, #48]	; (80807d4 <_Z14setVerboseMode6String+0xa4>)
 80807a2:	781b      	ldrb	r3, [r3, #0]
 80807a4:	f88d 4000 	strb.w	r4, [sp]
 80807a8:	490b      	ldr	r1, [pc, #44]	; (80807d8 <_Z14setVerboseMode6String+0xa8>)
 80807aa:	a802      	add	r0, sp, #8
 80807ac:	f7ff fc94 	bl	80800d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.33.constprop.37>
 80807b0:	a803      	add	r0, sp, #12
 80807b2:	f7ff fe81 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
 80807b6:	2001      	movs	r0, #1
  }
  else return 0;
}
 80807b8:	b005      	add	sp, #20
 80807ba:	bd30      	pop	{r4, r5, pc}
 80807bc:	080847b8 	.word	0x080847b8
 80807c0:	200005c0 	.word	0x200005c0
 80807c4:	200006d8 	.word	0x200006d8
 80807c8:	20000594 	.word	0x20000594
 80807cc:	08084574 	.word	0x08084574
 80807d0:	08084585 	.word	0x08084585
 80807d4:	08084587 	.word	0x08084587
 80807d8:	08084597 	.word	0x08084597

080807dc <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
 80807dc:	b570      	push	{r4, r5, r6, lr}
 80807de:	b0cc      	sub	sp, #304	; 0x130
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 80807e0:	220a      	movs	r2, #10
 80807e2:	a905      	add	r1, sp, #20
 80807e4:	6800      	ldr	r0, [r0, #0]
 80807e6:	f003 fa05 	bl	8083bf4 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 80807ea:	b2c5      	uxtb	r5, r0
 80807ec:	f105 030c 	add.w	r3, r5, #12
 80807f0:	b2db      	uxtb	r3, r3
 80807f2:	2b18      	cmp	r3, #24
 80807f4:	d83d      	bhi.n	8080872 <_Z11setTimeZone6String+0x96>

int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 80807f6:	b244      	sxtb	r4, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
 80807f8:	4620      	mov	r0, r4
 80807fa:	f002 fd1b 	bl	8083234 <__aeabi_i2f>
 80807fe:	f001 fe25 	bl	808244c <_ZN9TimeClass4zoneEf>
  EEPROM.write(MEM_MAP::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
 8080802:	f002 f8db 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 8080806:	4629      	mov	r1, r5
 8080808:	2003      	movs	r0, #3
 808080a:	f7ff fc63 	bl	80800d4 <_ZN11EEPROMClass5writeEih.isra.15>
  t = Time.now();
 808080e:	f001 fe7c 	bl	808250a <_ZN9TimeClass3nowEv>
 8080812:	4e19      	ldr	r6, [pc, #100]	; (8080878 <_Z11setTimeZone6String+0x9c>)
 8080814:	4d19      	ldr	r5, [pc, #100]	; (808087c <_Z11setTimeZone6String+0xa0>)
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8080816:	4623      	mov	r3, r4
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
  EEPROM.write(MEM_MAP::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
  t = Time.now();
 8080818:	6030      	str	r0, [r6, #0]
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 808081a:	4a19      	ldr	r2, [pc, #100]	; (8080880 <_Z11setTimeZone6String+0xa4>)
 808081c:	f44f 7180 	mov.w	r1, #256	; 0x100
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080820:	2400      	movs	r4, #0
 8080822:	a80c      	add	r0, sp, #48	; 0x30
 8080824:	f000 ff0c 	bl	8081640 <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080828:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Time",data,PRIVATE);
 808082a:	aa0c      	add	r2, sp, #48	; 0x30
 808082c:	4915      	ldr	r1, [pc, #84]	; (8080884 <_Z11setTimeZone6String+0xa8>)
 808082e:	a808      	add	r0, sp, #32
 8080830:	f88d 4000 	strb.w	r4, [sp]
 8080834:	f7ff fc50 	bl	80800d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.33.constprop.37>
 8080838:	a809      	add	r0, sp, #36	; 0x24
 808083a:	f7ff fe3d 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 808083e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080842:	f000 ff15 	bl	8081670 <delay>
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
 8080846:	6831      	ldr	r1, [r6, #0]
 8080848:	a808      	add	r0, sp, #32
 808084a:	f001 fe1b 	bl	8082484 <_ZN9TimeClass7timeStrEl>
 808084e:	9b08      	ldr	r3, [sp, #32]
 8080850:	490c      	ldr	r1, [pc, #48]	; (8080884 <_Z11setTimeZone6String+0xa8>)
 8080852:	9303      	str	r3, [sp, #12]
 8080854:	9a03      	ldr	r2, [sp, #12]
 8080856:	782b      	ldrb	r3, [r5, #0]
 8080858:	a806      	add	r0, sp, #24
 808085a:	f88d 4000 	strb.w	r4, [sp]
 808085e:	f7ff fc3b 	bl	80800d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.33.constprop.37>
 8080862:	a807      	add	r0, sp, #28
 8080864:	f7ff fe28 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080868:	a808      	add	r0, sp, #32
 808086a:	f001 fce4 	bl	8082236 <_ZN6StringD1Ev>
  return 1;
 808086e:	2001      	movs	r0, #1
 8080870:	e000      	b.n	8080874 <_Z11setTimeZone6String+0x98>
int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080872:	2000      	movs	r0, #0
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
  Particle.publish("Time",data,PRIVATE);
  delay(1000);
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
  return 1;
}
 8080874:	b04c      	add	sp, #304	; 0x130
 8080876:	bd70      	pop	{r4, r5, r6, pc}
 8080878:	2000059c 	.word	0x2000059c
 808087c:	20000594 	.word	0x20000594
 8080880:	0808459c 	.word	0x0808459c
 8080884:	080845b0 	.word	0x080845b0

08080888 <_Z15setLowPowerMode6String>:


int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
 8080888:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 808088a:	4926      	ldr	r1, [pc, #152]	; (8080924 <_Z15setLowPowerMode6String+0x9c>)
 808088c:	4605      	mov	r5, r0
 808088e:	f001 fd46 	bl	808231e <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
 8080892:	b928      	cbnz	r0, 80808a0 <_Z15setLowPowerMode6String+0x18>
 8080894:	4924      	ldr	r1, [pc, #144]	; (8080928 <_Z15setLowPowerMode6String+0xa0>)
 8080896:	4628      	mov	r0, r5
 8080898:	f001 fd41 	bl	808231e <_ZNK6String6equalsEPKc>
 808089c:	2800      	cmp	r0, #0
 808089e:	d03f      	beq.n	8080920 <_Z15setLowPowerMode6String+0x98>
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 80808a0:	f002 f88c 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 80808a4:	2004      	movs	r0, #4
 80808a6:	f7ff fc13 	bl	80800d0 <_ZN11EEPROMClass4readEi.isra.14>
 80808aa:	4c20      	ldr	r4, [pc, #128]	; (808092c <_Z15setLowPowerMode6String+0xa4>)
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80808ac:	491d      	ldr	r1, [pc, #116]	; (8080924 <_Z15setLowPowerMode6String+0x9c>)
 80808ae:	7020      	strb	r0, [r4, #0]
 80808b0:	4628      	mov	r0, r5
 80808b2:	f001 fd34 	bl	808231e <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
 80808b6:	4606      	mov	r6, r0
 80808b8:	b1a0      	cbz	r0, 80808e4 <_Z15setLowPowerMode6String+0x5c>
 80808ba:	4b1d      	ldr	r3, [pc, #116]	; (8080930 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Low Power",PRIVATE);
 80808bc:	2200      	movs	r2, #0
 80808be:	781b      	ldrb	r3, [r3, #0]
 80808c0:	491c      	ldr	r1, [pc, #112]	; (8080934 <_Z15setLowPowerMode6String+0xac>)
 80808c2:	f88d 2000 	strb.w	r2, [sp]
 80808c6:	a802      	add	r0, sp, #8
 80808c8:	4a1b      	ldr	r2, [pc, #108]	; (8080938 <_Z15setLowPowerMode6String+0xb0>)
 80808ca:	f7ff fc05 	bl	80800d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.33.constprop.37>
 80808ce:	a803      	add	r0, sp, #12
 80808d0:	f7ff fdf2 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
 80808d4:	7823      	ldrb	r3, [r4, #0]
    lowPowerMode = true;
 80808d6:	2201      	movs	r2, #1
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
  if (command == "1")                                                 // Command calls for setting lowPowerMode
  {
    Particle.publish("Mode","Low Power",PRIVATE);
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
 80808d8:	f043 0301 	orr.w	r3, r3, #1
 80808dc:	7023      	strb	r3, [r4, #0]
    lowPowerMode = true;
 80808de:	4b17      	ldr	r3, [pc, #92]	; (808093c <_Z15setLowPowerMode6String+0xb4>)
 80808e0:	701a      	strb	r2, [r3, #0]
 80808e2:	e016      	b.n	8080912 <_Z15setLowPowerMode6String+0x8a>
 80808e4:	4910      	ldr	r1, [pc, #64]	; (8080928 <_Z15setLowPowerMode6String+0xa0>)
 80808e6:	4628      	mov	r0, r5
 80808e8:	f001 fd19 	bl	808231e <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
 80808ec:	b188      	cbz	r0, 8080912 <_Z15setLowPowerMode6String+0x8a>
 80808ee:	4b10      	ldr	r3, [pc, #64]	; (8080930 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Normal Operations",PRIVATE);
 80808f0:	4a13      	ldr	r2, [pc, #76]	; (8080940 <_Z15setLowPowerMode6String+0xb8>)
 80808f2:	781b      	ldrb	r3, [r3, #0]
 80808f4:	490f      	ldr	r1, [pc, #60]	; (8080934 <_Z15setLowPowerMode6String+0xac>)
 80808f6:	a802      	add	r0, sp, #8
 80808f8:	f88d 6000 	strb.w	r6, [sp]
 80808fc:	f7ff fbec 	bl	80800d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.33.constprop.37>
 8080900:	a803      	add	r0, sp, #12
 8080902:	f7ff fdd9 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b1111110 & controlRegister);                  // If so, flip the lowPowerMode bit
 8080906:	7823      	ldrb	r3, [r4, #0]
 8080908:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 808090c:	7023      	strb	r3, [r4, #0]
    lowPowerMode = false;
 808090e:	4b0b      	ldr	r3, [pc, #44]	; (808093c <_Z15setLowPowerMode6String+0xb4>)
 8080910:	701e      	strb	r6, [r3, #0]
  }
  EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 8080912:	f002 f853 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 8080916:	2004      	movs	r0, #4
 8080918:	7821      	ldrb	r1, [r4, #0]
 808091a:	f7ff fbdb 	bl	80800d4 <_ZN11EEPROMClass5writeEih.isra.15>
 808091e:	2001      	movs	r0, #1
  return 1;
}
 8080920:	b004      	add	sp, #16
 8080922:	bd70      	pop	{r4, r5, r6, pc}
 8080924:	080847b8 	.word	0x080847b8
 8080928:	08084585 	.word	0x08084585
 808092c:	200006d8 	.word	0x200006d8
 8080930:	20000594 	.word	0x20000594
 8080934:	08084597 	.word	0x08084597
 8080938:	080845b5 	.word	0x080845b5
 808093c:	2000063c 	.word	0x2000063c
 8080940:	080845bf 	.word	0x080845bf

08080944 <_Z22publishStateTransitionv>:

// Utility functions here...
void publishStateTransition(void)
{
 8080944:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 8080946:	4d18      	ldr	r5, [pc, #96]	; (80809a8 <_Z22publishStateTransitionv+0x64>)
 8080948:	4918      	ldr	r1, [pc, #96]	; (80809ac <_Z22publishStateTransitionv+0x68>)
 808094a:	782a      	ldrb	r2, [r5, #0]
 808094c:	230e      	movs	r3, #14
 808094e:	fb03 1202 	mla	r2, r3, r2, r1
 8080952:	4c17      	ldr	r4, [pc, #92]	; (80809b0 <_Z22publishStateTransitionv+0x6c>)
  return 1;
}

// Utility functions here...
void publishStateTransition(void)
{
 8080954:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 8080956:	7820      	ldrb	r0, [r4, #0]
 8080958:	9200      	str	r2, [sp, #0]
 808095a:	fb03 1300 	mla	r3, r3, r0, r1
 808095e:	4a15      	ldr	r2, [pc, #84]	; (80809b4 <_Z22publishStateTransitionv+0x70>)
 8080960:	2128      	movs	r1, #40	; 0x28
 8080962:	a804      	add	r0, sp, #16
 8080964:	f000 fe6c 	bl	8081640 <snprintf>
  oldState = state;
 8080968:	782b      	ldrb	r3, [r5, #0]
 808096a:	7023      	strb	r3, [r4, #0]
 808096c:	f000 fdb8 	bl	80814e0 <spark_cloud_flag_connected>
  if(Particle.connected()) {
 8080970:	b190      	cbz	r0, 8080998 <_Z22publishStateTransitionv+0x54>
    waitUntil(meterParticlePublish);
 8080972:	f7ff fd69 	bl	8080448 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.27>
 8080976:	4b10      	ldr	r3, [pc, #64]	; (80809b8 <_Z22publishStateTransitionv+0x74>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
 8080978:	2200      	movs	r2, #0
 808097a:	781b      	ldrb	r3, [r3, #0]
 808097c:	490f      	ldr	r1, [pc, #60]	; (80809bc <_Z22publishStateTransitionv+0x78>)
 808097e:	f88d 2000 	strb.w	r2, [sp]
 8080982:	a802      	add	r0, sp, #8
 8080984:	aa04      	add	r2, sp, #16
 8080986:	f7ff fba7 	bl	80800d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.33.constprop.37>
 808098a:	a803      	add	r0, sp, #12
 808098c:	f7ff fd94 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080990:	f000 fc0a 	bl	80811a8 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 8080994:	4b0a      	ldr	r3, [pc, #40]	; (80809c0 <_Z22publishStateTransitionv+0x7c>)
 8080996:	6018      	str	r0, [r3, #0]
  }
  Serial.println(stateTransitionString);
 8080998:	f001 fea4 	bl	80826e4 <_Z16_fetch_usbserialv>
 808099c:	a904      	add	r1, sp, #16
 808099e:	f001 fbb2 	bl	8082106 <_ZN5Print7printlnEPKc>
}
 80809a2:	b00f      	add	sp, #60	; 0x3c
 80809a4:	bd30      	pop	{r4, r5, pc}
 80809a6:	bf00      	nop
 80809a8:	200005d1 	.word	0x200005d1
 80809ac:	20000400 	.word	0x20000400
 80809b0:	200005b0 	.word	0x200005b0
 80809b4:	080845d1 	.word	0x080845d1
 80809b8:	20000594 	.word	0x20000594
 80809bc:	080845df 	.word	0x080845df
 80809c0:	200006e0 	.word	0x200006e0

080809c4 <loop>:
  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  lastPublish = millis();
}

void loop()
{
 80809c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  switch(state) {
 80809c6:	4c97      	ldr	r4, [pc, #604]	; (8080c24 <loop+0x260>)
 80809c8:	7823      	ldrb	r3, [r4, #0]
 80809ca:	3b01      	subs	r3, #1
 80809cc:	2b06      	cmp	r3, #6
 80809ce:	f200 81d3 	bhi.w	8080d78 <loop+0x3b4>
 80809d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80809d6:	0159      	.short	0x0159
 80809d8:	00300007 	.word	0x00300007
 80809dc:	0074005c 	.word	0x0074005c
 80809e0:	00eb00a7 	.word	0x00eb00a7
  case IDLE_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 80809e4:	4b90      	ldr	r3, [pc, #576]	; (8080c28 <loop+0x264>)
 80809e6:	781b      	ldrb	r3, [r3, #0]
 80809e8:	b12b      	cbz	r3, 80809f6 <loop+0x32>
 80809ea:	4b90      	ldr	r3, [pc, #576]	; (8080c2c <loop+0x268>)
 80809ec:	781b      	ldrb	r3, [r3, #0]
 80809ee:	2b02      	cmp	r3, #2
 80809f0:	d001      	beq.n	80809f6 <loop+0x32>
 80809f2:	f7ff ffa7 	bl	8080944 <_Z22publishStateTransitionv>
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = SLEEPING_STATE;
 80809f6:	4b8e      	ldr	r3, [pc, #568]	; (8080c30 <loop+0x26c>)
 80809f8:	781b      	ldrb	r3, [r3, #0]
 80809fa:	b14b      	cbz	r3, 8080a10 <loop+0x4c>
 80809fc:	f000 fbd4 	bl	80811a8 <HAL_Timer_Get_Milli_Seconds>
 8080a00:	4b8c      	ldr	r3, [pc, #560]	; (8080c34 <loop+0x270>)
 8080a02:	681b      	ldr	r3, [r3, #0]
 8080a04:	1ac0      	subs	r0, r0, r3
 8080a06:	4b8c      	ldr	r3, [pc, #560]	; (8080c38 <loop+0x274>)
 8080a08:	681b      	ldr	r3, [r3, #0]
 8080a0a:	4298      	cmp	r0, r3
 8080a0c:	f200 81b1 	bhi.w	8080d72 <loop+0x3ae>
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;    // We want to report on the hour but not after bedtime
 8080a10:	f001 fd82 	bl	8082518 <_ZN9TimeClass4hourEv>
 8080a14:	4b89      	ldr	r3, [pc, #548]	; (8080c3c <loop+0x278>)
 8080a16:	781b      	ldrb	r3, [r3, #0]
 8080a18:	4298      	cmp	r0, r3
 8080a1a:	bf1c      	itt	ne
 8080a1c:	2303      	movne	r3, #3
 8080a1e:	7023      	strbne	r3, [r4, #0]
    if (batteryVoltage <= lowBattLimit) state = LOW_BATTERY_STATE;               // The battery is low - sleep
 8080a20:	4b87      	ldr	r3, [pc, #540]	; (8080c40 <loop+0x27c>)
 8080a22:	6819      	ldr	r1, [r3, #0]
 8080a24:	4b87      	ldr	r3, [pc, #540]	; (8080c44 <loop+0x280>)
 8080a26:	6818      	ldr	r0, [r3, #0]
 8080a28:	f002 fe00 	bl	808362c <__aeabi_fcmple>
 8080a2c:	2800      	cmp	r0, #0
 8080a2e:	f000 81a3 	beq.w	8080d78 <loop+0x3b4>
 8080a32:	2307      	movs	r3, #7
 8080a34:	e029      	b.n	8080a8a <loop+0xc6>
    break;

  case MEASURING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 8080a36:	4b7c      	ldr	r3, [pc, #496]	; (8080c28 <loop+0x264>)
 8080a38:	781a      	ldrb	r2, [r3, #0]
 8080a3a:	461d      	mov	r5, r3
 8080a3c:	b12a      	cbz	r2, 8080a4a <loop+0x86>
 8080a3e:	4b7b      	ldr	r3, [pc, #492]	; (8080c2c <loop+0x268>)
 8080a40:	781b      	ldrb	r3, [r3, #0]
 8080a42:	2b03      	cmp	r3, #3
 8080a44:	d001      	beq.n	8080a4a <loop+0x86>
 8080a46:	f7ff ff7d 	bl	8080944 <_Z22publishStateTransitionv>
    // Given you are coming up from a powered off state - you many need to introduce a non-blocking delay here to allow the sensors to warm up
    if (!takeMeasurements())
 8080a4a:	f7ff fb8b 	bl	8080164 <_Z16takeMeasurementsv>
 8080a4e:	4606      	mov	r6, r0
 8080a50:	b9d0      	cbnz	r0, 8080a88 <loop+0xc4>
    {
      state = ERROR_STATE;
 8080a52:	2301      	movs	r3, #1
 8080a54:	7023      	strb	r3, [r4, #0]
      if (verboseMode) {
 8080a56:	782b      	ldrb	r3, [r5, #0]
 8080a58:	2b00      	cmp	r3, #0
 8080a5a:	f000 818d 	beq.w	8080d78 <loop+0x3b4>
        waitUntil(meterParticlePublish);
 8080a5e:	f7ff fcf3 	bl	8080448 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.27>
 8080a62:	f000 fd3d 	bl	80814e0 <spark_cloud_flag_connected>
        if(Particle.connected()) Particle.publish("State","Error taking Measurements",PRIVATE);
 8080a66:	b158      	cbz	r0, 8080a80 <loop+0xbc>
 8080a68:	4b77      	ldr	r3, [pc, #476]	; (8080c48 <loop+0x284>)
 8080a6a:	a802      	add	r0, sp, #8
 8080a6c:	781b      	ldrb	r3, [r3, #0]
 8080a6e:	4a77      	ldr	r2, [pc, #476]	; (8080c4c <loop+0x288>)
 8080a70:	f88d 6000 	strb.w	r6, [sp]
 8080a74:	4976      	ldr	r1, [pc, #472]	; (8080c50 <loop+0x28c>)
 8080a76:	f7ff fb2f 	bl	80800d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.33.constprop.37>
 8080a7a:	a803      	add	r0, sp, #12
 8080a7c:	f7ff fd1c 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080a80:	f000 fb92 	bl	80811a8 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
 8080a84:	4b73      	ldr	r3, [pc, #460]	; (8080c54 <loop+0x290>)
 8080a86:	e02e      	b.n	8080ae6 <loop+0x122>
      }
    }
    else state = REPORTING_STATE;
 8080a88:	2304      	movs	r3, #4
 8080a8a:	7023      	strb	r3, [r4, #0]
 8080a8c:	e174      	b.n	8080d78 <loop+0x3b4>
    break;

  case REPORTING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 8080a8e:	4b66      	ldr	r3, [pc, #408]	; (8080c28 <loop+0x264>)
 8080a90:	781b      	ldrb	r3, [r3, #0]
 8080a92:	b12b      	cbz	r3, 8080aa0 <loop+0xdc>
 8080a94:	4b65      	ldr	r3, [pc, #404]	; (8080c2c <loop+0x268>)
 8080a96:	781b      	ldrb	r3, [r3, #0]
 8080a98:	2b04      	cmp	r3, #4
 8080a9a:	d001      	beq.n	8080aa0 <loop+0xdc>
 8080a9c:	f7ff ff52 	bl	8080944 <_Z22publishStateTransitionv>
 8080aa0:	f000 fd1e 	bl	80814e0 <spark_cloud_flag_connected>
    if (Particle.connected()) {
 8080aa4:	2800      	cmp	r0, #0
 8080aa6:	d03b      	beq.n	8080b20 <loop+0x15c>
      if (Time.hour() == 12) Particle.syncTime();                         // Set the clock each day at noon
 8080aa8:	f001 fd36 	bl	8082518 <_ZN9TimeClass4hourEv>
 8080aac:	280c      	cmp	r0, #12
 8080aae:	d102      	bne.n	8080ab6 <loop+0xf2>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        return CLOUD_FN(spark_sync_time(NULL), false);
 8080ab0:	2000      	movs	r0, #0
 8080ab2:	f000 fd35 	bl	8081520 <spark_sync_time>
      sendEvent();                                                        // Send data to Ubidots
 8080ab6:	f7ff fd15 	bl	80804e4 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                            // Wait for Response
 8080aba:	2305      	movs	r3, #5
 8080abc:	e7e5      	b.n	8080a8a <loop+0xc6>
    }
    else state = ERROR_STATE;
    break;

  case RESP_WAIT_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 8080abe:	4b5a      	ldr	r3, [pc, #360]	; (8080c28 <loop+0x264>)
 8080ac0:	781b      	ldrb	r3, [r3, #0]
 8080ac2:	b12b      	cbz	r3, 8080ad0 <loop+0x10c>
 8080ac4:	4b59      	ldr	r3, [pc, #356]	; (8080c2c <loop+0x268>)
 8080ac6:	781b      	ldrb	r3, [r3, #0]
 8080ac8:	2b05      	cmp	r3, #5
 8080aca:	d001      	beq.n	8080ad0 <loop+0x10c>
 8080acc:	f7ff ff3a 	bl	8080944 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
 8080ad0:	4b61      	ldr	r3, [pc, #388]	; (8080c58 <loop+0x294>)
 8080ad2:	781b      	ldrb	r3, [r3, #0]
 8080ad4:	b94b      	cbnz	r3, 8080aea <loop+0x126>
    {
      state = IDLE_STATE;
 8080ad6:	2302      	movs	r3, #2
 8080ad8:	7023      	strb	r3, [r4, #0]
      stayAwake = stayAwakeLong;                                      // Keeps Electron awake after reboot - helps with recovery
 8080ada:	4a60      	ldr	r2, [pc, #384]	; (8080c5c <loop+0x298>)
 8080adc:	4b56      	ldr	r3, [pc, #344]	; (8080c38 <loop+0x274>)
 8080ade:	601a      	str	r2, [r3, #0]
 8080ae0:	f000 fb62 	bl	80811a8 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
 8080ae4:	4b53      	ldr	r3, [pc, #332]	; (8080c34 <loop+0x270>)
 8080ae6:	6018      	str	r0, [r3, #0]
 8080ae8:	e146      	b.n	8080d78 <loop+0x3b4>
 8080aea:	f000 fb5d 	bl	80811a8 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
 8080aee:	4b5c      	ldr	r3, [pc, #368]	; (8080c60 <loop+0x29c>)
 8080af0:	681b      	ldr	r3, [r3, #0]
 8080af2:	1ac0      	subs	r0, r0, r3
 8080af4:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8080af8:	4298      	cmp	r0, r3
 8080afa:	f240 813d 	bls.w	8080d78 <loop+0x3b4>
 8080afe:	f000 fb53 	bl	80811a8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8080b02:	4b58      	ldr	r3, [pc, #352]	; (8080c64 <loop+0x2a0>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 8080b04:	2200      	movs	r2, #0
      state = IDLE_STATE;
      stayAwake = stayAwakeLong;                                      // Keeps Electron awake after reboot - helps with recovery
      stayAwakeTimeStamp = millis();
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
      resetTimeStamp = millis();
 8080b06:	6018      	str	r0, [r3, #0]
 8080b08:	4b4f      	ldr	r3, [pc, #316]	; (8080c48 <loop+0x284>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 8080b0a:	a802      	add	r0, sp, #8
 8080b0c:	781b      	ldrb	r3, [r3, #0]
 8080b0e:	4956      	ldr	r1, [pc, #344]	; (8080c68 <loop+0x2a4>)
 8080b10:	f88d 2000 	strb.w	r2, [sp]
 8080b14:	4a55      	ldr	r2, [pc, #340]	; (8080c6c <loop+0x2a8>)
 8080b16:	f7ff fadf 	bl	80800d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.33.constprop.37>
 8080b1a:	a803      	add	r0, sp, #12
 8080b1c:	f7ff fccc 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
 8080b20:	2301      	movs	r3, #1
 8080b22:	e7b2      	b.n	8080a8a <loop+0xc6>
    } 
    break;

  case SLEEPING_STATE: {                                                // This state is triggered once the park closes and runs until it opens
    if (verboseMode && state != oldState) publishStateTransition();
 8080b24:	4b40      	ldr	r3, [pc, #256]	; (8080c28 <loop+0x264>)
 8080b26:	781a      	ldrb	r2, [r3, #0]
 8080b28:	461c      	mov	r4, r3
 8080b2a:	b12a      	cbz	r2, 8080b38 <loop+0x174>
 8080b2c:	4b3f      	ldr	r3, [pc, #252]	; (8080c2c <loop+0x268>)
 8080b2e:	781b      	ldrb	r3, [r3, #0]
 8080b30:	2b06      	cmp	r3, #6
 8080b32:	d001      	beq.n	8080b38 <loop+0x174>
 8080b34:	f7ff ff06 	bl	8080944 <_Z22publishStateTransitionv>
    if (!readyForBed)                                                   // Only do these things once - at bedtime
 8080b38:	4b4d      	ldr	r3, [pc, #308]	; (8080c70 <loop+0x2ac>)
 8080b3a:	781d      	ldrb	r5, [r3, #0]
 8080b3c:	461e      	mov	r6, r3
 8080b3e:	bb5d      	cbnz	r5, 8080b98 <loop+0x1d4>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080b40:	f000 fcce 	bl	80814e0 <spark_cloud_flag_connected>
    {
      if (Particle.connected()) {
 8080b44:	b1c8      	cbz	r0, 8080b7a <loop+0x1b6>
        if (verboseMode) {
 8080b46:	7823      	ldrb	r3, [r4, #0]
 8080b48:	b18b      	cbz	r3, 8080b6e <loop+0x1aa>
          waitUntil(meterParticlePublish);
 8080b4a:	f7ff fc7d 	bl	8080448 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.27>
 8080b4e:	4b3e      	ldr	r3, [pc, #248]	; (8080c48 <loop+0x284>)
          Particle.publish("State","Going to Sleep",PRIVATE);
 8080b50:	4a48      	ldr	r2, [pc, #288]	; (8080c74 <loop+0x2b0>)
 8080b52:	781b      	ldrb	r3, [r3, #0]
 8080b54:	493e      	ldr	r1, [pc, #248]	; (8080c50 <loop+0x28c>)
 8080b56:	a802      	add	r0, sp, #8
 8080b58:	f88d 5000 	strb.w	r5, [sp]
 8080b5c:	f7ff fabc 	bl	80800d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.33.constprop.37>
 8080b60:	a803      	add	r0, sp, #12
 8080b62:	f7ff fca9 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080b66:	f000 fb1f 	bl	80811a8 <HAL_Timer_Get_Milli_Seconds>
          lastPublish = millis();
 8080b6a:	4b3a      	ldr	r3, [pc, #232]	; (8080c54 <loop+0x290>)
 8080b6c:	6018      	str	r0, [r3, #0]
        }
        delay(1000);                                                    // Time to send last update
 8080b6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080b72:	f000 fd7d 	bl	8081670 <delay>
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
 8080b76:	f7ff fc47 	bl	8080408 <_Z22disconnectFromParticlev>
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
 8080b7a:	f001 ff1f 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 8080b7e:	4b3e      	ldr	r3, [pc, #248]	; (8080c78 <loop+0x2b4>)
 8080b80:	2002      	movs	r0, #2
 8080b82:	7819      	ldrb	r1, [r3, #0]
 8080b84:	f7ff faa6 	bl	80800d4 <_ZN11EEPROMClass5writeEih.isra.15>
      ledState = false;
 8080b88:	4b3c      	ldr	r3, [pc, #240]	; (8080c7c <loop+0x2b8>)
 8080b8a:	2100      	movs	r1, #0
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080b8c:	2007      	movs	r0, #7
        }
        delay(1000);                                                    // Time to send last update
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
      ledState = false;
 8080b8e:	7019      	strb	r1, [r3, #0]
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080b90:	f001 fee7 	bl	8082962 <digitalWrite>
      readyForBed = true;                                               // Set the flag for the night
 8080b94:	2301      	movs	r3, #1
 8080b96:	7033      	strb	r3, [r6, #0]
    }
    int secondsToHour = (60*(60 - Time.minute()));                      // Time till the top of the hour
 8080b98:	f001 fcc8 	bl	808252c <_ZN9TimeClass6minuteEv>
    // In your use case, substitute the line below with the instrcution to the TPL5111 to disable the device
    System.sleep(SLEEP_MODE_SOFTPOWEROFF,secondsToHour);                // Very deep sleep till the next hour - then resets
 8080b9c:	4b38      	ldr	r3, [pc, #224]	; (8080c80 <loop+0x2bc>)
 8080b9e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8080ba2:	223c      	movs	r2, #60	; 0x3c
 8080ba4:	681b      	ldr	r3, [r3, #0]
 8080ba6:	4342      	muls	r2, r0
 8080ba8:	2102      	movs	r1, #2
 8080baa:	e036      	b.n	8080c1a <loop+0x256>
    } break;


  case LOW_BATTERY_STATE: {                                             // Sleep state but leaves the fuel gauge on
    if (verboseMode && state != oldState) publishStateTransition();
 8080bac:	4b1e      	ldr	r3, [pc, #120]	; (8080c28 <loop+0x264>)
 8080bae:	781a      	ldrb	r2, [r3, #0]
 8080bb0:	461c      	mov	r4, r3
 8080bb2:	b12a      	cbz	r2, 8080bc0 <loop+0x1fc>
 8080bb4:	4b1d      	ldr	r3, [pc, #116]	; (8080c2c <loop+0x268>)
 8080bb6:	781b      	ldrb	r3, [r3, #0]
 8080bb8:	2b07      	cmp	r3, #7
 8080bba:	d001      	beq.n	8080bc0 <loop+0x1fc>
 8080bbc:	f7ff fec2 	bl	8080944 <_Z22publishStateTransitionv>
 8080bc0:	f000 fc8e 	bl	80814e0 <spark_cloud_flag_connected>
    if (Particle.connected()) {
 8080bc4:	b1d0      	cbz	r0, 8080bfc <loop+0x238>
      if (verboseMode) {
 8080bc6:	7823      	ldrb	r3, [r4, #0]
 8080bc8:	b193      	cbz	r3, 8080bf0 <loop+0x22c>
        waitUntil(meterParticlePublish);
 8080bca:	f7ff fc3d 	bl	8080448 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.27>
 8080bce:	4b1e      	ldr	r3, [pc, #120]	; (8080c48 <loop+0x284>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080bd0:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080bd2:	781b      	ldrb	r3, [r3, #0]
        Particle.publish("State","Low Battery - Sleeping",PRIVATE);
 8080bd4:	491e      	ldr	r1, [pc, #120]	; (8080c50 <loop+0x28c>)
 8080bd6:	f88d 2000 	strb.w	r2, [sp]
 8080bda:	a802      	add	r0, sp, #8
 8080bdc:	4a29      	ldr	r2, [pc, #164]	; (8080c84 <loop+0x2c0>)
 8080bde:	f7ff fa7b 	bl	80800d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.33.constprop.37>
 8080be2:	a803      	add	r0, sp, #12
 8080be4:	f7ff fc68 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080be8:	f000 fade 	bl	80811a8 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
 8080bec:	4b19      	ldr	r3, [pc, #100]	; (8080c54 <loop+0x290>)
 8080bee:	6018      	str	r0, [r3, #0]
      }
      delay(1000);                                                    // Time to send last update
 8080bf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080bf4:	f000 fd3c 	bl	8081670 <delay>
      disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
 8080bf8:	f7ff fc06 	bl	8080408 <_Z22disconnectFromParticlev>
    }
    ledState = false;
 8080bfc:	4b1f      	ldr	r3, [pc, #124]	; (8080c7c <loop+0x2b8>)
 8080bfe:	2100      	movs	r1, #0
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080c00:	2007      	movs	r0, #7
        lastPublish = millis();
      }
      delay(1000);                                                    // Time to send last update
      disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
    }
    ledState = false;
 8080c02:	7019      	strb	r1, [r3, #0]
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080c04:	f001 fead 	bl	8082962 <digitalWrite>
    int secondsToHour = (60*(60 - Time.minute()));                    // Time till the top of the hour
 8080c08:	f001 fc90 	bl	808252c <_ZN9TimeClass6minuteEv>
    // In your use case, substitute the line below with the instrcution to the TPL5111 to disable the device
    System.sleep(SLEEP_MODE_DEEP,secondsToHour);                      // Very deep sleep till the next hour - then resets
 8080c0c:	223c      	movs	r2, #60	; 0x3c
 8080c0e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8080c12:	4b1b      	ldr	r3, [pc, #108]	; (8080c80 <loop+0x2bc>)
 8080c14:	4342      	muls	r2, r0
 8080c16:	681b      	ldr	r3, [r3, #0]
 8080c18:	2101      	movs	r1, #1
 8080c1a:	a802      	add	r0, sp, #8
 8080c1c:	f001 fbb2 	bl	8082384 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    } break;
 8080c20:	e0aa      	b.n	8080d78 <loop+0x3b4>
 8080c22:	bf00      	nop
 8080c24:	200005d1 	.word	0x200005d1
 8080c28:	200005c0 	.word	0x200005c0
 8080c2c:	200005b0 	.word	0x200005b0
 8080c30:	2000063c 	.word	0x2000063c
 8080c34:	20000644 	.word	0x20000644
 8080c38:	20000688 	.word	0x20000688
 8080c3c:	2000061c 	.word	0x2000061c
 8080c40:	20000478 	.word	0x20000478
 8080c44:	200006b4 	.word	0x200006b4
 8080c48:	20000594 	.word	0x20000594
 8080c4c:	080845f0 	.word	0x080845f0
 8080c50:	0808456e 	.word	0x0808456e
 8080c54:	200006e0 	.word	0x200006e0
 8080c58:	20000474 	.word	0x20000474
 8080c5c:	00015f90 	.word	0x00015f90
 8080c60:	2000056c 	.word	0x2000056c
 8080c64:	2000068c 	.word	0x2000068c
 8080c68:	0808460a 	.word	0x0808460a
 8080c6c:	080843ca 	.word	0x080843ca
 8080c70:	20000558 	.word	0x20000558
 8080c74:	08084623 	.word	0x08084623
 8080c78:	20000618 	.word	0x20000618
 8080c7c:	200006b0 	.word	0x200006b0
 8080c80:	20000630 	.word	0x20000630
 8080c84:	08084632 	.word	0x08084632

  case ERROR_STATE:                                                   // To be enhanced - where we deal with errors
    if (verboseMode && state != oldState) publishStateTransition();
 8080c88:	4b3c      	ldr	r3, [pc, #240]	; (8080d7c <loop+0x3b8>)
 8080c8a:	781b      	ldrb	r3, [r3, #0]
 8080c8c:	b12b      	cbz	r3, 8080c9a <loop+0x2d6>
 8080c8e:	4b3c      	ldr	r3, [pc, #240]	; (8080d80 <loop+0x3bc>)
 8080c90:	781b      	ldrb	r3, [r3, #0]
 8080c92:	2b01      	cmp	r3, #1
 8080c94:	d001      	beq.n	8080c9a <loop+0x2d6>
 8080c96:	f7ff fe55 	bl	8080944 <_Z22publishStateTransitionv>
 8080c9a:	f000 fa85 	bl	80811a8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
 8080c9e:	4b39      	ldr	r3, [pc, #228]	; (8080d84 <loop+0x3c0>)
 8080ca0:	681b      	ldr	r3, [r3, #0]
 8080ca2:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8080ca6:	3330      	adds	r3, #48	; 0x30
 8080ca8:	4298      	cmp	r0, r3
 8080caa:	d965      	bls.n	8080d78 <loop+0x3b4>
    {
      if (resetCount <= 3) {                                          // First try simple reset
 8080cac:	4b36      	ldr	r3, [pc, #216]	; (8080d88 <loop+0x3c4>)
 8080cae:	681b      	ldr	r3, [r3, #0]
 8080cb0:	2b03      	cmp	r3, #3
 8080cb2:	dc16      	bgt.n	8080ce2 <loop+0x31e>
 8080cb4:	f000 fc14 	bl	80814e0 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
 8080cb8:	b160      	cbz	r0, 8080cd4 <loop+0x310>
 8080cba:	4b34      	ldr	r3, [pc, #208]	; (8080d8c <loop+0x3c8>)
 8080cbc:	2200      	movs	r2, #0
 8080cbe:	781b      	ldrb	r3, [r3, #0]
 8080cc0:	a802      	add	r0, sp, #8
 8080cc2:	f88d 2000 	strb.w	r2, [sp]
 8080cc6:	4932      	ldr	r1, [pc, #200]	; (8080d90 <loop+0x3cc>)
 8080cc8:	4a32      	ldr	r2, [pc, #200]	; (8080d94 <loop+0x3d0>)
 8080cca:	f7ff fa05 	bl	80800d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.33.constprop.37>
 8080cce:	a803      	add	r0, sp, #12
 8080cd0:	f7ff fbf2 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8080cd4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080cd8:	f000 fcca 	bl	8081670 <delay>
        System.reset();
 8080cdc:	f001 fb4e 	bl	808237c <_ZN11SystemClass5resetEv>
 8080ce0:	e04a      	b.n	8080d78 <loop+0x3b4>
      }
      else if (Time.now() - EEPROM.read(MEM_MAP::currentCountsTimeAddr) > 7200L) { //It has been more than two hours since a sucessful hook response
 8080ce2:	f001 fc12 	bl	808250a <_ZN9TimeClass3nowEv>
 8080ce6:	4604      	mov	r4, r0
 8080ce8:	f001 fe68 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 8080cec:	2005      	movs	r0, #5
 8080cee:	f7ff f9ef 	bl	80800d0 <_ZN11EEPROMClass4readEi.isra.14>
 8080cf2:	1a20      	subs	r0, r4, r0
 8080cf4:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
 8080cf8:	dd1e      	ble.n	8080d38 <loop+0x374>
 8080cfa:	f000 fbf1 	bl	80814e0 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
 8080cfe:	b160      	cbz	r0, 8080d1a <loop+0x356>
 8080d00:	4b22      	ldr	r3, [pc, #136]	; (8080d8c <loop+0x3c8>)
 8080d02:	2200      	movs	r2, #0
 8080d04:	781b      	ldrb	r3, [r3, #0]
 8080d06:	a802      	add	r0, sp, #8
 8080d08:	f88d 2000 	strb.w	r2, [sp]
 8080d0c:	4920      	ldr	r1, [pc, #128]	; (8080d90 <loop+0x3cc>)
 8080d0e:	4a22      	ldr	r2, [pc, #136]	; (8080d98 <loop+0x3d4>)
 8080d10:	f7ff f9e2 	bl	80800d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.33.constprop.37>
 8080d14:	a803      	add	r0, sp, #12
 8080d16:	f7ff fbcf 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8080d1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080d1e:	f000 fca7 	bl	8081670 <delay>
        EEPROM.write(MEM_MAP::resetCountAddr,0);                           // Zero the ResetCount
 8080d22:	f001 fe4b 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 8080d26:	2100      	movs	r1, #0
 8080d28:	2002      	movs	r0, #2
 8080d2a:	f7ff f9d3 	bl	80800d4 <_ZN11EEPROMClass5writeEih.isra.15>
        digitalWrite(hardResetPin,HIGH);                              // This will cut all power to the Electron AND the carrier board
 8080d2e:	2101      	movs	r1, #1
 8080d30:	2004      	movs	r0, #4
 8080d32:	f001 fe16 	bl	8082962 <digitalWrite>
 8080d36:	e01f      	b.n	8080d78 <loop+0x3b4>
 8080d38:	f000 fbd2 	bl	80814e0 <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
 8080d3c:	b160      	cbz	r0, 8080d58 <loop+0x394>
 8080d3e:	4b13      	ldr	r3, [pc, #76]	; (8080d8c <loop+0x3c8>)
 8080d40:	2200      	movs	r2, #0
 8080d42:	781b      	ldrb	r3, [r3, #0]
 8080d44:	a802      	add	r0, sp, #8
 8080d46:	f88d 2000 	strb.w	r2, [sp]
 8080d4a:	4911      	ldr	r1, [pc, #68]	; (8080d90 <loop+0x3cc>)
 8080d4c:	4a13      	ldr	r2, [pc, #76]	; (8080d9c <loop+0x3d8>)
 8080d4e:	f7ff f9c3 	bl	80800d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.33.constprop.37>
 8080d52:	a803      	add	r0, sp, #12
 8080d54:	f7ff fbb0 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8080d58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080d5c:	f000 fc88 	bl	8081670 <delay>
        EEPROM.write(MEM_MAP::resetCountAddr,0);                           // Zero the ResetCount
 8080d60:	f001 fe2c 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 8080d64:	2100      	movs	r1, #0
 8080d66:	2002      	movs	r0, #2
 8080d68:	f7ff f9b4 	bl	80800d4 <_ZN11EEPROMClass5writeEih.isra.15>
        fullModemReset();                                             // Full Modem reset and reboots
 8080d6c:	f7ff fb78 	bl	8080460 <_Z14fullModemResetv>
      }
    }
    break;
  }
}
 8080d70:	e002      	b.n	8080d78 <loop+0x3b4>
void loop()
{
  switch(state) {
  case IDLE_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = SLEEPING_STATE;
 8080d72:	2306      	movs	r3, #6
 8080d74:	7023      	strb	r3, [r4, #0]
 8080d76:	e64b      	b.n	8080a10 <loop+0x4c>
        fullModemReset();                                             // Full Modem reset and reboots
      }
    }
    break;
  }
}
 8080d78:	b004      	add	sp, #16
 8080d7a:	bd70      	pop	{r4, r5, r6, pc}
 8080d7c:	200005c0 	.word	0x200005c0
 8080d80:	200005b0 	.word	0x200005b0
 8080d84:	2000068c 	.word	0x2000068c
 8080d88:	20000618 	.word	0x20000618
 8080d8c:	20000594 	.word	0x20000594
 8080d90:	0808456e 	.word	0x0808456e
 8080d94:	08084649 	.word	0x08084649
 8080d98:	0808465d 	.word	0x0808465d
 8080d9c:	08084677 	.word	0x08084677

08080da0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8080da0:	2300      	movs	r3, #0
 8080da2:	2204      	movs	r2, #4
 8080da4:	f000 bb74 	b.w	8081490 <spark_variable>

08080da8 <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 8080da8:	4602      	mov	r2, r0
 8080daa:	4801      	ldr	r0, [pc, #4]	; (8080db0 <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 8080dac:	f000 bdf6 	b.w	808199c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080db0:	08081971 	.word	0x08081971

08080db4 <setup>:
int rat;
float strengthPercentage;
float qualityPercentage;

void setup()                                                      // Note: Disconnected Setup()
{
 8080db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080db8:	b0b8      	sub	sp, #224	; 0xe0
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
 8080dba:	aa08      	add	r2, sp, #32
 8080dbc:	4616      	mov	r6, r2
 8080dbe:	4b9a      	ldr	r3, [pc, #616]	; (8081028 <setup+0x274>)
 8080dc0:	f103 0510 	add.w	r5, r3, #16
 8080dc4:	4614      	mov	r4, r2
 8080dc6:	6818      	ldr	r0, [r3, #0]
 8080dc8:	6859      	ldr	r1, [r3, #4]
 8080dca:	3308      	adds	r3, #8
 8080dcc:	c403      	stmia	r4!, {r0, r1}
 8080dce:	42ab      	cmp	r3, r5
 8080dd0:	4622      	mov	r2, r4
 8080dd2:	d1f7      	bne.n	8080dc4 <setup+0x10>
 8080dd4:	8819      	ldrh	r1, [r3, #0]
 8080dd6:	789b      	ldrb	r3, [r3, #2]
 8080dd8:	222d      	movs	r2, #45	; 0x2d
 8080dda:	70a3      	strb	r3, [r4, #2]
 8080ddc:	8021      	strh	r1, [r4, #0]
 8080dde:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 8080de2:	2100      	movs	r1, #0
  state = IDLE_STATE;
 8080de4:	4f91      	ldr	r7, [pc, #580]	; (808102c <setup+0x278>)
float strengthPercentage;
float qualityPercentage;

void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
 8080de6:	f002 fdb6 	bl	8083956 <memset>
  state = IDLE_STATE;
 8080dea:	2502      	movs	r5, #2

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8080dec:	2101      	movs	r1, #1
 8080dee:	2007      	movs	r0, #7
float qualityPercentage;

void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
  state = IDLE_STATE;
 8080df0:	703d      	strb	r5, [r7, #0]

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8080df2:	f001 fda5 	bl	8082940 <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
 8080df6:	2100      	movs	r1, #0
 8080df8:	2005      	movs	r0, #5
 8080dfa:	f001 fda1 	bl	8082940 <pinMode>
  pinMode(donePin,OUTPUT);                                        // To pet the watchdog
 8080dfe:	2101      	movs	r1, #1
 8080e00:	2006      	movs	r0, #6
 8080e02:	f001 fd9d 	bl	8082940 <pinMode>
  pinMode(wakeUpPin,INPUT);                                       // This pin is active HIGH
 8080e06:	2100      	movs	r1, #0
 8080e08:	2011      	movs	r0, #17
 8080e0a:	f001 fd99 	bl	8082940 <pinMode>
  pinMode(hardResetPin,OUTPUT);                     // For a hard reset active HIGH
 8080e0e:	2101      	movs	r1, #1
 8080e10:	2004      	movs	r0, #4
 8080e12:	f001 fd95 	bl	8082940 <pinMode>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 8080e16:	a804      	add	r0, sp, #16
    particle::Future<bool> publish(const char* name, const char* data) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;
    particle::Future<bool> publish(const char* name, const char* data, int ttl) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 8080e18:	2400      	movs	r4, #0
 8080e1a:	f000 fb69 	bl	80814f0 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 8080e1e:	2300      	movs	r3, #0
 8080e20:	227d      	movs	r2, #125	; 0x7d
 8080e22:	a918      	add	r1, sp, #96	; 0x60
 8080e24:	a804      	add	r0, sp, #16
 8080e26:	f001 fa8c 	bl	8082342 <_ZNK6String8getBytesEPhjj>
 8080e2a:	4623      	mov	r3, r4
 8080e2c:	4622      	mov	r2, r4
 8080e2e:	4980      	ldr	r1, [pc, #512]	; (8081030 <setup+0x27c>)
 8080e30:	9401      	str	r4, [sp, #4]
 8080e32:	9400      	str	r4, [sp, #0]
 8080e34:	a818      	add	r0, sp, #96	; 0x60
 8080e36:	f000 fb6b 	bl	8081510 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
 8080e3a:	497e      	ldr	r1, [pc, #504]	; (8081034 <setup+0x280>)
 8080e3c:	487e      	ldr	r0, [pc, #504]	; (8081038 <setup+0x284>)
 8080e3e:	f7ff ffaf 	bl	8080da0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8080e42:	4623      	mov	r3, r4
 8080e44:	462a      	mov	r2, r5
 8080e46:	497d      	ldr	r1, [pc, #500]	; (808103c <setup+0x288>)
 8080e48:	487d      	ldr	r0, [pc, #500]	; (8081040 <setup+0x28c>)
 8080e4a:	f000 fb21 	bl	8081490 <spark_variable>
 8080e4e:	497d      	ldr	r1, [pc, #500]	; (8081044 <setup+0x290>)
 8080e50:	4623      	mov	r3, r4
 8080e52:	2204      	movs	r2, #4
 8080e54:	6809      	ldr	r1, [r1, #0]
 8080e56:	487c      	ldr	r0, [pc, #496]	; (8081048 <setup+0x294>)
 8080e58:	f000 fb1a 	bl	8081490 <spark_variable>
  Particle.variable("ResetCount", resetCount);
  Particle.variable("Release",releaseNumber);
  Particle.variable("stateOfChg", batteryString);
 8080e5c:	497b      	ldr	r1, [pc, #492]	; (808104c <setup+0x298>)
 8080e5e:	487c      	ldr	r0, [pc, #496]	; (8081050 <setup+0x29c>)
 8080e60:	f7ff ff9e 	bl	8080da0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
 8080e64:	4623      	mov	r3, r4
 8080e66:	2201      	movs	r2, #1
 8080e68:	497a      	ldr	r1, [pc, #488]	; (8081054 <setup+0x2a0>)
 8080e6a:	487b      	ldr	r0, [pc, #492]	; (8081058 <setup+0x2a4>)
 8080e6c:	f000 fb10 	bl	8081490 <spark_variable>
  Particle.variable("lowPowerMode",lowPowerMode);
  Particle.variable("temperature", temperatureString);
 8080e70:	497a      	ldr	r1, [pc, #488]	; (808105c <setup+0x2a8>)
 8080e72:	487b      	ldr	r0, [pc, #492]	; (8081060 <setup+0x2ac>)
 8080e74:	f7ff ff94 	bl	8080da0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("humidity", humidityString);
 8080e78:	497a      	ldr	r1, [pc, #488]	; (8081064 <setup+0x2b0>)
 8080e7a:	487b      	ldr	r0, [pc, #492]	; (8081068 <setup+0x2b4>)
 8080e7c:	f7ff ff90 	bl	8080da0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilTemp",soilTempInCString);
 8080e80:	497a      	ldr	r1, [pc, #488]	; (808106c <setup+0x2b8>)
 8080e82:	487b      	ldr	r0, [pc, #492]	; (8081070 <setup+0x2bc>)
 8080e84:	f7ff ff8c 	bl	8080da0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture1",soilMoisture1String);
 8080e88:	497a      	ldr	r1, [pc, #488]	; (8081074 <setup+0x2c0>)
 8080e8a:	487b      	ldr	r0, [pc, #492]	; (8081078 <setup+0x2c4>)
 8080e8c:	f7ff ff88 	bl	8080da0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture2",soilMoisture2String);
 8080e90:	497a      	ldr	r1, [pc, #488]	; (808107c <setup+0x2c8>)
 8080e92:	487b      	ldr	r0, [pc, #492]	; (8081080 <setup+0x2cc>)
 8080e94:	f7ff ff84 	bl	8080da0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture3",soilMoisture3String);
 8080e98:	497a      	ldr	r1, [pc, #488]	; (8081084 <setup+0x2d0>)
 8080e9a:	487b      	ldr	r0, [pc, #492]	; (8081088 <setup+0x2d4>)
 8080e9c:	f7ff ff80 	bl	8080da0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture4",soilMoisture4String);
 8080ea0:	497a      	ldr	r1, [pc, #488]	; (808108c <setup+0x2d8>)
 8080ea2:	487b      	ldr	r0, [pc, #492]	; (8081090 <setup+0x2dc>)
 8080ea4:	f7ff ff7c 	bl	8080da0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture5",soilMoisture5String);
 8080ea8:	497a      	ldr	r1, [pc, #488]	; (8081094 <setup+0x2e0>)
 8080eaa:	487b      	ldr	r0, [pc, #492]	; (8081098 <setup+0x2e4>)
 8080eac:	f7ff ff78 	bl	8080da0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture6",soilMoisture6String);
 8080eb0:	497a      	ldr	r1, [pc, #488]	; (808109c <setup+0x2e8>)
 8080eb2:	487b      	ldr	r0, [pc, #492]	; (80810a0 <setup+0x2ec>)
 8080eb4:	f7ff ff74 	bl	8080da0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>

  
  Particle.function("Measure-Now",measureNow);
 8080eb8:	497a      	ldr	r1, [pc, #488]	; (80810a4 <setup+0x2f0>)
 8080eba:	487b      	ldr	r0, [pc, #492]	; (80810a8 <setup+0x2f4>)
 8080ebc:	f7ff ff74 	bl	8080da8 <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
 8080ec0:	497a      	ldr	r1, [pc, #488]	; (80810ac <setup+0x2f8>)
 8080ec2:	487b      	ldr	r0, [pc, #492]	; (80810b0 <setup+0x2fc>)
 8080ec4:	f7ff ff70 	bl	8080da8 <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
 8080ec8:	497a      	ldr	r1, [pc, #488]	; (80810b4 <setup+0x300>)
 8080eca:	487b      	ldr	r0, [pc, #492]	; (80810b8 <setup+0x304>)
 8080ecc:	f7ff ff6c 	bl	8080da8 <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetTimeZone",setTimeZone);
 8080ed0:	497a      	ldr	r1, [pc, #488]	; (80810bc <setup+0x308>)
 8080ed2:	487b      	ldr	r0, [pc, #492]	; (80810c0 <setup+0x30c>)
 8080ed4:	f7ff ff68 	bl	8080da8 <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
 8080ed8:	f001 fd70 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 8080edc:	4620      	mov	r0, r4
 8080ede:	f7ff f8f7 	bl	80800d0 <_ZN11EEPROMClass4readEi.isra.14>
 8080ee2:	2801      	cmp	r0, #1
 8080ee4:	d119      	bne.n	8080f1a <setup+0x166>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
    }
  }

  resetCount = EEPROM.read(MEM_MAP::resetCountAddr);                    // Retrive system recount data from FRAM
 8080ee6:	f001 fd69 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 8080eea:	2002      	movs	r0, #2
 8080eec:	f7ff f8f0 	bl	80800d0 <_ZN11EEPROMClass4readEi.isra.14>
 8080ef0:	4c52      	ldr	r4, [pc, #328]	; (808103c <setup+0x288>)
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8080ef2:	2200      	movs	r2, #0
 8080ef4:	6020      	str	r0, [r4, #0]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080ef6:	4611      	mov	r1, r2
 8080ef8:	a802      	add	r0, sp, #8
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8080efa:	9202      	str	r2, [sp, #8]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080efc:	f000 f944 	bl	8081188 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8080f00:	9b02      	ldr	r3, [sp, #8]
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
 8080f02:	2b14      	cmp	r3, #20
 8080f04:	d11e      	bne.n	8080f44 <setup+0x190>
  {
    resetCount++;
 8080f06:	6823      	ldr	r3, [r4, #0]
 8080f08:	3301      	adds	r3, #1
 8080f0a:	6023      	str	r3, [r4, #0]
    EEPROM.write(MEM_MAP::resetCountAddr, resetCount);                  // If so, store incremented number - watchdog must have done This
 8080f0c:	f001 fd56 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 8080f10:	7821      	ldrb	r1, [r4, #0]
 8080f12:	2002      	movs	r0, #2
 8080f14:	f7ff f8de 	bl	80800d4 <_ZN11EEPROMClass5writeEih.isra.15>
 8080f18:	e014      	b.n	8080f44 <setup+0x190>
  Particle.function("LowPowerMode",setLowPowerMode);
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
 8080f1a:	f001 fd4f 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 8080f1e:	2501      	movs	r5, #1
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8080f20:	2204      	movs	r2, #4
 8080f22:	a902      	add	r1, sp, #8
 8080f24:	4620      	mov	r0, r4
 8080f26:	9502      	str	r5, [sp, #8]
 8080f28:	f000 f966 	bl	80811f8 <HAL_EEPROM_Put>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
 8080f2c:	f001 fd46 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 8080f30:	4628      	mov	r0, r5
 8080f32:	2204      	movs	r2, #4
 8080f34:	a902      	add	r1, sp, #8
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
 8080f36:	3501      	adds	r5, #1
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
 8080f38:	9402      	str	r4, [sp, #8]
 8080f3a:	f000 f95d 	bl	80811f8 <HAL_EEPROM_Put>
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
 8080f3e:	2d0a      	cmp	r5, #10
 8080f40:	d1f4      	bne.n	8080f2c <setup+0x178>
 8080f42:	e7d0      	b.n	8080ee6 <setup+0x132>
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
  {
    resetCount++;
    EEPROM.write(MEM_MAP::resetCountAddr, resetCount);                  // If so, store incremented number - watchdog must have done This
  }
  if (resetCount >=6) {                                                 // If we get to resetCount 4, we are resetting without entering the main loop
 8080f44:	6823      	ldr	r3, [r4, #0]
 8080f46:	2b05      	cmp	r3, #5
 8080f48:	dd07      	ble.n	8080f5a <setup+0x1a6>
    EEPROM.write(MEM_MAP::resetCountAddr,4);                            // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
 8080f4a:	f001 fd37 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 8080f4e:	2104      	movs	r1, #4
 8080f50:	2002      	movs	r0, #2
 8080f52:	f7ff f8bf 	bl	80800d4 <_ZN11EEPROMClass5writeEih.isra.15>
    fullModemReset();                                                   // This will reset the modem and the device will reboot
 8080f56:	f7ff fa83 	bl	8080460 <_Z14fullModemResetv>
  }

  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);       // Load Time zone data from FRAM
 8080f5a:	f001 fd2f 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 8080f5e:	2003      	movs	r0, #3
 8080f60:	f7ff f8b6 	bl	80800d0 <_ZN11EEPROMClass4readEi.isra.14>
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
 8080f64:	f100 030c 	add.w	r3, r0, #12
 8080f68:	b2db      	uxtb	r3, r3
 8080f6a:	2b18      	cmp	r3, #24
 8080f6c:	d803      	bhi.n	8080f76 <setup+0x1c2>
 8080f6e:	b240      	sxtb	r0, r0
 8080f70:	f002 f960 	bl	8083234 <__aeabi_i2f>
 8080f74:	e000      	b.n	8080f78 <setup+0x1c4>
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM
 8080f76:	2000      	movs	r0, #0
 8080f78:	f001 fa68 	bl	808244c <_ZN9TimeClass4zoneEf>

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
 8080f7c:	f001 fd1e 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 8080f80:	2004      	movs	r0, #4
 8080f82:	f7ff f8a5 	bl	80800d0 <_ZN11EEPROMClass4readEi.isra.14>
 8080f86:	f8df 8158 	ldr.w	r8, [pc, #344]	; 80810e0 <setup+0x32c>
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
 8080f8a:	4c32      	ldr	r4, [pc, #200]	; (8081054 <setup+0x2a0>)
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
 8080f8c:	4d4d      	ldr	r5, [pc, #308]	; (80810c4 <setup+0x310>)
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
 8080f8e:	f000 0301 	and.w	r3, r0, #1
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);       // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
 8080f92:	f888 0000 	strb.w	r0, [r8]
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
 8080f96:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
 8080f9a:	7023      	strb	r3, [r4, #0]
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
 8080f9c:	7028      	strb	r0, [r5, #0]
  
  takeMeasurements();                                                   // For the benefit of monitoring the device
 8080f9e:	f7ff f8e1 	bl	8080164 <_Z16takeMeasurementsv>

  if (!digitalRead(userSwitch)) {                                       // Rescue mode to locally take lowPowerMode so you can connect to device
 8080fa2:	2005      	movs	r0, #5
 8080fa4:	f001 fcf6 	bl	8082994 <digitalRead>
 8080fa8:	b968      	cbnz	r0, 8080fc6 <setup+0x212>
    lowPowerMode = false;                                               // Press the user switch while resetting the device
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
 8080faa:	f898 3000 	ldrb.w	r3, [r8]
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
  
  takeMeasurements();                                                   // For the benefit of monitoring the device

  if (!digitalRead(userSwitch)) {                                       // Rescue mode to locally take lowPowerMode so you can connect to device
    lowPowerMode = false;                                               // Press the user switch while resetting the device
 8080fae:	7020      	strb	r0, [r4, #0]
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
 8080fb0:	f023 0301 	bic.w	r3, r3, #1
 8080fb4:	f888 3000 	strb.w	r3, [r8]
    EEPROM.write(controlRegister,MEM_MAP::controlRegisterAddr);         // Write to the EEMPROM
 8080fb8:	f001 fd00 	bl	80829bc <_Z21__fetch_global_EEPROMv>
 8080fbc:	2104      	movs	r1, #4
 8080fbe:	f898 0000 	ldrb.w	r0, [r8]
 8080fc2:	f7ff f887 	bl	80800d4 <_ZN11EEPROMClass5writeEih.isra.15>
  }

  if (batteryVoltage <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
 8080fc6:	4b40      	ldr	r3, [pc, #256]	; (80810c8 <setup+0x314>)
 8080fc8:	6819      	ldr	r1, [r3, #0]
 8080fca:	4b40      	ldr	r3, [pc, #256]	; (80810cc <setup+0x318>)
 8080fcc:	6818      	ldr	r0, [r3, #0]
 8080fce:	f002 fb2d 	bl	808362c <__aeabi_fcmple>
 8080fd2:	b110      	cbz	r0, 8080fda <setup+0x226>
 8080fd4:	2307      	movs	r3, #7
 8080fd6:	703b      	strb	r3, [r7, #0]
 8080fd8:	e008      	b.n	8080fec <setup+0x238>
  else if(!connectToParticle()) {
 8080fda:	f7ff f9d9 	bl	8080390 <_Z17connectToParticlev>
 8080fde:	b928      	cbnz	r0, 8080fec <setup+0x238>
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
 8080fe0:	2301      	movs	r3, #1
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
 8080fe2:	493b      	ldr	r1, [pc, #236]	; (80810d0 <setup+0x31c>)
 8080fe4:	4630      	mov	r0, r6
    EEPROM.write(controlRegister,MEM_MAP::controlRegisterAddr);         // Write to the EEMPROM
  }

  if (batteryVoltage <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
 8080fe6:	703b      	strb	r3, [r7, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
 8080fe8:	f002 fd2a 	bl	8083a40 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080fec:	f000 fa78 	bl	80814e0 <spark_cloud_flag_connected>
  }

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
 8080ff0:	b108      	cbz	r0, 8080ff6 <setup+0x242>
 8080ff2:	782b      	ldrb	r3, [r5, #0]
 8080ff4:	b94b      	cbnz	r3, 808100a <setup+0x256>
 8080ff6:	f000 f8d7 	bl	80811a8 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 8080ffa:	4b36      	ldr	r3, [pc, #216]	; (80810d4 <setup+0x320>)
 8080ffc:	6018      	str	r0, [r3, #0]
  pinMode(donePin,OUTPUT);                                        // To pet the watchdog
  pinMode(wakeUpPin,INPUT);                                       // This pin is active HIGH
  pinMode(hardResetPin,OUTPUT);                     // For a hard reset active HIGH

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
 8080ffe:	a804      	add	r0, sp, #16
 8081000:	f001 f919 	bl	8082236 <_ZN6StringD1Ev>
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  lastPublish = millis();
}
 8081004:	b038      	add	sp, #224	; 0xe0
 8081006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808100a:	4b33      	ldr	r3, [pc, #204]	; (80810d8 <setup+0x324>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 808100c:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808100e:	781b      	ldrb	r3, [r3, #0]
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
 8081010:	a802      	add	r0, sp, #8
 8081012:	f88d 2000 	strb.w	r2, [sp]
 8081016:	4931      	ldr	r1, [pc, #196]	; (80810dc <setup+0x328>)
 8081018:	4632      	mov	r2, r6
 808101a:	f7ff f85d 	bl	80800d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.33.constprop.37>
 808101e:	a803      	add	r0, sp, #12
 8081020:	f7ff fa4a 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081024:	e7e7      	b.n	8080ff6 <setup+0x242>
 8081026:	bf00      	nop
 8081028:	0808434c 	.word	0x0808434c
 808102c:	200005d1 	.word	0x200005d1
 8081030:	0808065d 	.word	0x0808065d
 8081034:	20000648 	.word	0x20000648
 8081038:	08084696 	.word	0x08084696
 808103c:	20000618 	.word	0x20000618
 8081040:	0808469d 	.word	0x0808469d
 8081044:	20000470 	.word	0x20000470
 8081048:	080846a8 	.word	0x080846a8
 808104c:	200006c8 	.word	0x200006c8
 8081050:	080846b0 	.word	0x080846b0
 8081054:	2000063c 	.word	0x2000063c
 8081058:	080846bb 	.word	0x080846bb
 808105c:	20000559 	.word	0x20000559
 8081060:	080846c8 	.word	0x080846c8
 8081064:	200006b8 	.word	0x200006b8
 8081068:	080846d4 	.word	0x080846d4
 808106c:	200006e4 	.word	0x200006e4
 8081070:	080846dd 	.word	0x080846dd
 8081074:	20000580 	.word	0x20000580
 8081078:	080846e6 	.word	0x080846e6
 808107c:	200005a0 	.word	0x200005a0
 8081080:	080846f4 	.word	0x080846f4
 8081084:	200005c1 	.word	0x200005c1
 8081088:	08084702 	.word	0x08084702
 808108c:	200005d9 	.word	0x200005d9
 8081090:	08084710 	.word	0x08084710
 8081094:	20000608 	.word	0x20000608
 8081098:	0808471e 	.word	0x0808471e
 808109c:	20000570 	.word	0x20000570
 80810a0:	0808472c 	.word	0x0808472c
 80810a4:	080800b5 	.word	0x080800b5
 80810a8:	0808473a 	.word	0x0808473a
 80810ac:	08080889 	.word	0x08080889
 80810b0:	08084746 	.word	0x08084746
 80810b4:	08080731 	.word	0x08080731
 80810b8:	08084753 	.word	0x08084753
 80810bc:	080807dd 	.word	0x080807dd
 80810c0:	08084760 	.word	0x08084760
 80810c4:	200005c0 	.word	0x200005c0
 80810c8:	20000478 	.word	0x20000478
 80810cc:	200006b4 	.word	0x200006b4
 80810d0:	0808476c 	.word	0x0808476c
 80810d4:	200006e0 	.word	0x200006e0
 80810d8:	20000594 	.word	0x20000594
 80810dc:	0808477e 	.word	0x0808477e
 80810e0:	200006d8 	.word	0x200006d8

080810e4 <_GLOBAL__sub_I_SystemMode>:
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
 80810e4:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80810e6:	4b0d      	ldr	r3, [pc, #52]	; (808111c <_GLOBAL__sub_I_SystemMode+0x38>)
 80810e8:	2400      	movs	r4, #0
 80810ea:	601c      	str	r4, [r3, #0]
 80810ec:	4b0c      	ldr	r3, [pc, #48]	; (8081120 <_GLOBAL__sub_I_SystemMode+0x3c>)
 80810ee:	2501      	movs	r5, #1
 80810f0:	701d      	strb	r5, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80810f2:	f000 f899 	bl	8081228 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80810f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80810fa:	4b0a      	ldr	r3, [pc, #40]	; (8081124 <_GLOBAL__sub_I_SystemMode+0x40>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80810fc:	2002      	movs	r0, #2
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80810fe:	701c      	strb	r4, [r3, #0]
 8081100:	805c      	strh	r4, [r3, #2]
 8081102:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081104:	f000 f978 	bl	80813f8 <set_system_mode>

#define MEMORYMAPVERSION 1                          // Lets us know if we need to reinitialize the memory map

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
 8081108:	4621      	mov	r1, r4
 808110a:	4628      	mov	r0, r5
 808110c:	f000 f98c 	bl	8081428 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 8081110:	4629      	mov	r1, r5
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
 8081112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8081116:	2004      	movs	r0, #4
 8081118:	f000 b826 	b.w	8081168 <HAL_Feature_Set>
 808111c:	20000630 	.word	0x20000630
 8081120:	20000594 	.word	0x20000594
 8081124:	20000596 	.word	0x20000596

08081128 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8081128:	b508      	push	{r3, lr}
 808112a:	4b02      	ldr	r3, [pc, #8]	; (8081134 <inet_gethostbyname+0xc>)
 808112c:	681b      	ldr	r3, [r3, #0]
 808112e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081130:	9301      	str	r3, [sp, #4]
 8081132:	bd08      	pop	{r3, pc}
 8081134:	08060020 	.word	0x08060020

08081138 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 8081138:	b508      	push	{r3, lr}
 808113a:	4b02      	ldr	r3, [pc, #8]	; (8081144 <cellular_signal+0xc>)
 808113c:	681b      	ldr	r3, [r3, #0]
 808113e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081140:	9301      	str	r3, [sp, #4]
 8081142:	bd08      	pop	{r3, pc}
 8081144:	08060020 	.word	0x08060020

08081148 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8081148:	b508      	push	{r3, lr}
 808114a:	4b02      	ldr	r3, [pc, #8]	; (8081154 <cellular_command+0xc>)
 808114c:	681b      	ldr	r3, [r3, #0]
 808114e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081150:	9301      	str	r3, [sp, #4]
 8081152:	bd08      	pop	{r3, pc}
 8081154:	08060020 	.word	0x08060020

08081158 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8081158:	b508      	push	{r3, lr}
 808115a:	4b02      	ldr	r3, [pc, #8]	; (8081164 <os_mutex_create+0xc>)
 808115c:	681b      	ldr	r3, [r3, #0]
 808115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081160:	9301      	str	r3, [sp, #4]
 8081162:	bd08      	pop	{r3, pc}
 8081164:	080401d0 	.word	0x080401d0

08081168 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 8081168:	b508      	push	{r3, lr}
 808116a:	4b02      	ldr	r3, [pc, #8]	; (8081174 <HAL_Feature_Set+0xc>)
 808116c:	681b      	ldr	r3, [r3, #0]
 808116e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8081170:	9301      	str	r3, [sp, #4]
 8081172:	bd08      	pop	{r3, pc}
 8081174:	080401b8 	.word	0x080401b8

08081178 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 8081178:	b508      	push	{r3, lr}
 808117a:	4b02      	ldr	r3, [pc, #8]	; (8081184 <HAL_Core_System_Reset_Ex+0xc>)
 808117c:	681b      	ldr	r3, [r3, #0]
 808117e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8081180:	9301      	str	r3, [sp, #4]
 8081182:	bd08      	pop	{r3, pc}
 8081184:	080401b8 	.word	0x080401b8

08081188 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8081188:	b508      	push	{r3, lr}
 808118a:	4b02      	ldr	r3, [pc, #8]	; (8081194 <HAL_Core_Get_Last_Reset_Info+0xc>)
 808118c:	681b      	ldr	r3, [r3, #0]
 808118e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8081190:	9301      	str	r3, [sp, #4]
 8081192:	bd08      	pop	{r3, pc}
 8081194:	080401b8 	.word	0x080401b8

08081198 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081198:	b508      	push	{r3, lr}
 808119a:	4b02      	ldr	r3, [pc, #8]	; (80811a4 <HAL_RNG_GetRandomNumber+0xc>)
 808119c:	681b      	ldr	r3, [r3, #0]
 808119e:	685b      	ldr	r3, [r3, #4]
 80811a0:	9301      	str	r3, [sp, #4]
 80811a2:	bd08      	pop	{r3, pc}
 80811a4:	0804019c 	.word	0x0804019c

080811a8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80811a8:	b508      	push	{r3, lr}
 80811aa:	4b02      	ldr	r3, [pc, #8]	; (80811b4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80811ac:	681b      	ldr	r3, [r3, #0]
 80811ae:	695b      	ldr	r3, [r3, #20]
 80811b0:	9301      	str	r3, [sp, #4]
 80811b2:	bd08      	pop	{r3, pc}
 80811b4:	0804019c 	.word	0x0804019c

080811b8 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80811b8:	b508      	push	{r3, lr}
 80811ba:	4b02      	ldr	r3, [pc, #8]	; (80811c4 <HAL_RTC_Get_UnixTime+0xc>)
 80811bc:	681b      	ldr	r3, [r3, #0]
 80811be:	69db      	ldr	r3, [r3, #28]
 80811c0:	9301      	str	r3, [sp, #4]
 80811c2:	bd08      	pop	{r3, pc}
 80811c4:	0804019c 	.word	0x0804019c

080811c8 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80811c8:	b508      	push	{r3, lr}
 80811ca:	4b02      	ldr	r3, [pc, #8]	; (80811d4 <HAL_EEPROM_Init+0xc>)
 80811cc:	681b      	ldr	r3, [r3, #0]
 80811ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80811d0:	9301      	str	r3, [sp, #4]
 80811d2:	bd08      	pop	{r3, pc}
 80811d4:	0804019c 	.word	0x0804019c

080811d8 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
 80811d8:	b508      	push	{r3, lr}
 80811da:	4b02      	ldr	r3, [pc, #8]	; (80811e4 <HAL_EEPROM_Read+0xc>)
 80811dc:	681b      	ldr	r3, [r3, #0]
 80811de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80811e0:	9301      	str	r3, [sp, #4]
 80811e2:	bd08      	pop	{r3, pc}
 80811e4:	0804019c 	.word	0x0804019c

080811e8 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
 80811e8:	b508      	push	{r3, lr}
 80811ea:	4b02      	ldr	r3, [pc, #8]	; (80811f4 <HAL_EEPROM_Write+0xc>)
 80811ec:	681b      	ldr	r3, [r3, #0]
 80811ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80811f0:	9301      	str	r3, [sp, #4]
 80811f2:	bd08      	pop	{r3, pc}
 80811f4:	0804019c 	.word	0x0804019c

080811f8 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80811f8:	b508      	push	{r3, lr}
 80811fa:	4b02      	ldr	r3, [pc, #8]	; (8081204 <HAL_EEPROM_Put+0xc>)
 80811fc:	681b      	ldr	r3, [r3, #0]
 80811fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081200:	9301      	str	r3, [sp, #4]
 8081202:	bd08      	pop	{r3, pc}
 8081204:	0804019c 	.word	0x0804019c

08081208 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8081208:	b508      	push	{r3, lr}
 808120a:	4b02      	ldr	r3, [pc, #8]	; (8081214 <HAL_RTC_Time_Is_Valid+0xc>)
 808120c:	681b      	ldr	r3, [r3, #0]
 808120e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081210:	9301      	str	r3, [sp, #4]
 8081212:	bd08      	pop	{r3, pc}
 8081214:	0804019c 	.word	0x0804019c

08081218 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8081218:	b508      	push	{r3, lr}
 808121a:	4b02      	ldr	r3, [pc, #8]	; (8081224 <hal_timer_millis+0xc>)
 808121c:	681b      	ldr	r3, [r3, #0]
 808121e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081220:	9301      	str	r3, [sp, #4]
 8081222:	bd08      	pop	{r3, pc}
 8081224:	0804019c 	.word	0x0804019c

08081228 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 8081228:	b508      	push	{r3, lr}
 808122a:	4b02      	ldr	r3, [pc, #8]	; (8081234 <HAL_Pin_Map+0xc>)
 808122c:	681b      	ldr	r3, [r3, #0]
 808122e:	681b      	ldr	r3, [r3, #0]
 8081230:	9301      	str	r3, [sp, #4]
 8081232:	bd08      	pop	{r3, pc}
 8081234:	080401b0 	.word	0x080401b0

08081238 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081238:	b508      	push	{r3, lr}
 808123a:	4b02      	ldr	r3, [pc, #8]	; (8081244 <HAL_Pin_Mode+0xc>)
 808123c:	681b      	ldr	r3, [r3, #0]
 808123e:	689b      	ldr	r3, [r3, #8]
 8081240:	9301      	str	r3, [sp, #4]
 8081242:	bd08      	pop	{r3, pc}
 8081244:	080401b0 	.word	0x080401b0

08081248 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081248:	b508      	push	{r3, lr}
 808124a:	4b02      	ldr	r3, [pc, #8]	; (8081254 <HAL_Get_Pin_Mode+0xc>)
 808124c:	681b      	ldr	r3, [r3, #0]
 808124e:	68db      	ldr	r3, [r3, #12]
 8081250:	9301      	str	r3, [sp, #4]
 8081252:	bd08      	pop	{r3, pc}
 8081254:	080401b0 	.word	0x080401b0

08081258 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081258:	b508      	push	{r3, lr}
 808125a:	4b02      	ldr	r3, [pc, #8]	; (8081264 <HAL_GPIO_Write+0xc>)
 808125c:	681b      	ldr	r3, [r3, #0]
 808125e:	691b      	ldr	r3, [r3, #16]
 8081260:	9301      	str	r3, [sp, #4]
 8081262:	bd08      	pop	{r3, pc}
 8081264:	080401b0 	.word	0x080401b0

08081268 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8081268:	b508      	push	{r3, lr}
 808126a:	4b02      	ldr	r3, [pc, #8]	; (8081274 <HAL_GPIO_Read+0xc>)
 808126c:	681b      	ldr	r3, [r3, #0]
 808126e:	695b      	ldr	r3, [r3, #20]
 8081270:	9301      	str	r3, [sp, #4]
 8081272:	bd08      	pop	{r3, pc}
 8081274:	080401b0 	.word	0x080401b0

08081278 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8081278:	b508      	push	{r3, lr}
 808127a:	4b02      	ldr	r3, [pc, #8]	; (8081284 <HAL_I2C_Write_Data+0xc>)
 808127c:	681b      	ldr	r3, [r3, #0]
 808127e:	6a1b      	ldr	r3, [r3, #32]
 8081280:	9301      	str	r3, [sp, #4]
 8081282:	bd08      	pop	{r3, pc}
 8081284:	080401ac 	.word	0x080401ac

08081288 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8081288:	b508      	push	{r3, lr}
 808128a:	4b02      	ldr	r3, [pc, #8]	; (8081294 <HAL_I2C_Available_Data+0xc>)
 808128c:	681b      	ldr	r3, [r3, #0]
 808128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081290:	9301      	str	r3, [sp, #4]
 8081292:	bd08      	pop	{r3, pc}
 8081294:	080401ac 	.word	0x080401ac

08081298 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8081298:	b508      	push	{r3, lr}
 808129a:	4b02      	ldr	r3, [pc, #8]	; (80812a4 <HAL_I2C_Read_Data+0xc>)
 808129c:	681b      	ldr	r3, [r3, #0]
 808129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80812a0:	9301      	str	r3, [sp, #4]
 80812a2:	bd08      	pop	{r3, pc}
 80812a4:	080401ac 	.word	0x080401ac

080812a8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80812a8:	b508      	push	{r3, lr}
 80812aa:	4b02      	ldr	r3, [pc, #8]	; (80812b4 <HAL_I2C_Peek_Data+0xc>)
 80812ac:	681b      	ldr	r3, [r3, #0]
 80812ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80812b0:	9301      	str	r3, [sp, #4]
 80812b2:	bd08      	pop	{r3, pc}
 80812b4:	080401ac 	.word	0x080401ac

080812b8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80812b8:	b508      	push	{r3, lr}
 80812ba:	4b02      	ldr	r3, [pc, #8]	; (80812c4 <HAL_I2C_Flush_Data+0xc>)
 80812bc:	681b      	ldr	r3, [r3, #0]
 80812be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80812c0:	9301      	str	r3, [sp, #4]
 80812c2:	bd08      	pop	{r3, pc}
 80812c4:	080401ac 	.word	0x080401ac

080812c8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80812c8:	b508      	push	{r3, lr}
 80812ca:	4b02      	ldr	r3, [pc, #8]	; (80812d4 <HAL_I2C_Is_Enabled+0xc>)
 80812cc:	681b      	ldr	r3, [r3, #0]
 80812ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80812d0:	9301      	str	r3, [sp, #4]
 80812d2:	bd08      	pop	{r3, pc}
 80812d4:	080401ac 	.word	0x080401ac

080812d8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80812d8:	b508      	push	{r3, lr}
 80812da:	4b02      	ldr	r3, [pc, #8]	; (80812e4 <HAL_I2C_Init+0xc>)
 80812dc:	681b      	ldr	r3, [r3, #0]
 80812de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80812e0:	9301      	str	r3, [sp, #4]
 80812e2:	bd08      	pop	{r3, pc}
 80812e4:	080401ac 	.word	0x080401ac

080812e8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80812e8:	b508      	push	{r3, lr}
 80812ea:	4b02      	ldr	r3, [pc, #8]	; (80812f4 <HAL_SPI_Init+0xc>)
 80812ec:	681b      	ldr	r3, [r3, #0]
 80812ee:	69db      	ldr	r3, [r3, #28]
 80812f0:	9301      	str	r3, [sp, #4]
 80812f2:	bd08      	pop	{r3, pc}
 80812f4:	080401b4 	.word	0x080401b4

080812f8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80812f8:	b508      	push	{r3, lr}
 80812fa:	4b02      	ldr	r3, [pc, #8]	; (8081304 <HAL_SPI_Is_Enabled+0xc>)
 80812fc:	681b      	ldr	r3, [r3, #0]
 80812fe:	6a1b      	ldr	r3, [r3, #32]
 8081300:	9301      	str	r3, [sp, #4]
 8081302:	bd08      	pop	{r3, pc}
 8081304:	080401b4 	.word	0x080401b4

08081308 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8081308:	b508      	push	{r3, lr}
 808130a:	4b02      	ldr	r3, [pc, #8]	; (8081314 <HAL_USART_Init+0xc>)
 808130c:	681b      	ldr	r3, [r3, #0]
 808130e:	699b      	ldr	r3, [r3, #24]
 8081310:	9301      	str	r3, [sp, #4]
 8081312:	bd08      	pop	{r3, pc}
 8081314:	080401c4 	.word	0x080401c4

08081318 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8081318:	b508      	push	{r3, lr}
 808131a:	4b02      	ldr	r3, [pc, #8]	; (8081324 <HAL_USART_Write_Data+0xc>)
 808131c:	681b      	ldr	r3, [r3, #0]
 808131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081320:	9301      	str	r3, [sp, #4]
 8081322:	bd08      	pop	{r3, pc}
 8081324:	080401c4 	.word	0x080401c4

08081328 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8081328:	b508      	push	{r3, lr}
 808132a:	4b02      	ldr	r3, [pc, #8]	; (8081334 <HAL_USART_Available_Data+0xc>)
 808132c:	681b      	ldr	r3, [r3, #0]
 808132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081330:	9301      	str	r3, [sp, #4]
 8081332:	bd08      	pop	{r3, pc}
 8081334:	080401c4 	.word	0x080401c4

08081338 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8081338:	b508      	push	{r3, lr}
 808133a:	4b02      	ldr	r3, [pc, #8]	; (8081344 <HAL_USART_Read_Data+0xc>)
 808133c:	681b      	ldr	r3, [r3, #0]
 808133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081340:	9301      	str	r3, [sp, #4]
 8081342:	bd08      	pop	{r3, pc}
 8081344:	080401c4 	.word	0x080401c4

08081348 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8081348:	b508      	push	{r3, lr}
 808134a:	4b02      	ldr	r3, [pc, #8]	; (8081354 <HAL_USART_Peek_Data+0xc>)
 808134c:	681b      	ldr	r3, [r3, #0]
 808134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081350:	9301      	str	r3, [sp, #4]
 8081352:	bd08      	pop	{r3, pc}
 8081354:	080401c4 	.word	0x080401c4

08081358 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8081358:	b508      	push	{r3, lr}
 808135a:	4b02      	ldr	r3, [pc, #8]	; (8081364 <HAL_USART_Flush_Data+0xc>)
 808135c:	681b      	ldr	r3, [r3, #0]
 808135e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081360:	9301      	str	r3, [sp, #4]
 8081362:	bd08      	pop	{r3, pc}
 8081364:	080401c4 	.word	0x080401c4

08081368 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8081368:	b508      	push	{r3, lr}
 808136a:	4b02      	ldr	r3, [pc, #8]	; (8081374 <HAL_USART_Is_Enabled+0xc>)
 808136c:	681b      	ldr	r3, [r3, #0]
 808136e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081370:	9301      	str	r3, [sp, #4]
 8081372:	bd08      	pop	{r3, pc}
 8081374:	080401c4 	.word	0x080401c4

08081378 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8081378:	b508      	push	{r3, lr}
 808137a:	4b02      	ldr	r3, [pc, #8]	; (8081384 <HAL_USART_Available_Data_For_Write+0xc>)
 808137c:	681b      	ldr	r3, [r3, #0]
 808137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081380:	9301      	str	r3, [sp, #4]
 8081382:	bd08      	pop	{r3, pc}
 8081384:	080401c4 	.word	0x080401c4

08081388 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081388:	b508      	push	{r3, lr}
 808138a:	4b02      	ldr	r3, [pc, #8]	; (8081394 <HAL_USB_USART_Init+0xc>)
 808138c:	681b      	ldr	r3, [r3, #0]
 808138e:	681b      	ldr	r3, [r3, #0]
 8081390:	9301      	str	r3, [sp, #4]
 8081392:	bd08      	pop	{r3, pc}
 8081394:	0806001c 	.word	0x0806001c

08081398 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081398:	b508      	push	{r3, lr}
 808139a:	4b02      	ldr	r3, [pc, #8]	; (80813a4 <HAL_USB_USART_Available_Data+0xc>)
 808139c:	681b      	ldr	r3, [r3, #0]
 808139e:	691b      	ldr	r3, [r3, #16]
 80813a0:	9301      	str	r3, [sp, #4]
 80813a2:	bd08      	pop	{r3, pc}
 80813a4:	0806001c 	.word	0x0806001c

080813a8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80813a8:	b508      	push	{r3, lr}
 80813aa:	4b02      	ldr	r3, [pc, #8]	; (80813b4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80813ac:	681b      	ldr	r3, [r3, #0]
 80813ae:	695b      	ldr	r3, [r3, #20]
 80813b0:	9301      	str	r3, [sp, #4]
 80813b2:	bd08      	pop	{r3, pc}
 80813b4:	0806001c 	.word	0x0806001c

080813b8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80813b8:	b508      	push	{r3, lr}
 80813ba:	4b02      	ldr	r3, [pc, #8]	; (80813c4 <HAL_USB_USART_Receive_Data+0xc>)
 80813bc:	681b      	ldr	r3, [r3, #0]
 80813be:	699b      	ldr	r3, [r3, #24]
 80813c0:	9301      	str	r3, [sp, #4]
 80813c2:	bd08      	pop	{r3, pc}
 80813c4:	0806001c 	.word	0x0806001c

080813c8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80813c8:	b508      	push	{r3, lr}
 80813ca:	4b02      	ldr	r3, [pc, #8]	; (80813d4 <HAL_USB_USART_Send_Data+0xc>)
 80813cc:	681b      	ldr	r3, [r3, #0]
 80813ce:	69db      	ldr	r3, [r3, #28]
 80813d0:	9301      	str	r3, [sp, #4]
 80813d2:	bd08      	pop	{r3, pc}
 80813d4:	0806001c 	.word	0x0806001c

080813d8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80813d8:	b508      	push	{r3, lr}
 80813da:	4b02      	ldr	r3, [pc, #8]	; (80813e4 <HAL_USB_USART_Flush_Data+0xc>)
 80813dc:	681b      	ldr	r3, [r3, #0]
 80813de:	6a1b      	ldr	r3, [r3, #32]
 80813e0:	9301      	str	r3, [sp, #4]
 80813e2:	bd08      	pop	{r3, pc}
 80813e4:	0806001c 	.word	0x0806001c

080813e8 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80813e8:	b508      	push	{r3, lr}
 80813ea:	4b02      	ldr	r3, [pc, #8]	; (80813f4 <system_mode+0xc>)
 80813ec:	681b      	ldr	r3, [r3, #0]
 80813ee:	681b      	ldr	r3, [r3, #0]
 80813f0:	9301      	str	r3, [sp, #4]
 80813f2:	bd08      	pop	{r3, pc}
 80813f4:	080401a4 	.word	0x080401a4

080813f8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80813f8:	b508      	push	{r3, lr}
 80813fa:	4b02      	ldr	r3, [pc, #8]	; (8081404 <set_system_mode+0xc>)
 80813fc:	681b      	ldr	r3, [r3, #0]
 80813fe:	685b      	ldr	r3, [r3, #4]
 8081400:	9301      	str	r3, [sp, #4]
 8081402:	bd08      	pop	{r3, pc}
 8081404:	080401a4 	.word	0x080401a4

08081408 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081408:	b508      	push	{r3, lr}
 808140a:	4b02      	ldr	r3, [pc, #8]	; (8081414 <system_delay_ms+0xc>)
 808140c:	681b      	ldr	r3, [r3, #0]
 808140e:	695b      	ldr	r3, [r3, #20]
 8081410:	9301      	str	r3, [sp, #4]
 8081412:	bd08      	pop	{r3, pc}
 8081414:	080401a4 	.word	0x080401a4

08081418 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8081418:	b508      	push	{r3, lr}
 808141a:	4b02      	ldr	r3, [pc, #8]	; (8081424 <system_sleep+0xc>)
 808141c:	681b      	ldr	r3, [r3, #0]
 808141e:	699b      	ldr	r3, [r3, #24]
 8081420:	9301      	str	r3, [sp, #4]
 8081422:	bd08      	pop	{r3, pc}
 8081424:	080401a4 	.word	0x080401a4

08081428 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8081428:	b508      	push	{r3, lr}
 808142a:	4b02      	ldr	r3, [pc, #8]	; (8081434 <system_thread_set_state+0xc>)
 808142c:	681b      	ldr	r3, [r3, #0]
 808142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081430:	9301      	str	r3, [sp, #4]
 8081432:	bd08      	pop	{r3, pc}
 8081434:	080401a4 	.word	0x080401a4

08081438 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081438:	b508      	push	{r3, lr}
 808143a:	4b02      	ldr	r3, [pc, #8]	; (8081444 <application_thread_current+0xc>)
 808143c:	681b      	ldr	r3, [r3, #0]
 808143e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081440:	9301      	str	r3, [sp, #4]
 8081442:	bd08      	pop	{r3, pc}
 8081444:	080401a4 	.word	0x080401a4

08081448 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8081448:	b508      	push	{r3, lr}
 808144a:	4b02      	ldr	r3, [pc, #8]	; (8081454 <application_thread_invoke+0xc>)
 808144c:	681b      	ldr	r3, [r3, #0]
 808144e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081450:	9301      	str	r3, [sp, #4]
 8081452:	bd08      	pop	{r3, pc}
 8081454:	080401a4 	.word	0x080401a4

08081458 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8081458:	b508      	push	{r3, lr}
 808145a:	4b02      	ldr	r3, [pc, #8]	; (8081464 <system_thread_get_state+0xc>)
 808145c:	681b      	ldr	r3, [r3, #0]
 808145e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081460:	9301      	str	r3, [sp, #4]
 8081462:	bd08      	pop	{r3, pc}
 8081464:	080401a4 	.word	0x080401a4

08081468 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081468:	b508      	push	{r3, lr}
 808146a:	4b03      	ldr	r3, [pc, #12]	; (8081478 <system_ctrl_set_app_request_handler+0x10>)
 808146c:	681b      	ldr	r3, [r3, #0]
 808146e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8081472:	9301      	str	r3, [sp, #4]
 8081474:	bd08      	pop	{r3, pc}
 8081476:	0000      	.short	0x0000
 8081478:	080401a4 	.word	0x080401a4

0808147c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 808147c:	b508      	push	{r3, lr}
 808147e:	4b03      	ldr	r3, [pc, #12]	; (808148c <system_ctrl_set_result+0x10>)
 8081480:	681b      	ldr	r3, [r3, #0]
 8081482:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8081486:	9301      	str	r3, [sp, #4]
 8081488:	bd08      	pop	{r3, pc}
 808148a:	0000      	.short	0x0000
 808148c:	080401a4 	.word	0x080401a4

08081490 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8081490:	b508      	push	{r3, lr}
 8081492:	4b02      	ldr	r3, [pc, #8]	; (808149c <spark_variable+0xc>)
 8081494:	681b      	ldr	r3, [r3, #0]
 8081496:	681b      	ldr	r3, [r3, #0]
 8081498:	9301      	str	r3, [sp, #4]
 808149a:	bd08      	pop	{r3, pc}
 808149c:	080401cc 	.word	0x080401cc

080814a0 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80814a0:	b508      	push	{r3, lr}
 80814a2:	4b02      	ldr	r3, [pc, #8]	; (80814ac <spark_function+0xc>)
 80814a4:	681b      	ldr	r3, [r3, #0]
 80814a6:	685b      	ldr	r3, [r3, #4]
 80814a8:	9301      	str	r3, [sp, #4]
 80814aa:	bd08      	pop	{r3, pc}
 80814ac:	080401cc 	.word	0x080401cc

080814b0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80814b0:	b508      	push	{r3, lr}
 80814b2:	4b02      	ldr	r3, [pc, #8]	; (80814bc <spark_process+0xc>)
 80814b4:	681b      	ldr	r3, [r3, #0]
 80814b6:	689b      	ldr	r3, [r3, #8]
 80814b8:	9301      	str	r3, [sp, #4]
 80814ba:	bd08      	pop	{r3, pc}
 80814bc:	080401cc 	.word	0x080401cc

080814c0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80814c0:	b508      	push	{r3, lr}
 80814c2:	4b02      	ldr	r3, [pc, #8]	; (80814cc <spark_cloud_flag_connect+0xc>)
 80814c4:	681b      	ldr	r3, [r3, #0]
 80814c6:	68db      	ldr	r3, [r3, #12]
 80814c8:	9301      	str	r3, [sp, #4]
 80814ca:	bd08      	pop	{r3, pc}
 80814cc:	080401cc 	.word	0x080401cc

080814d0 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
 80814d0:	b508      	push	{r3, lr}
 80814d2:	4b02      	ldr	r3, [pc, #8]	; (80814dc <spark_cloud_flag_disconnect+0xc>)
 80814d4:	681b      	ldr	r3, [r3, #0]
 80814d6:	691b      	ldr	r3, [r3, #16]
 80814d8:	9301      	str	r3, [sp, #4]
 80814da:	bd08      	pop	{r3, pc}
 80814dc:	080401cc 	.word	0x080401cc

080814e0 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80814e0:	b508      	push	{r3, lr}
 80814e2:	4b02      	ldr	r3, [pc, #8]	; (80814ec <spark_cloud_flag_connected+0xc>)
 80814e4:	681b      	ldr	r3, [r3, #0]
 80814e6:	695b      	ldr	r3, [r3, #20]
 80814e8:	9301      	str	r3, [sp, #4]
 80814ea:	bd08      	pop	{r3, pc}
 80814ec:	080401cc 	.word	0x080401cc

080814f0 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80814f0:	b508      	push	{r3, lr}
 80814f2:	4b02      	ldr	r3, [pc, #8]	; (80814fc <spark_deviceID+0xc>)
 80814f4:	681b      	ldr	r3, [r3, #0]
 80814f6:	69db      	ldr	r3, [r3, #28]
 80814f8:	9301      	str	r3, [sp, #4]
 80814fa:	bd08      	pop	{r3, pc}
 80814fc:	080401cc 	.word	0x080401cc

08081500 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8081500:	b508      	push	{r3, lr}
 8081502:	4b02      	ldr	r3, [pc, #8]	; (808150c <spark_send_event+0xc>)
 8081504:	681b      	ldr	r3, [r3, #0]
 8081506:	6a1b      	ldr	r3, [r3, #32]
 8081508:	9301      	str	r3, [sp, #4]
 808150a:	bd08      	pop	{r3, pc}
 808150c:	080401cc 	.word	0x080401cc

08081510 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 8081510:	b508      	push	{r3, lr}
 8081512:	4b02      	ldr	r3, [pc, #8]	; (808151c <spark_subscribe+0xc>)
 8081514:	681b      	ldr	r3, [r3, #0]
 8081516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081518:	9301      	str	r3, [sp, #4]
 808151a:	bd08      	pop	{r3, pc}
 808151c:	080401cc 	.word	0x080401cc

08081520 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 8081520:	b508      	push	{r3, lr}
 8081522:	4b02      	ldr	r3, [pc, #8]	; (808152c <spark_sync_time+0xc>)
 8081524:	681b      	ldr	r3, [r3, #0]
 8081526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081528:	9301      	str	r3, [sp, #4]
 808152a:	bd08      	pop	{r3, pc}
 808152c:	080401cc 	.word	0x080401cc

08081530 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8081530:	b508      	push	{r3, lr}
 8081532:	4b02      	ldr	r3, [pc, #8]	; (808153c <spark_sync_time_pending+0xc>)
 8081534:	681b      	ldr	r3, [r3, #0]
 8081536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081538:	9301      	str	r3, [sp, #4]
 808153a:	bd08      	pop	{r3, pc}
 808153c:	080401cc 	.word	0x080401cc

08081540 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8081540:	b508      	push	{r3, lr}
 8081542:	4b02      	ldr	r3, [pc, #8]	; (808154c <spark_set_random_seed_from_cloud_handler+0xc>)
 8081544:	681b      	ldr	r3, [r3, #0]
 8081546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081548:	9301      	str	r3, [sp, #4]
 808154a:	bd08      	pop	{r3, pc}
 808154c:	080401cc 	.word	0x080401cc

08081550 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8081550:	b508      	push	{r3, lr}
 8081552:	4b02      	ldr	r3, [pc, #8]	; (808155c <network_connect+0xc>)
 8081554:	681b      	ldr	r3, [r3, #0]
 8081556:	685b      	ldr	r3, [r3, #4]
 8081558:	9301      	str	r3, [sp, #4]
 808155a:	bd08      	pop	{r3, pc}
 808155c:	080401c8 	.word	0x080401c8

08081560 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8081560:	b508      	push	{r3, lr}
 8081562:	4b02      	ldr	r3, [pc, #8]	; (808156c <network_connecting+0xc>)
 8081564:	681b      	ldr	r3, [r3, #0]
 8081566:	689b      	ldr	r3, [r3, #8]
 8081568:	9301      	str	r3, [sp, #4]
 808156a:	bd08      	pop	{r3, pc}
 808156c:	080401c8 	.word	0x080401c8

08081570 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8081570:	b508      	push	{r3, lr}
 8081572:	4b02      	ldr	r3, [pc, #8]	; (808157c <network_disconnect+0xc>)
 8081574:	681b      	ldr	r3, [r3, #0]
 8081576:	68db      	ldr	r3, [r3, #12]
 8081578:	9301      	str	r3, [sp, #4]
 808157a:	bd08      	pop	{r3, pc}
 808157c:	080401c8 	.word	0x080401c8

08081580 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8081580:	b508      	push	{r3, lr}
 8081582:	4b02      	ldr	r3, [pc, #8]	; (808158c <network_ready+0xc>)
 8081584:	681b      	ldr	r3, [r3, #0]
 8081586:	691b      	ldr	r3, [r3, #16]
 8081588:	9301      	str	r3, [sp, #4]
 808158a:	bd08      	pop	{r3, pc}
 808158c:	080401c8 	.word	0x080401c8

08081590 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8081590:	b508      	push	{r3, lr}
 8081592:	4b02      	ldr	r3, [pc, #8]	; (808159c <network_on+0xc>)
 8081594:	681b      	ldr	r3, [r3, #0]
 8081596:	695b      	ldr	r3, [r3, #20]
 8081598:	9301      	str	r3, [sp, #4]
 808159a:	bd08      	pop	{r3, pc}
 808159c:	080401c8 	.word	0x080401c8

080815a0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80815a0:	b508      	push	{r3, lr}
 80815a2:	4b02      	ldr	r3, [pc, #8]	; (80815ac <network_off+0xc>)
 80815a4:	681b      	ldr	r3, [r3, #0]
 80815a6:	699b      	ldr	r3, [r3, #24]
 80815a8:	9301      	str	r3, [sp, #4]
 80815aa:	bd08      	pop	{r3, pc}
 80815ac:	080401c8 	.word	0x080401c8

080815b0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80815b0:	b508      	push	{r3, lr}
 80815b2:	4b02      	ldr	r3, [pc, #8]	; (80815bc <network_listen+0xc>)
 80815b4:	681b      	ldr	r3, [r3, #0]
 80815b6:	69db      	ldr	r3, [r3, #28]
 80815b8:	9301      	str	r3, [sp, #4]
 80815ba:	bd08      	pop	{r3, pc}
 80815bc:	080401c8 	.word	0x080401c8

080815c0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80815c0:	b508      	push	{r3, lr}
 80815c2:	4b02      	ldr	r3, [pc, #8]	; (80815cc <network_listening+0xc>)
 80815c4:	681b      	ldr	r3, [r3, #0]
 80815c6:	6a1b      	ldr	r3, [r3, #32]
 80815c8:	9301      	str	r3, [sp, #4]
 80815ca:	bd08      	pop	{r3, pc}
 80815cc:	080401c8 	.word	0x080401c8

080815d0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80815d0:	b508      	push	{r3, lr}
 80815d2:	4b02      	ldr	r3, [pc, #8]	; (80815dc <network_set_listen_timeout+0xc>)
 80815d4:	681b      	ldr	r3, [r3, #0]
 80815d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80815d8:	9301      	str	r3, [sp, #4]
 80815da:	bd08      	pop	{r3, pc}
 80815dc:	080401c8 	.word	0x080401c8

080815e0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80815e0:	b508      	push	{r3, lr}
 80815e2:	4b02      	ldr	r3, [pc, #8]	; (80815ec <network_get_listen_timeout+0xc>)
 80815e4:	681b      	ldr	r3, [r3, #0]
 80815e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80815e8:	9301      	str	r3, [sp, #4]
 80815ea:	bd08      	pop	{r3, pc}
 80815ec:	080401c8 	.word	0x080401c8

080815f0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80815f0:	b508      	push	{r3, lr}
 80815f2:	4b02      	ldr	r3, [pc, #8]	; (80815fc <malloc+0xc>)
 80815f4:	681b      	ldr	r3, [r3, #0]
 80815f6:	681b      	ldr	r3, [r3, #0]
 80815f8:	9301      	str	r3, [sp, #4]
 80815fa:	bd08      	pop	{r3, pc}
 80815fc:	080401a0 	.word	0x080401a0

08081600 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8081600:	b508      	push	{r3, lr}
 8081602:	4b02      	ldr	r3, [pc, #8]	; (808160c <free+0xc>)
 8081604:	681b      	ldr	r3, [r3, #0]
 8081606:	685b      	ldr	r3, [r3, #4]
 8081608:	9301      	str	r3, [sp, #4]
 808160a:	bd08      	pop	{r3, pc}
 808160c:	080401a0 	.word	0x080401a0

08081610 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8081610:	b508      	push	{r3, lr}
 8081612:	4b02      	ldr	r3, [pc, #8]	; (808161c <realloc+0xc>)
 8081614:	681b      	ldr	r3, [r3, #0]
 8081616:	689b      	ldr	r3, [r3, #8]
 8081618:	9301      	str	r3, [sp, #4]
 808161a:	bd08      	pop	{r3, pc}
 808161c:	080401a0 	.word	0x080401a0

08081620 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8081620:	b508      	push	{r3, lr}
 8081622:	4b02      	ldr	r3, [pc, #8]	; (808162c <siprintf+0xc>)
 8081624:	681b      	ldr	r3, [r3, #0]
 8081626:	691b      	ldr	r3, [r3, #16]
 8081628:	9301      	str	r3, [sp, #4]
 808162a:	bd08      	pop	{r3, pc}
 808162c:	080401a0 	.word	0x080401a0

08081630 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8081630:	b508      	push	{r3, lr}
 8081632:	4b02      	ldr	r3, [pc, #8]	; (808163c <siscanf+0xc>)
 8081634:	681b      	ldr	r3, [r3, #0]
 8081636:	699b      	ldr	r3, [r3, #24]
 8081638:	9301      	str	r3, [sp, #4]
 808163a:	bd08      	pop	{r3, pc}
 808163c:	080401a0 	.word	0x080401a0

08081640 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8081640:	b508      	push	{r3, lr}
 8081642:	4b02      	ldr	r3, [pc, #8]	; (808164c <snprintf+0xc>)
 8081644:	681b      	ldr	r3, [r3, #0]
 8081646:	69db      	ldr	r3, [r3, #28]
 8081648:	9301      	str	r3, [sp, #4]
 808164a:	bd08      	pop	{r3, pc}
 808164c:	080401a0 	.word	0x080401a0

08081650 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8081650:	b508      	push	{r3, lr}
 8081652:	4b02      	ldr	r3, [pc, #8]	; (808165c <abort+0xc>)
 8081654:	681b      	ldr	r3, [r3, #0]
 8081656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081658:	9301      	str	r3, [sp, #4]
 808165a:	bd08      	pop	{r3, pc}
 808165c:	080401a0 	.word	0x080401a0

08081660 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8081660:	b508      	push	{r3, lr}
 8081662:	4b02      	ldr	r3, [pc, #8]	; (808166c <_malloc_r+0xc>)
 8081664:	681b      	ldr	r3, [r3, #0]
 8081666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081668:	9301      	str	r3, [sp, #4]
 808166a:	bd08      	pop	{r3, pc}
 808166c:	080401a0 	.word	0x080401a0

08081670 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8081670:	2100      	movs	r1, #0
 8081672:	f7ff bec9 	b.w	8081408 <system_delay_ms>

08081676 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8081676:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081678:	6883      	ldr	r3, [r0, #8]
 808167a:	4604      	mov	r4, r0
 808167c:	b90b      	cbnz	r3, 8081682 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808167e:	f001 fa1c 	bl	8082aba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081682:	68c3      	ldr	r3, [r0, #12]
 8081684:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8081686:	68a3      	ldr	r3, [r4, #8]
 8081688:	b11b      	cbz	r3, 8081692 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808168a:	2203      	movs	r2, #3
 808168c:	4621      	mov	r1, r4
 808168e:	4620      	mov	r0, r4
 8081690:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081692:	4620      	mov	r0, r4
}
 8081694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081698:	f7fe bd01 	b.w	808009e <_ZdlPv>

0808169c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808169c:	2200      	movs	r2, #0
 808169e:	4611      	mov	r1, r2
 80816a0:	6840      	ldr	r0, [r0, #4]
 80816a2:	f7ff bf6d 	b.w	8081580 <network_ready>

080816a6 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80816a6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 80816aa:	2600      	movs	r6, #0
 80816ac:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80816ae:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80816b0:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80816b2:	4688      	mov	r8, r1
 80816b4:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 80816b6:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80816ba:	f002 f9e4 	bl	8083a86 <strlen>
 80816be:	9600      	str	r6, [sp, #0]
 80816c0:	b281      	uxth	r1, r0
 80816c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80816c6:	4622      	mov	r2, r4
 80816c8:	4638      	mov	r0, r7
 80816ca:	f7ff fd2d 	bl	8081128 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80816ce:	b120      	cbz	r0, 80816da <_ZN5spark13CellularClass7resolveEPKc+0x34>
 80816d0:	4631      	mov	r1, r6
 80816d2:	4628      	mov	r0, r5
 80816d4:	f000 fc58 	bl	8081f88 <_ZN9IPAddressC1Em>
 80816d8:	e003      	b.n	80816e2 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 80816da:	4621      	mov	r1, r4
 80816dc:	4628      	mov	r0, r5
 80816de:	f000 fc4b 	bl	8081f78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80816e2:	4628      	mov	r0, r5
 80816e4:	b004      	add	sp, #16
 80816e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080816ea <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80816ea:	2200      	movs	r2, #0
 80816ec:	4611      	mov	r1, r2
 80816ee:	6840      	ldr	r0, [r0, #4]
 80816f0:	f7ff bf66 	b.w	80815c0 <network_listening>

080816f4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80816f4:	2200      	movs	r2, #0
 80816f6:	4611      	mov	r1, r2
 80816f8:	6840      	ldr	r0, [r0, #4]
 80816fa:	f7ff bf71 	b.w	80815e0 <network_get_listen_timeout>

080816fe <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80816fe:	2200      	movs	r2, #0
 8081700:	6840      	ldr	r0, [r0, #4]
 8081702:	f7ff bf65 	b.w	80815d0 <network_set_listen_timeout>

08081706 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8081706:	2200      	movs	r2, #0
 8081708:	f081 0101 	eor.w	r1, r1, #1
 808170c:	6840      	ldr	r0, [r0, #4]
 808170e:	f7ff bf4f 	b.w	80815b0 <network_listen>

08081712 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8081712:	2300      	movs	r3, #0
 8081714:	461a      	mov	r2, r3
 8081716:	4619      	mov	r1, r3
 8081718:	6840      	ldr	r0, [r0, #4]
 808171a:	f7ff bf41 	b.w	80815a0 <network_off>

0808171e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808171e:	2300      	movs	r3, #0
 8081720:	461a      	mov	r2, r3
 8081722:	4619      	mov	r1, r3
 8081724:	6840      	ldr	r0, [r0, #4]
 8081726:	f7ff bf33 	b.w	8081590 <network_on>

0808172a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 808172a:	2200      	movs	r2, #0
 808172c:	4611      	mov	r1, r2
 808172e:	6840      	ldr	r0, [r0, #4]
 8081730:	f7ff bf16 	b.w	8081560 <network_connecting>

08081734 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8081734:	2200      	movs	r2, #0
 8081736:	2102      	movs	r1, #2
 8081738:	6840      	ldr	r0, [r0, #4]
 808173a:	f7ff bf19 	b.w	8081570 <network_disconnect>

0808173e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 808173e:	2300      	movs	r3, #0
 8081740:	461a      	mov	r2, r3
 8081742:	6840      	ldr	r0, [r0, #4]
 8081744:	f7ff bf04 	b.w	8081550 <network_connect>

08081748 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8081748:	b5f0      	push	{r4, r5, r6, r7, lr}
 808174a:	460f      	mov	r7, r1
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 808174c:	4b1a      	ldr	r3, [pc, #104]	; (80817b8 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 808174e:	2500      	movs	r5, #0
 8081750:	6003      	str	r3, [r0, #0]
 8081752:	2618      	movs	r6, #24
 8081754:	3328      	adds	r3, #40	; 0x28
 8081756:	b089      	sub	sp, #36	; 0x24
 8081758:	6043      	str	r3, [r0, #4]
 808175a:	6085      	str	r5, [r0, #8]
 808175c:	60c5      	str	r5, [r0, #12]
 808175e:	4632      	mov	r2, r6
 8081760:	4629      	mov	r1, r5
 8081762:	4604      	mov	r4, r0
 8081764:	3010      	adds	r0, #16
 8081766:	f002 f8f6 	bl	8083956 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 808176a:	462a      	mov	r2, r5
 808176c:	4629      	mov	r1, r5
 808176e:	6878      	ldr	r0, [r7, #4]
 8081770:	f7ff ff06 	bl	8081580 <network_ready>
 8081774:	b908      	cbnz	r0, 808177a <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
 8081776:	60a0      	str	r0, [r4, #8]
            return sig;
 8081778:	e01b      	b.n	80817b2 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 808177a:	4629      	mov	r1, r5
 808177c:	4632      	mov	r2, r6
 808177e:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 8081780:	9500      	str	r5, [sp, #0]
 8081782:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 8081784:	f002 f8e7 	bl	8083956 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8081788:	a902      	add	r1, sp, #8
 808178a:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 808178c:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8081790:	f7ff fcd2 	bl	8081138 <cellular_signal>
 8081794:	b110      	cbz	r0, 808179c <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
 8081796:	2301      	movs	r3, #1
 8081798:	60a3      	str	r3, [r4, #8]
            return sig;
 808179a:	e00a      	b.n	80817b2 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
 808179c:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 808179e:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 80817a0:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 80817a2:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 80817a4:	b90b      	cbnz	r3, 80817aa <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
 80817a6:	2302      	movs	r3, #2
 80817a8:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 80817aa:	a902      	add	r1, sp, #8
 80817ac:	4620      	mov	r0, r4
 80817ae:	f000 f89d 	bl	80818ec <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 80817b2:	4620      	mov	r0, r4
 80817b4:	b009      	add	sp, #36	; 0x24
 80817b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80817b8:	080847f8 	.word	0x080847f8

080817bc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 80817bc:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80817be:	4c0c      	ldr	r4, [pc, #48]	; (80817f0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 80817c0:	2528      	movs	r5, #40	; 0x28
 80817c2:	462a      	mov	r2, r5
 80817c4:	2100      	movs	r1, #0
 80817c6:	4620      	mov	r0, r4
 80817c8:	f002 f8c5 	bl	8083956 <memset>
        cid = -1;
 80817cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80817d0:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 80817d2:	8025      	strh	r5, [r4, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80817d4:	4c07      	ldr	r4, [pc, #28]	; (80817f4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 80817d6:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 80817d8:	4620      	mov	r0, r4
 80817da:	6063      	str	r3, [r4, #4]
 80817dc:	4b06      	ldr	r3, [pc, #24]	; (80817f8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 80817de:	252c      	movs	r5, #44	; 0x2c
 80817e0:	f840 3b08 	str.w	r3, [r0], #8
 80817e4:	462a      	mov	r2, r5
 80817e6:	2100      	movs	r1, #0
 80817e8:	f002 f8b5 	bl	8083956 <memset>
        size = sizeof(*this);
 80817ec:	8125      	strh	r5, [r4, #8]
 80817ee:	bd38      	pop	{r3, r4, r5, pc}
 80817f0:	20000728 	.word	0x20000728
 80817f4:	200006f4 	.word	0x200006f4
 80817f8:	080847c4 	.word	0x080847c4

080817fc <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 80817fc:	4770      	bx	lr

080817fe <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 80817fe:	7d00      	ldrb	r0, [r0, #20]
 8081800:	4770      	bx	lr
	...

08081804 <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 8081804:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 8081806:	7d03      	ldrb	r3, [r0, #20]
 8081808:	b11b      	cbz	r3, 8081812 <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 808180a:	6980      	ldr	r0, [r0, #24]
 808180c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081810:	d101      	bne.n	8081816 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 8081812:	2000      	movs	r0, #0
 8081814:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 8081816:	f001 fd0d 	bl	8083234 <__aeabi_i2f>
 808181a:	4902      	ldr	r1, [pc, #8]	; (8081824 <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 808181c:	f001 fe12 	bl	8083444 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8081820:	bd08      	pop	{r3, pc}
 8081822:	bf00      	nop
 8081824:	42c80000 	.word	0x42c80000

08081828 <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 8081828:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 808182a:	7d03      	ldrb	r3, [r0, #20]
 808182c:	b11b      	cbz	r3, 8081836 <_ZNK14CellularSignal15getQualityValueEv+0xe>
 808182e:	6a00      	ldr	r0, [r0, #32]
 8081830:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081834:	d101      	bne.n	808183a <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 8081836:	2000      	movs	r0, #0
 8081838:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 808183a:	f001 fcfb 	bl	8083234 <__aeabi_i2f>
 808183e:	4902      	ldr	r1, [pc, #8]	; (8081848 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8081840:	f001 fe00 	bl	8083444 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8081844:	bd08      	pop	{r3, pc}
 8081846:	bf00      	nop
 8081848:	42c80000 	.word	0x42c80000

0808184c <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
 808184c:	b570      	push	{r4, r5, r6, lr}
 808184e:	460d      	mov	r5, r1
 8081850:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8081852:	220a      	movs	r2, #10
 8081854:	6881      	ldr	r1, [r0, #8]
 8081856:	4628      	mov	r0, r5
 8081858:	f000 fcad 	bl	80821b6 <_ZN5Print5printEii>
    n += p.print(',');
 808185c:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 808185e:	4604      	mov	r4, r0
    n += p.print(',');
 8081860:	4628      	mov	r0, r5
 8081862:	f000 fc41 	bl	80820e8 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 8081866:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 8081868:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 808186a:	68f1      	ldr	r1, [r6, #12]
 808186c:	4628      	mov	r0, r5
 808186e:	f000 fca2 	bl	80821b6 <_ZN5Print5printEii>
    return n;
}
 8081872:	4420      	add	r0, r4
 8081874:	bd70      	pop	{r4, r5, r6, pc}

08081876 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 8081876:	f1a0 0004 	sub.w	r0, r0, #4
 808187a:	f7ff bfe7 	b.w	808184c <_ZNK14CellularSignal7printToER5Print>

0808187e <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 808187e:	b510      	push	{r4, lr}
 8081880:	4604      	mov	r4, r0
 8081882:	f7fe fc0c 	bl	808009e <_ZdlPv>
 8081886:	4620      	mov	r0, r4
 8081888:	bd10      	pop	{r4, pc}
	...

0808188c <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 808188c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 808188e:	7d03      	ldrb	r3, [r0, #20]
 8081890:	b15b      	cbz	r3, 80818aa <_ZNK14CellularSignal10getQualityEv+0x1e>
 8081892:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8081894:	2800      	cmp	r0, #0
 8081896:	db08      	blt.n	80818aa <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8081898:	f001 fccc 	bl	8083234 <__aeabi_i2f>
 808189c:	4904      	ldr	r1, [pc, #16]	; (80818b0 <_ZNK14CellularSignal10getQualityEv+0x24>)
 808189e:	f001 fdd1 	bl	8083444 <__aeabi_fdiv>
 80818a2:	4904      	ldr	r1, [pc, #16]	; (80818b4 <_ZNK14CellularSignal10getQualityEv+0x28>)
 80818a4:	f001 fd1a 	bl	80832dc <__aeabi_fmul>
 80818a8:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 80818aa:	4803      	ldr	r0, [pc, #12]	; (80818b8 <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 80818ac:	bd08      	pop	{r3, pc}
 80818ae:	bf00      	nop
 80818b0:	477fff00 	.word	0x477fff00
 80818b4:	42c80000 	.word	0x42c80000
 80818b8:	bf800000 	.word	0xbf800000

080818bc <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 80818bc:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 80818be:	7d03      	ldrb	r3, [r0, #20]
 80818c0:	b15b      	cbz	r3, 80818da <_ZNK14CellularSignal11getStrengthEv+0x1e>
 80818c2:	69c0      	ldr	r0, [r0, #28]
 80818c4:	2800      	cmp	r0, #0
 80818c6:	db08      	blt.n	80818da <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 80818c8:	f001 fcb4 	bl	8083234 <__aeabi_i2f>
 80818cc:	4904      	ldr	r1, [pc, #16]	; (80818e0 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 80818ce:	f001 fdb9 	bl	8083444 <__aeabi_fdiv>
 80818d2:	4904      	ldr	r1, [pc, #16]	; (80818e4 <_ZNK14CellularSignal11getStrengthEv+0x28>)
 80818d4:	f001 fd02 	bl	80832dc <__aeabi_fmul>
 80818d8:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 80818da:	4803      	ldr	r0, [pc, #12]	; (80818e8 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 80818dc:	bd08      	pop	{r3, pc}
 80818de:	bf00      	nop
 80818e0:	477fff00 	.word	0x477fff00
 80818e4:	42c80000 	.word	0x42c80000
 80818e8:	bf800000 	.word	0xbf800000

080818ec <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 80818ec:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 80818ee:	460d      	mov	r5, r1
 80818f0:	f100 0410 	add.w	r4, r0, #16
 80818f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80818f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80818f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80818fc:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 8081900:	2001      	movs	r0, #1
 8081902:	bd30      	pop	{r4, r5, pc}

08081904 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081904:	4770      	bx	lr

08081906 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8081906:	2000      	movs	r0, #0
 8081908:	4770      	bx	lr

0808190a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808190a:	b510      	push	{r4, lr}
 808190c:	4604      	mov	r4, r0
 808190e:	f7fe fbc6 	bl	808009e <_ZdlPv>
 8081912:	4620      	mov	r0, r4
 8081914:	bd10      	pop	{r4, pc}

08081916 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8081916:	b508      	push	{r3, lr}
      { delete this; }
 8081918:	b108      	cbz	r0, 808191e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 808191a:	f7ff fff6 	bl	808190a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 808191e:	bd08      	pop	{r3, pc}

08081920 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081920:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8081922:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081924:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8081926:	b113      	cbz	r3, 808192e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081928:	2203      	movs	r2, #3
 808192a:	4601      	mov	r1, r0
 808192c:	4798      	blx	r3
    }
 808192e:	4620      	mov	r0, r4
 8081930:	bd10      	pop	{r4, pc}

08081932 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8081932:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8081934:	68c4      	ldr	r4, [r0, #12]
 8081936:	b1d4      	cbz	r4, 808196e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8081938:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 808193a:	2b02      	cmp	r3, #2
 808193c:	d102      	bne.n	8081944 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808193e:	68e0      	ldr	r0, [r4, #12]
 8081940:	f7ff fe5e 	bl	8081600 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8081944:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8081946:	b12d      	cbz	r5, 8081954 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081948:	4628      	mov	r0, r5
 808194a:	f7ff ffe9 	bl	8081920 <_ZNSt14_Function_baseD1Ev>
 808194e:	4628      	mov	r0, r5
 8081950:	f7fe fba5 	bl	808009e <_ZdlPv>
 8081954:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8081956:	b12d      	cbz	r5, 8081964 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 8081958:	4628      	mov	r0, r5
 808195a:	f7ff ffe1 	bl	8081920 <_ZNSt14_Function_baseD1Ev>
 808195e:	4628      	mov	r0, r5
 8081960:	f7fe fb9d 	bl	808009e <_ZdlPv>
 8081964:	4620      	mov	r0, r4
 8081966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808196a:	f7fe bb98 	b.w	808009e <_ZdlPv>
 808196e:	bd38      	pop	{r3, r4, r5, pc}

08081970 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8081970:	b510      	push	{r4, lr}
 8081972:	b088      	sub	sp, #32
 8081974:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8081976:	4668      	mov	r0, sp
 8081978:	f000 fca4 	bl	80822c4 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 808197c:	4669      	mov	r1, sp
 808197e:	a804      	add	r0, sp, #16
 8081980:	f000 fcc2 	bl	8082308 <_ZN6StringC1ERKS_>
 8081984:	a804      	add	r0, sp, #16
 8081986:	47a0      	blx	r4
 8081988:	4604      	mov	r4, r0
 808198a:	a804      	add	r0, sp, #16
 808198c:	f000 fc53 	bl	8082236 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8081990:	4668      	mov	r0, sp
 8081992:	f000 fc50 	bl	8082236 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8081996:	4620      	mov	r0, r4
 8081998:	b008      	add	sp, #32
 808199a:	bd10      	pop	{r4, pc}

0808199c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 808199c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808199e:	4607      	mov	r7, r0
 80819a0:	460e      	mov	r6, r1
 80819a2:	4615      	mov	r5, r2
 80819a4:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80819a6:	2410      	movs	r4, #16
 80819a8:	4622      	mov	r2, r4
 80819aa:	2100      	movs	r1, #0
 80819ac:	4668      	mov	r0, sp
 80819ae:	f001 ffd2 	bl	8083956 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80819b2:	2200      	movs	r2, #0
 80819b4:	4669      	mov	r1, sp
 80819b6:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80819b8:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80819bc:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80819be:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80819c0:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80819c2:	f7ff fd6d 	bl	80814a0 <spark_function>
}
 80819c6:	b005      	add	sp, #20
 80819c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080819ca <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80819ca:	b513      	push	{r0, r1, r4, lr}
 80819cc:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80819ce:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80819d2:	2300      	movs	r3, #0
 80819d4:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80819d6:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80819d8:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80819da:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80819dc:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80819de:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80819e0:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80819e2:	f7fe fd69 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80819e6:	4620      	mov	r0, r4
 80819e8:	b002      	add	sp, #8
 80819ea:	bd10      	pop	{r4, pc}

080819ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80819ec:	680b      	ldr	r3, [r1, #0]
 80819ee:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80819f0:	b113      	cbz	r3, 80819f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80819f2:	685a      	ldr	r2, [r3, #4]
 80819f4:	3201      	adds	r2, #1
 80819f6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80819f8:	4770      	bx	lr

080819fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80819fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80819fc:	460c      	mov	r4, r1
 80819fe:	4606      	mov	r6, r0
 8081a00:	460f      	mov	r7, r1
 8081a02:	f854 3b04 	ldr.w	r3, [r4], #4
 8081a06:	ad02      	add	r5, sp, #8
 8081a08:	f845 3d08 	str.w	r3, [r5, #-8]!
 8081a0c:	4621      	mov	r1, r4
 8081a0e:	a801      	add	r0, sp, #4
 8081a10:	f7ff ffec 	bl	80819ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8081a14:	4629      	mov	r1, r5
 8081a16:	4630      	mov	r0, r6
 8081a18:	f7ff ffd7 	bl	80819ca <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081a1c:	a801      	add	r0, sp, #4
 8081a1e:	f7fe fd4b 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081a22:	4620      	mov	r0, r4
 8081a24:	f7fe fd48 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8081a28:	4638      	mov	r0, r7
 8081a2a:	f7fe fb38 	bl	808009e <_ZdlPv>
        return p;
    }
 8081a2e:	4630      	mov	r0, r6
 8081a30:	b003      	add	sp, #12
 8081a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081a34 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8081a34:	b513      	push	{r0, r1, r4, lr}
 8081a36:	460b      	mov	r3, r1
 8081a38:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081a3a:	c803      	ldmia	r0, {r0, r1}
 8081a3c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8081a40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8081a44:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081a48:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8081a4c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8081a50:	b002      	add	sp, #8
 8081a52:	bd10      	pop	{r4, pc}

08081a54 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081a54:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8081a56:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081a58:	b90a      	cbnz	r2, 8081a5e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8081a5a:	f001 f82e 	bl	8082aba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081a5e:	68c3      	ldr	r3, [r0, #12]
    }
 8081a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081a64:	4718      	bx	r3

08081a66 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081a66:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081a68:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081a6a:	f100 0110 	add.w	r1, r0, #16
 8081a6e:	f7ff fff1 	bl	8081a54 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8081a72:	bd08      	pop	{r3, pc}

08081a74 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081a74:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8081a76:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081a78:	b90a      	cbnz	r2, 8081a7e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8081a7a:	f001 f81e 	bl	8082aba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081a7e:	68c3      	ldr	r3, [r0, #12]
    }
 8081a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081a84:	4718      	bx	r3

08081a86 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081a86:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081a88:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081a8a:	f100 0110 	add.w	r1, r0, #16
 8081a8e:	f7ff fff1 	bl	8081a74 <_ZNKSt8functionIFvRKbEEclES1_>
 8081a92:	bd08      	pop	{r3, pc}

08081a94 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081a94:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081a96:	2300      	movs	r3, #0
 8081a98:	6083      	str	r3, [r0, #8]
 8081a9a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081a9c:	4604      	mov	r4, r0
 8081a9e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8081aa0:	b12b      	cbz	r3, 8081aae <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081aa2:	2202      	movs	r2, #2
 8081aa4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081aa6:	68eb      	ldr	r3, [r5, #12]
 8081aa8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081aaa:	68ab      	ldr	r3, [r5, #8]
 8081aac:	60a3      	str	r3, [r4, #8]
	}
    }
 8081aae:	4620      	mov	r0, r4
 8081ab0:	bd38      	pop	{r3, r4, r5, pc}
	...

08081ab4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8081ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 8081ab8:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8081abc:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8081abe:	f04f 0002 	mov.w	r0, #2
 8081ac2:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081ac4:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8081ac8:	808b      	strh	r3, [r1, #4]
 8081aca:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081acc:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8081ace:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 8081ad2:	600b      	str	r3, [r1, #0]
 8081ad4:	e8d4 1f4f 	ldrexb	r1, [r4]
 8081ad8:	4299      	cmp	r1, r3
 8081ada:	d103      	bne.n	8081ae4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 8081adc:	e8c4 0f45 	strexb	r5, r0, [r4]
 8081ae0:	2d00      	cmp	r5, #0
 8081ae2:	d1f7      	bne.n	8081ad4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8081ae4:	d002      	beq.n	8081aec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 8081ae6:	f88d 1000 	strb.w	r1, [sp]
 8081aea:	e06b      	b.n	8081bc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8081aec:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081af0:	bf1c      	itt	ne
 8081af2:	60e7      	strne	r7, [r4, #12]
 8081af4:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8081af6:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 8081afa:	bf18      	it	ne
 8081afc:	461f      	movne	r7, r3
 8081afe:	2301      	movs	r3, #1
 8081b00:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8081b02:	f3bf 8f5f 	dmb	sy
 8081b06:	f104 0308 	add.w	r3, r4, #8
 8081b0a:	2000      	movs	r0, #0
 8081b0c:	e853 6f00 	ldrex	r6, [r3]
 8081b10:	e843 0200 	strex	r2, r0, [r3]
 8081b14:	2a00      	cmp	r2, #0
 8081b16:	d1f9      	bne.n	8081b0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 8081b18:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081b1c:	2e00      	cmp	r6, #0
 8081b1e:	d051      	beq.n	8081bc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081b20:	f7ff fc8a 	bl	8081438 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8081b24:	b120      	cbz	r0, 8081b30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8081b26:	4629      	mov	r1, r5
 8081b28:	4630      	mov	r0, r6
 8081b2a:	f7ff ff93 	bl	8081a54 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8081b2e:	e043      	b.n	8081bb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081b30:	4631      	mov	r1, r6
 8081b32:	4668      	mov	r0, sp
 8081b34:	f7ff ffae 	bl	8081a94 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081b38:	68e0      	ldr	r0, [r4, #12]
 8081b3a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081b3e:	b108      	cbz	r0, 8081b44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 8081b40:	f001 ff86 	bl	8083a50 <strdup>
 8081b44:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081b46:	2010      	movs	r0, #16
 8081b48:	f8ad 5014 	strh.w	r5, [sp, #20]
 8081b4c:	f7fe faa5 	bl	808009a <_Znwj>
 8081b50:	4605      	mov	r5, r0
 8081b52:	b330      	cbz	r0, 8081ba2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081b54:	f04f 0800 	mov.w	r8, #0
 8081b58:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081b5c:	2018      	movs	r0, #24
 8081b5e:	f7fe fa9c 	bl	808009a <_Znwj>
 8081b62:	4604      	mov	r4, r0
 8081b64:	b1c0      	cbz	r0, 8081b98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081b66:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081b6a:	4601      	mov	r1, r0
 8081b6c:	4668      	mov	r0, sp
 8081b6e:	f7ff ff61 	bl	8081a34 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081b72:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8081b74:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081b76:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081b78:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8081b7a:	9202      	str	r2, [sp, #8]
 8081b7c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8081b7e:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081b80:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8081b84:	9203      	str	r2, [sp, #12]
 8081b86:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 8081b88:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8081b8c:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081b90:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8081b92:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081b96:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081b98:	4b0d      	ldr	r3, [pc, #52]	; (8081bd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081b9a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081b9c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081b9e:	4b0d      	ldr	r3, [pc, #52]	; (8081bd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 8081ba0:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081ba2:	9804      	ldr	r0, [sp, #16]
 8081ba4:	f7ff fd2c 	bl	8081600 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081ba8:	4668      	mov	r0, sp
 8081baa:	f7ff feb9 	bl	8081920 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081bae:	2200      	movs	r2, #0
 8081bb0:	4629      	mov	r1, r5
 8081bb2:	4809      	ldr	r0, [pc, #36]	; (8081bd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 8081bb4:	f7ff fc48 	bl	8081448 <application_thread_invoke>
 8081bb8:	4630      	mov	r0, r6
 8081bba:	f7ff feb1 	bl	8081920 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8081bbe:	4630      	mov	r0, r6
 8081bc0:	f7fe fa6d 	bl	808009e <_ZdlPv>
 8081bc4:	4638      	mov	r0, r7
 8081bc6:	f7ff fd1b 	bl	8081600 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 8081bca:	b006      	add	sp, #24
 8081bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081bd0:	08081a67 	.word	0x08081a67
 8081bd4:	08081cc5 	.word	0x08081cc5
 8081bd8:	08081677 	.word	0x08081677

08081bdc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081be0:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081be2:	ad07      	add	r5, sp, #28
 8081be4:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081be8:	4606      	mov	r6, r0
 8081bea:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8081bec:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081bee:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081bf0:	460f      	mov	r7, r1
 8081bf2:	4690      	mov	r8, r2
 8081bf4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081bf8:	f8c5 b004 	str.w	fp, [r5, #4]
 8081bfc:	f8c5 b008 	str.w	fp, [r5, #8]
 8081c00:	9307      	str	r3, [sp, #28]
 8081c02:	f7fe fa4a 	bl	808009a <_Znwj>
 8081c06:	4604      	mov	r4, r0
 8081c08:	b138      	cbz	r0, 8081c1a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8081c0a:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081c0e:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8081c12:	f8c0 b004 	str.w	fp, [r0, #4]
 8081c16:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081c1a:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081c1c:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8081c1e:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081c20:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081c22:	f7fe fa3a 	bl	808009a <_Znwj>
 8081c26:	b128      	cbz	r0, 8081c34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8081c28:	2301      	movs	r3, #1
 8081c2a:	6043      	str	r3, [r0, #4]
 8081c2c:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8081c2e:	4b23      	ldr	r3, [pc, #140]	; (8081cbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 8081c30:	60c4      	str	r4, [r0, #12]
 8081c32:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8081c34:	4b22      	ldr	r3, [pc, #136]	; (8081cc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081c36:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8081c38:	2008      	movs	r0, #8
 8081c3a:	9308      	str	r3, [sp, #32]
 8081c3c:	f7fe fa2d 	bl	808009a <_Znwj>
 8081c40:	4604      	mov	r4, r0
 8081c42:	b128      	cbz	r0, 8081c50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081c44:	9b03      	ldr	r3, [sp, #12]
 8081c46:	a904      	add	r1, sp, #16
 8081c48:	f840 3b04 	str.w	r3, [r0], #4
 8081c4c:	f7ff fece 	bl	80819ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081c50:	9500      	str	r5, [sp, #0]
 8081c52:	fa5f f38a 	uxtb.w	r3, sl
 8081c56:	464a      	mov	r2, r9
 8081c58:	4641      	mov	r1, r8
 8081c5a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8081c5c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081c5e:	f7ff fc4f 	bl	8081500 <spark_send_event>
 8081c62:	b9b8      	cbnz	r0, 8081c94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8081c64:	9b03      	ldr	r3, [sp, #12]
 8081c66:	785b      	ldrb	r3, [r3, #1]
 8081c68:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8081c6c:	b993      	cbnz	r3, 8081c94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8081c6e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8081c72:	a905      	add	r1, sp, #20
 8081c74:	a803      	add	r0, sp, #12
 8081c76:	9205      	str	r2, [sp, #20]
 8081c78:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081c7c:	f7ff ff1a 	bl	8081ab4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081c80:	9805      	ldr	r0, [sp, #20]
 8081c82:	f7ff fcbd 	bl	8081600 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8081c86:	a805      	add	r0, sp, #20
 8081c88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8081c8a:	f7ff feb6 	bl	80819fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081c8e:	a806      	add	r0, sp, #24
 8081c90:	f7fe fc12 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081c94:	9b03      	ldr	r3, [sp, #12]
 8081c96:	a904      	add	r1, sp, #16
 8081c98:	a806      	add	r0, sp, #24
 8081c9a:	9305      	str	r3, [sp, #20]
 8081c9c:	f7ff fea6 	bl	80819ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8081ca0:	a905      	add	r1, sp, #20
 8081ca2:	4630      	mov	r0, r6
 8081ca4:	f7ff fe91 	bl	80819ca <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081ca8:	a806      	add	r0, sp, #24
 8081caa:	f7fe fc05 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081cae:	a804      	add	r0, sp, #16
 8081cb0:	f7fe fc02 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8081cb4:	4630      	mov	r0, r6
 8081cb6:	b00b      	add	sp, #44	; 0x2c
 8081cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081cbc:	0808482c 	.word	0x0808482c
 8081cc0:	08081e2d 	.word	0x08081e2d

08081cc4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081cc4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081cc8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081cca:	d006      	beq.n	8081cda <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8081ccc:	2a03      	cmp	r2, #3
 8081cce:	d017      	beq.n	8081d00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8081cd0:	2a01      	cmp	r2, #1
 8081cd2:	d120      	bne.n	8081d16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081cd4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8081cd6:	6003      	str	r3, [r0, #0]
	      break;
 8081cd8:	e01d      	b.n	8081d16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081cda:	2018      	movs	r0, #24
 8081cdc:	680e      	ldr	r6, [r1, #0]
 8081cde:	f7fe f9dc 	bl	808009a <_Znwj>
 8081ce2:	4605      	mov	r5, r0
 8081ce4:	b150      	cbz	r0, 8081cfc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8081ce6:	4631      	mov	r1, r6
 8081ce8:	f7ff fed4 	bl	8081a94 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081cec:	6930      	ldr	r0, [r6, #16]
 8081cee:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081cf2:	b108      	cbz	r0, 8081cf8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8081cf4:	f001 feac 	bl	8083a50 <strdup>
 8081cf8:	6128      	str	r0, [r5, #16]
 8081cfa:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081cfc:	6025      	str	r5, [r4, #0]
 8081cfe:	e00a      	b.n	8081d16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081d00:	6804      	ldr	r4, [r0, #0]
 8081d02:	b144      	cbz	r4, 8081d16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081d04:	6920      	ldr	r0, [r4, #16]
 8081d06:	f7ff fc7b 	bl	8081600 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081d0a:	4620      	mov	r0, r4
 8081d0c:	f7ff fe08 	bl	8081920 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081d10:	4620      	mov	r0, r4
 8081d12:	f7fe f9c4 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8081d16:	2000      	movs	r0, #0
 8081d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081d1a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081d1a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081d1c:	2300      	movs	r3, #0
 8081d1e:	6083      	str	r3, [r0, #8]
 8081d20:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081d22:	4604      	mov	r4, r0
 8081d24:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8081d26:	b12b      	cbz	r3, 8081d34 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081d28:	2202      	movs	r2, #2
 8081d2a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081d2c:	68eb      	ldr	r3, [r5, #12]
 8081d2e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081d30:	68ab      	ldr	r3, [r5, #8]
 8081d32:	60a3      	str	r3, [r4, #8]
	}
    }
 8081d34:	4620      	mov	r0, r4
 8081d36:	bd38      	pop	{r3, r4, r5, pc}

08081d38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081d38:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081d3a:	b570      	push	{r4, r5, r6, lr}
 8081d3c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081d3e:	d006      	beq.n	8081d4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8081d40:	2a03      	cmp	r2, #3
 8081d42:	d011      	beq.n	8081d68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8081d44:	2a01      	cmp	r2, #1
 8081d46:	d117      	bne.n	8081d78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081d48:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8081d4a:	6003      	str	r3, [r0, #0]
	      break;
 8081d4c:	e014      	b.n	8081d78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081d4e:	2014      	movs	r0, #20
 8081d50:	680e      	ldr	r6, [r1, #0]
 8081d52:	f7fe f9a2 	bl	808009a <_Znwj>
 8081d56:	4605      	mov	r5, r0
 8081d58:	b120      	cbz	r0, 8081d64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8081d5a:	4631      	mov	r1, r6
 8081d5c:	f7ff ffdd 	bl	8081d1a <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8081d60:	7c33      	ldrb	r3, [r6, #16]
 8081d62:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081d64:	6025      	str	r5, [r4, #0]
 8081d66:	e007      	b.n	8081d78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081d68:	6804      	ldr	r4, [r0, #0]
 8081d6a:	b12c      	cbz	r4, 8081d78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081d6c:	4620      	mov	r0, r4
 8081d6e:	f7ff fdd7 	bl	8081920 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081d72:	4620      	mov	r0, r4
 8081d74:	f7fe f993 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8081d78:	2000      	movs	r0, #0
 8081d7a:	bd70      	pop	{r4, r5, r6, pc}

08081d7c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8081d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081d7e:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8081d80:	f3bf 8f5f 	dmb	sy
 8081d84:	b087      	sub	sp, #28
 8081d86:	2300      	movs	r3, #0
 8081d88:	e850 6f00 	ldrex	r6, [r0]
 8081d8c:	e840 3200 	strex	r2, r3, [r0]
 8081d90:	2a00      	cmp	r2, #0
 8081d92:	d1f9      	bne.n	8081d88 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8081d94:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081d98:	2e00      	cmp	r6, #0
 8081d9a:	d03e      	beq.n	8081e1a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081d9c:	4618      	mov	r0, r3
 8081d9e:	f7ff fb4b 	bl	8081438 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8081da2:	4607      	mov	r7, r0
 8081da4:	b120      	cbz	r0, 8081db0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8081da6:	4621      	mov	r1, r4
 8081da8:	4630      	mov	r0, r6
 8081daa:	f7ff fe63 	bl	8081a74 <_ZNKSt8functionIFvRKbEEclES1_>
 8081dae:	e02e      	b.n	8081e0e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081db0:	4631      	mov	r1, r6
 8081db2:	a801      	add	r0, sp, #4
 8081db4:	f7ff ffb1 	bl	8081d1a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081db8:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081dba:	2010      	movs	r0, #16
 8081dbc:	f88d 3014 	strb.w	r3, [sp, #20]
 8081dc0:	f7fe f96b 	bl	808009a <_Znwj>
 8081dc4:	4605      	mov	r5, r0
 8081dc6:	b1d0      	cbz	r0, 8081dfe <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081dc8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081dca:	2014      	movs	r0, #20
 8081dcc:	f7fe f965 	bl	808009a <_Znwj>
 8081dd0:	4604      	mov	r4, r0
 8081dd2:	b178      	cbz	r0, 8081df4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081dd4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081dd6:	4601      	mov	r1, r0
 8081dd8:	a801      	add	r0, sp, #4
 8081dda:	f7ff fe2b 	bl	8081a34 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081dde:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8081de0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081de2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081de4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8081de6:	9203      	str	r2, [sp, #12]
 8081de8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8081dea:	60e3      	str	r3, [r4, #12]
 8081dec:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081df0:	9204      	str	r2, [sp, #16]
 8081df2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081df4:	4b0a      	ldr	r3, [pc, #40]	; (8081e20 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081df6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081df8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081dfa:	4b0a      	ldr	r3, [pc, #40]	; (8081e24 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8081dfc:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081dfe:	a801      	add	r0, sp, #4
 8081e00:	f7ff fd8e 	bl	8081920 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081e04:	2200      	movs	r2, #0
 8081e06:	4629      	mov	r1, r5
 8081e08:	4807      	ldr	r0, [pc, #28]	; (8081e28 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8081e0a:	f7ff fb1d 	bl	8081448 <application_thread_invoke>
 8081e0e:	4630      	mov	r0, r6
 8081e10:	f7ff fd86 	bl	8081920 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8081e14:	4630      	mov	r0, r6
 8081e16:	f7fe f942 	bl	808009e <_ZdlPv>
        }
    }
 8081e1a:	b007      	add	sp, #28
 8081e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081e1e:	bf00      	nop
 8081e20:	08081a87 	.word	0x08081a87
 8081e24:	08081d39 	.word	0x08081d39
 8081e28:	08081677 	.word	0x08081677

08081e2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8081e2c:	b530      	push	{r4, r5, lr}
 8081e2e:	4604      	mov	r4, r0
 8081e30:	b085      	sub	sp, #20
 8081e32:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8081e34:	4668      	mov	r0, sp
 8081e36:	4611      	mov	r1, r2
 8081e38:	f7ff fddf 	bl	80819fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8081e3c:	b17c      	cbz	r4, 8081e5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8081e3e:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081e40:	4628      	mov	r0, r5
 8081e42:	b10d      	cbz	r5, 8081e48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8081e44:	f001 fe04 	bl	8083a50 <strdup>
 8081e48:	9002      	str	r0, [sp, #8]
 8081e4a:	a902      	add	r1, sp, #8
 8081e4c:	4668      	mov	r0, sp
 8081e4e:	f8ad 400c 	strh.w	r4, [sp, #12]
 8081e52:	f7ff fe2f 	bl	8081ab4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081e56:	9802      	ldr	r0, [sp, #8]
 8081e58:	f7ff fbd2 	bl	8081600 <free>
 8081e5c:	e01d      	b.n	8081e9a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8081e5e:	f04f 0201 	mov.w	r2, #1
 8081e62:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8081e64:	f88d 4008 	strb.w	r4, [sp, #8]
 8081e68:	e8d0 3f4f 	ldrexb	r3, [r0]
 8081e6c:	42a3      	cmp	r3, r4
 8081e6e:	d103      	bne.n	8081e78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8081e70:	e8c0 2f41 	strexb	r1, r2, [r0]
 8081e74:	2900      	cmp	r1, #0
 8081e76:	d1f7      	bne.n	8081e68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8081e78:	d002      	beq.n	8081e80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8081e7a:	f88d 3008 	strb.w	r3, [sp, #8]
 8081e7e:	e00c      	b.n	8081e9a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8081e80:	f110 010c 	adds.w	r1, r0, #12
 8081e84:	f04f 0301 	mov.w	r3, #1
 8081e88:	bf18      	it	ne
 8081e8a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8081e8c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8081e90:	3004      	adds	r0, #4
 8081e92:	f800 3c03 	strb.w	r3, [r0, #-3]
 8081e96:	f7ff ff71 	bl	8081d7c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8081e9a:	a801      	add	r0, sp, #4
 8081e9c:	f7fe fb0c 	bl	80804b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8081ea0:	b005      	add	sp, #20
 8081ea2:	bd30      	pop	{r4, r5, pc}

08081ea4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8081ea4:	4770      	bx	lr

08081ea6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8081ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081ea8:	4606      	mov	r6, r0
 8081eaa:	4615      	mov	r5, r2
 8081eac:	460c      	mov	r4, r1
 8081eae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8081eb0:	42bc      	cmp	r4, r7
 8081eb2:	d006      	beq.n	8081ec2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8081eb4:	6833      	ldr	r3, [r6, #0]
 8081eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8081eba:	689b      	ldr	r3, [r3, #8]
 8081ebc:	4630      	mov	r0, r6
 8081ebe:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8081ec0:	e7f6      	b.n	8081eb0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8081ec2:	4628      	mov	r0, r5
 8081ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081ec6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8081ec6:	2200      	movs	r2, #0
 8081ec8:	7c00      	ldrb	r0, [r0, #16]
 8081eca:	f7ff b9d5 	b.w	8081278 <HAL_I2C_Write_Data>

08081ece <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8081ece:	2100      	movs	r1, #0
 8081ed0:	7c00      	ldrb	r0, [r0, #16]
 8081ed2:	f7ff b9d9 	b.w	8081288 <HAL_I2C_Available_Data>

08081ed6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8081ed6:	2100      	movs	r1, #0
 8081ed8:	7c00      	ldrb	r0, [r0, #16]
 8081eda:	f7ff b9dd 	b.w	8081298 <HAL_I2C_Read_Data>

08081ede <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8081ede:	2100      	movs	r1, #0
 8081ee0:	7c00      	ldrb	r0, [r0, #16]
 8081ee2:	f7ff b9e1 	b.w	80812a8 <HAL_I2C_Peek_Data>

08081ee6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8081ee6:	2100      	movs	r1, #0
 8081ee8:	7c00      	ldrb	r0, [r0, #16]
 8081eea:	f7ff b9e5 	b.w	80812b8 <HAL_I2C_Flush_Data>

08081eee <_ZN7TwoWireD0Ev>:
 8081eee:	b510      	push	{r4, lr}
 8081ef0:	4604      	mov	r4, r0
 8081ef2:	f7fe f8d4 	bl	808009e <_ZdlPv>
 8081ef6:	4620      	mov	r0, r4
 8081ef8:	bd10      	pop	{r4, pc}
	...

08081efc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8081efc:	b510      	push	{r4, lr}
 8081efe:	4604      	mov	r4, r0
 8081f00:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8081f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081f06:	60a3      	str	r3, [r4, #8]
 8081f08:	4b04      	ldr	r3, [pc, #16]	; (8081f1c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8081f0a:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8081f0c:	7420      	strb	r0, [r4, #16]
 8081f0e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8081f10:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 8081f12:	f7ff f9e1 	bl	80812d8 <HAL_I2C_Init>

}
 8081f16:	4620      	mov	r0, r4
 8081f18:	bd10      	pop	{r4, pc}
 8081f1a:	bf00      	nop
 8081f1c:	08084848 	.word	0x08084848

08081f20 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8081f20:	2100      	movs	r1, #0
 8081f22:	7c00      	ldrb	r0, [r0, #16]
 8081f24:	f7ff b9d0 	b.w	80812c8 <HAL_I2C_Is_Enabled>

08081f28 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8081f28:	4770      	bx	lr

08081f2a <_ZN9IPAddressD0Ev>:
 8081f2a:	b510      	push	{r4, lr}
 8081f2c:	4604      	mov	r4, r0
 8081f2e:	f7fe f8b6 	bl	808009e <_ZdlPv>
 8081f32:	4620      	mov	r0, r4
 8081f34:	bd10      	pop	{r4, pc}

08081f36 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8081f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081f38:	460f      	mov	r7, r1
 8081f3a:	f100 0608 	add.w	r6, r0, #8
 8081f3e:	1d05      	adds	r5, r0, #4
 8081f40:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8081f42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8081f46:	220a      	movs	r2, #10
 8081f48:	4638      	mov	r0, r7
 8081f4a:	f000 f910 	bl	808216e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8081f4e:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8081f50:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8081f52:	d007      	beq.n	8081f64 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8081f54:	2c00      	cmp	r4, #0
 8081f56:	d0f4      	beq.n	8081f42 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8081f58:	212e      	movs	r1, #46	; 0x2e
 8081f5a:	4638      	mov	r0, r7
 8081f5c:	f000 f8c4 	bl	80820e8 <_ZN5Print5printEc>
 8081f60:	4404      	add	r4, r0
 8081f62:	e7ee      	b.n	8081f42 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8081f64:	4620      	mov	r0, r4
 8081f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081f68 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8081f68:	4a02      	ldr	r2, [pc, #8]	; (8081f74 <_ZN9IPAddressC1Ev+0xc>)
 8081f6a:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8081f6c:	2200      	movs	r2, #0
 8081f6e:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8081f70:	4770      	bx	lr
 8081f72:	bf00      	nop
 8081f74:	08084870 	.word	0x08084870

08081f78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8081f78:	4a02      	ldr	r2, [pc, #8]	; (8081f84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8081f7a:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8081f7c:	680a      	ldr	r2, [r1, #0]
 8081f7e:	6042      	str	r2, [r0, #4]
}
 8081f80:	4770      	bx	lr
 8081f82:	bf00      	nop
 8081f84:	08084870 	.word	0x08084870

08081f88 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8081f88:	4a01      	ldr	r2, [pc, #4]	; (8081f90 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8081f8a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8081f8c:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8081f8e:	4770      	bx	lr
 8081f90:	08084870 	.word	0x08084870

08081f94 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8081f94:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8081f96:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8081f9a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8081f9e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8081fa2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8081fa6:	6041      	str	r1, [r0, #4]
 8081fa8:	bd10      	pop	{r4, pc}
	...

08081fac <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8081fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8081fae:	4d04      	ldr	r5, [pc, #16]	; (8081fc0 <_ZN9IPAddressC1Ehhhh+0x14>)
 8081fb0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8081fb2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8081fb6:	9500      	str	r5, [sp, #0]
 8081fb8:	f7ff ffec 	bl	8081f94 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8081fbc:	b003      	add	sp, #12
 8081fbe:	bd30      	pop	{r4, r5, pc}
 8081fc0:	08084870 	.word	0x08084870

08081fc4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8081fc4:	4a01      	ldr	r2, [pc, #4]	; (8081fcc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8081fc6:	4b02      	ldr	r3, [pc, #8]	; (8081fd0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8081fc8:	601a      	str	r2, [r3, #0]
 8081fca:	4770      	bx	lr
 8081fcc:	08084931 	.word	0x08084931
 8081fd0:	20000750 	.word	0x20000750

08081fd4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8081fd4:	2300      	movs	r3, #0
 8081fd6:	461a      	mov	r2, r3
 8081fd8:	6840      	ldr	r0, [r0, #4]
 8081fda:	f7ff bab9 	b.w	8081550 <network_connect>

08081fde <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8081fde:	2200      	movs	r2, #0
 8081fe0:	2102      	movs	r1, #2
 8081fe2:	6840      	ldr	r0, [r0, #4]
 8081fe4:	f7ff bac4 	b.w	8081570 <network_disconnect>

08081fe8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8081fe8:	2200      	movs	r2, #0
 8081fea:	4611      	mov	r1, r2
 8081fec:	6840      	ldr	r0, [r0, #4]
 8081fee:	f7ff bab7 	b.w	8081560 <network_connecting>

08081ff2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8081ff2:	2200      	movs	r2, #0
 8081ff4:	4611      	mov	r1, r2
 8081ff6:	6840      	ldr	r0, [r0, #4]
 8081ff8:	f7ff bac2 	b.w	8081580 <network_ready>

08081ffc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8081ffc:	2300      	movs	r3, #0
 8081ffe:	461a      	mov	r2, r3
 8082000:	4619      	mov	r1, r3
 8082002:	6840      	ldr	r0, [r0, #4]
 8082004:	f7ff bac4 	b.w	8081590 <network_on>

08082008 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8082008:	2300      	movs	r3, #0
 808200a:	461a      	mov	r2, r3
 808200c:	4619      	mov	r1, r3
 808200e:	6840      	ldr	r0, [r0, #4]
 8082010:	f7ff bac6 	b.w	80815a0 <network_off>

08082014 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8082014:	2200      	movs	r2, #0
 8082016:	f081 0101 	eor.w	r1, r1, #1
 808201a:	6840      	ldr	r0, [r0, #4]
 808201c:	f7ff bac8 	b.w	80815b0 <network_listen>

08082020 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8082020:	2200      	movs	r2, #0
 8082022:	6840      	ldr	r0, [r0, #4]
 8082024:	f7ff bad4 	b.w	80815d0 <network_set_listen_timeout>

08082028 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8082028:	2200      	movs	r2, #0
 808202a:	4611      	mov	r1, r2
 808202c:	6840      	ldr	r0, [r0, #4]
 808202e:	f7ff bad7 	b.w	80815e0 <network_get_listen_timeout>

08082032 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8082032:	2200      	movs	r2, #0
 8082034:	4611      	mov	r1, r2
 8082036:	6840      	ldr	r0, [r0, #4]
 8082038:	f7ff bac2 	b.w	80815c0 <network_listening>

0808203c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808203c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808203e:	4617      	mov	r7, r2
 8082040:	b087      	sub	sp, #28
 8082042:	4605      	mov	r5, r0
    IPAddress addr;
 8082044:	a804      	add	r0, sp, #16
 8082046:	f7ff ff8f 	bl	8081f68 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808204a:	2600      	movs	r6, #0
 808204c:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808204e:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8082050:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082054:	f001 fd17 	bl	8083a86 <strlen>
 8082058:	4b0a      	ldr	r3, [pc, #40]	; (8082084 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 808205a:	9600      	str	r6, [sp, #0]
 808205c:	b281      	uxth	r1, r0
 808205e:	685b      	ldr	r3, [r3, #4]
 8082060:	4622      	mov	r2, r4
 8082062:	4638      	mov	r0, r7
 8082064:	f7ff f860 	bl	8081128 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082068:	b120      	cbz	r0, 8082074 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808206a:	4631      	mov	r1, r6
 808206c:	4628      	mov	r0, r5
 808206e:	f7ff ff8b 	bl	8081f88 <_ZN9IPAddressC1Em>
 8082072:	e003      	b.n	808207c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8082074:	4621      	mov	r1, r4
 8082076:	4628      	mov	r0, r5
 8082078:	f7ff ff7e 	bl	8081f78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808207c:	4628      	mov	r0, r5
 808207e:	b007      	add	sp, #28
 8082080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082082:	bf00      	nop
 8082084:	200006f4 	.word	0x200006f4

08082088 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8082088:	4b02      	ldr	r3, [pc, #8]	; (8082094 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808208a:	4a03      	ldr	r2, [pc, #12]	; (8082098 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 808208c:	601a      	str	r2, [r3, #0]
 808208e:	2200      	movs	r2, #0
 8082090:	605a      	str	r2, [r3, #4]
 8082092:	4770      	bx	lr
 8082094:	20000754 	.word	0x20000754
 8082098:	08084964 	.word	0x08084964

0808209c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808209e:	4606      	mov	r6, r0
 80820a0:	460d      	mov	r5, r1
 80820a2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80820a4:	2400      	movs	r4, #0
  while (size--) {
 80820a6:	42bd      	cmp	r5, r7
 80820a8:	d00c      	beq.n	80820c4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80820aa:	6833      	ldr	r3, [r6, #0]
 80820ac:	f815 1b01 	ldrb.w	r1, [r5], #1
 80820b0:	689b      	ldr	r3, [r3, #8]
 80820b2:	4630      	mov	r0, r6
 80820b4:	4798      	blx	r3
     if (chunk>=0)
 80820b6:	2800      	cmp	r0, #0
 80820b8:	db01      	blt.n	80820be <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80820ba:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80820bc:	e7f3      	b.n	80820a6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80820be:	2c00      	cmp	r4, #0
 80820c0:	bf08      	it	eq
 80820c2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80820c4:	4620      	mov	r0, r4
 80820c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080820c8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80820c8:	b570      	push	{r4, r5, r6, lr}
 80820ca:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80820cc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80820ce:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80820d0:	b149      	cbz	r1, 80820e6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80820d2:	f001 fcd8 	bl	8083a86 <strlen>
 80820d6:	682b      	ldr	r3, [r5, #0]
 80820d8:	4602      	mov	r2, r0
 80820da:	4621      	mov	r1, r4
 80820dc:	4628      	mov	r0, r5
    }
 80820de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80820e2:	68db      	ldr	r3, [r3, #12]
 80820e4:	4718      	bx	r3
    }
 80820e6:	bd70      	pop	{r4, r5, r6, pc}

080820e8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80820e8:	6803      	ldr	r3, [r0, #0]
 80820ea:	689b      	ldr	r3, [r3, #8]
 80820ec:	4718      	bx	r3

080820ee <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80820ee:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80820f0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80820f2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80820f4:	f7ff fff8 	bl	80820e8 <_ZN5Print5printEc>
  n += print('\n');
 80820f8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80820fa:	4604      	mov	r4, r0
  n += print('\n');
 80820fc:	4628      	mov	r0, r5
 80820fe:	f7ff fff3 	bl	80820e8 <_ZN5Print5printEc>
  return n;
}
 8082102:	4420      	add	r0, r4
 8082104:	bd38      	pop	{r3, r4, r5, pc}

08082106 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8082106:	b538      	push	{r3, r4, r5, lr}
 8082108:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808210a:	f7ff ffdd 	bl	80820c8 <_ZN5Print5writeEPKc>
 808210e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8082110:	4628      	mov	r0, r5
 8082112:	f7ff ffec 	bl	80820ee <_ZN5Print7printlnEv>
  return n;
}
 8082116:	4420      	add	r0, r4
 8082118:	bd38      	pop	{r3, r4, r5, pc}

0808211a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808211a:	2a01      	cmp	r2, #1
 808211c:	bf98      	it	ls
 808211e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8082120:	b530      	push	{r4, r5, lr}
 8082122:	460b      	mov	r3, r1
 8082124:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8082126:	2100      	movs	r1, #0
 8082128:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 808212c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8082130:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8082134:	fb05 3312 	mls	r3, r5, r2, r3
 8082138:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808213a:	2b09      	cmp	r3, #9
 808213c:	bf94      	ite	ls
 808213e:	3330      	addls	r3, #48	; 0x30
 8082140:	3337      	addhi	r3, #55	; 0x37
 8082142:	b2db      	uxtb	r3, r3
 8082144:	4621      	mov	r1, r4
 8082146:	f804 3901 	strb.w	r3, [r4], #-1
 808214a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 808214c:	2d00      	cmp	r5, #0
 808214e:	d1ef      	bne.n	8082130 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8082150:	f7ff ffba 	bl	80820c8 <_ZN5Print5writeEPKc>
}
 8082154:	b00b      	add	sp, #44	; 0x2c
 8082156:	bd30      	pop	{r4, r5, pc}

08082158 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8082158:	b410      	push	{r4}
  if (base == 0) return write(n);
 808215a:	b922      	cbnz	r2, 8082166 <_ZN5Print5printEmi+0xe>
 808215c:	6803      	ldr	r3, [r0, #0]
 808215e:	b2c9      	uxtb	r1, r1
 8082160:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8082162:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8082164:	4718      	bx	r3
  else return printNumber(n, base);
 8082166:	b2d2      	uxtb	r2, r2
}
 8082168:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808216a:	f7ff bfd6 	b.w	808211a <_ZN5Print11printNumberEmh>

0808216e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 808216e:	f7ff bff3 	b.w	8082158 <_ZN5Print5printEmi>

08082172 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8082172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082176:	4607      	mov	r7, r0
 8082178:	460e      	mov	r6, r1
  if (base == 0) {
 808217a:	4615      	mov	r5, r2
 808217c:	b92a      	cbnz	r2, 808218a <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 808217e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8082182:	6803      	ldr	r3, [r0, #0]
 8082184:	b2c9      	uxtb	r1, r1
 8082186:	689b      	ldr	r3, [r3, #8]
 8082188:	4718      	bx	r3
  } else if (base == 10) {
 808218a:	2a0a      	cmp	r2, #10
 808218c:	d102      	bne.n	8082194 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 808218e:	2900      	cmp	r1, #0
 8082190:	da01      	bge.n	8082196 <_ZN5Print5printEli+0x24>
 8082192:	e004      	b.n	808219e <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8082194:	b2d2      	uxtb	r2, r2
  }
}
 8082196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 808219a:	f7ff bfbe 	b.w	808211a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 808219e:	212d      	movs	r1, #45	; 0x2d
 80821a0:	f7ff ffa2 	bl	80820e8 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80821a4:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80821a6:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80821a8:	4271      	negs	r1, r6
 80821aa:	4638      	mov	r0, r7
 80821ac:	f7ff ffb5 	bl	808211a <_ZN5Print11printNumberEmh>
 80821b0:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80821b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080821b6 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80821b6:	f7ff bfdc 	b.w	8082172 <_ZN5Print5printEli>

080821ba <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
 80821ba:	b510      	push	{r4, lr}
  if (0 == max) {
 80821bc:	4604      	mov	r4, r0
 80821be:	b130      	cbz	r0, 80821ce <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
 80821c0:	f001 fbfa 	bl	80839b8 <rand>
 80821c4:	fb90 f3f4 	sdiv	r3, r0, r4
 80821c8:	fb03 0014 	mls	r0, r3, r4, r0
 80821cc:	bd10      	pop	{r4, pc}
}
 80821ce:	bd10      	pop	{r4, pc}

080821d0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80821d0:	b510      	push	{r4, lr}
 80821d2:	4604      	mov	r4, r0
 80821d4:	f7ff fba4 	bl	8081920 <_ZNSt14_Function_baseD1Ev>
 80821d8:	4620      	mov	r0, r4
 80821da:	bd10      	pop	{r4, pc}

080821dc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80821dc:	4803      	ldr	r0, [pc, #12]	; (80821ec <_GLOBAL__sub_I_RGB+0x10>)
 80821de:	2300      	movs	r3, #0
 80821e0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80821e2:	4a03      	ldr	r2, [pc, #12]	; (80821f0 <_GLOBAL__sub_I_RGB+0x14>)
 80821e4:	4903      	ldr	r1, [pc, #12]	; (80821f4 <_GLOBAL__sub_I_RGB+0x18>)
 80821e6:	f000 bc63 	b.w	8082ab0 <__aeabi_atexit>
 80821ea:	bf00      	nop
 80821ec:	2000075c 	.word	0x2000075c
 80821f0:	20000554 	.word	0x20000554
 80821f4:	080821d1 	.word	0x080821d1

080821f8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80821f8:	4770      	bx	lr

080821fa <_ZN8SPIClassD0Ev>:
 80821fa:	b510      	push	{r4, lr}
 80821fc:	4604      	mov	r4, r0
 80821fe:	f7fd ff4e 	bl	808009e <_ZdlPv>
 8082202:	4620      	mov	r0, r4
 8082204:	bd10      	pop	{r4, pc}
	...

08082208 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8082208:	b570      	push	{r4, r5, r6, lr}
 808220a:	4604      	mov	r4, r0
 808220c:	460e      	mov	r6, r1
 808220e:	4b07      	ldr	r3, [pc, #28]	; (808222c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8082210:	2500      	movs	r5, #0
 8082212:	6003      	str	r3, [r0, #0]
 8082214:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8082218:	f7fe ff9e 	bl	8081158 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 808221c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 808221e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8082220:	f7ff f862 	bl	80812e8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8082224:	60a5      	str	r5, [r4, #8]
}
 8082226:	4620      	mov	r0, r4
 8082228:	bd70      	pop	{r4, r5, r6, pc}
 808222a:	bf00      	nop
 808222c:	08084998 	.word	0x08084998

08082230 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8082230:	7900      	ldrb	r0, [r0, #4]
 8082232:	f7ff b861 	b.w	80812f8 <HAL_SPI_Is_Enabled>

08082236 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8082236:	b510      	push	{r4, lr}
 8082238:	4604      	mov	r4, r0
{
	free(buffer);
 808223a:	6800      	ldr	r0, [r0, #0]
 808223c:	f7ff f9e0 	bl	8081600 <free>
}
 8082240:	4620      	mov	r0, r4
 8082242:	bd10      	pop	{r4, pc}

08082244 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8082244:	b510      	push	{r4, lr}
 8082246:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8082248:	6800      	ldr	r0, [r0, #0]
 808224a:	b108      	cbz	r0, 8082250 <_ZN6String10invalidateEv+0xc>
 808224c:	f7ff f9d8 	bl	8081600 <free>
	buffer = NULL;
 8082250:	2300      	movs	r3, #0
 8082252:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8082254:	60a3      	str	r3, [r4, #8]
 8082256:	6063      	str	r3, [r4, #4]
 8082258:	bd10      	pop	{r4, pc}

0808225a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 808225a:	b538      	push	{r3, r4, r5, lr}
 808225c:	4604      	mov	r4, r0
 808225e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8082260:	6800      	ldr	r0, [r0, #0]
 8082262:	3101      	adds	r1, #1
 8082264:	f7ff f9d4 	bl	8081610 <realloc>
	if (newbuffer) {
 8082268:	b110      	cbz	r0, 8082270 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 808226a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 808226e:	2001      	movs	r0, #1
	}
	return 0;
}
 8082270:	bd38      	pop	{r3, r4, r5, pc}

08082272 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082272:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8082274:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082276:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8082278:	b113      	cbz	r3, 8082280 <_ZN6String7reserveEj+0xe>
 808227a:	6843      	ldr	r3, [r0, #4]
 808227c:	428b      	cmp	r3, r1
 808227e:	d207      	bcs.n	8082290 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8082280:	4620      	mov	r0, r4
 8082282:	f7ff ffea 	bl	808225a <_ZN6String12changeBufferEj>
 8082286:	b120      	cbz	r0, 8082292 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8082288:	68a3      	ldr	r3, [r4, #8]
 808228a:	b90b      	cbnz	r3, 8082290 <_ZN6String7reserveEj+0x1e>
 808228c:	6822      	ldr	r2, [r4, #0]
 808228e:	7013      	strb	r3, [r2, #0]
 8082290:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8082292:	bd10      	pop	{r4, pc}

08082294 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082294:	b570      	push	{r4, r5, r6, lr}
 8082296:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8082298:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808229a:	4604      	mov	r4, r0
 808229c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808229e:	f7ff ffe8 	bl	8082272 <_ZN6String7reserveEj>
 80822a2:	b918      	cbnz	r0, 80822ac <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80822a4:	4620      	mov	r0, r4
 80822a6:	f7ff ffcd 	bl	8082244 <_ZN6String10invalidateEv>
		return *this;
 80822aa:	e009      	b.n	80822c0 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80822ac:	462a      	mov	r2, r5
 80822ae:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80822b0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80822b2:	6820      	ldr	r0, [r4, #0]
 80822b4:	f001 fb44 	bl	8083940 <memcpy>
	buffer[len] = 0;
 80822b8:	6822      	ldr	r2, [r4, #0]
 80822ba:	68a3      	ldr	r3, [r4, #8]
 80822bc:	2100      	movs	r1, #0
 80822be:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80822c0:	4620      	mov	r0, r4
 80822c2:	bd70      	pop	{r4, r5, r6, pc}

080822c4 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80822c4:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80822c6:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80822c8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80822ca:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80822cc:	6043      	str	r3, [r0, #4]
	len = 0;
 80822ce:	6083      	str	r3, [r0, #8]
	flags = 0;
 80822d0:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80822d2:	460d      	mov	r5, r1
 80822d4:	b139      	cbz	r1, 80822e6 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80822d6:	4608      	mov	r0, r1
 80822d8:	f001 fbd5 	bl	8083a86 <strlen>
 80822dc:	4629      	mov	r1, r5
 80822de:	4602      	mov	r2, r0
 80822e0:	4620      	mov	r0, r4
 80822e2:	f7ff ffd7 	bl	8082294 <_ZN6String4copyEPKcj>
}
 80822e6:	4620      	mov	r0, r4
 80822e8:	bd38      	pop	{r3, r4, r5, pc}

080822ea <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80822ea:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80822ec:	b510      	push	{r4, lr}
 80822ee:	460b      	mov	r3, r1
 80822f0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80822f2:	d007      	beq.n	8082304 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80822f4:	6809      	ldr	r1, [r1, #0]
 80822f6:	b119      	cbz	r1, 8082300 <_ZN6StringaSERKS_+0x16>
 80822f8:	689a      	ldr	r2, [r3, #8]
 80822fa:	f7ff ffcb 	bl	8082294 <_ZN6String4copyEPKcj>
 80822fe:	e001      	b.n	8082304 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8082300:	f7ff ffa0 	bl	8082244 <_ZN6String10invalidateEv>

	return *this;
}
 8082304:	4620      	mov	r0, r4
 8082306:	bd10      	pop	{r4, pc}

08082308 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8082308:	b510      	push	{r4, lr}
 808230a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808230c:	2300      	movs	r3, #0
 808230e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8082310:	6043      	str	r3, [r0, #4]
	len = 0;
 8082312:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082314:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8082316:	f7ff ffe8 	bl	80822ea <_ZN6StringaSERKS_>
}
 808231a:	4620      	mov	r0, r4
 808231c:	bd10      	pop	{r4, pc}

0808231e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808231e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082320:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8082322:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082324:	b912      	cbnz	r2, 808232c <_ZNK6String6equalsEPKc+0xe>
 8082326:	b919      	cbnz	r1, 8082330 <_ZNK6String6equalsEPKc+0x12>
 8082328:	2001      	movs	r0, #1
 808232a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 808232c:	b911      	cbnz	r1, 8082334 <_ZNK6String6equalsEPKc+0x16>
 808232e:	6803      	ldr	r3, [r0, #0]
 8082330:	7818      	ldrb	r0, [r3, #0]
 8082332:	e002      	b.n	808233a <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8082334:	6800      	ldr	r0, [r0, #0]
 8082336:	f001 fb79 	bl	8083a2c <strcmp>
 808233a:	fab0 f080 	clz	r0, r0
 808233e:	0940      	lsrs	r0, r0, #5
}
 8082340:	bd08      	pop	{r3, pc}

08082342 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 8082342:	b570      	push	{r4, r5, r6, lr}
 8082344:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 8082346:	b19a      	cbz	r2, 8082370 <_ZNK6String8getBytesEPhjj+0x2e>
 8082348:	b191      	cbz	r1, 8082370 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 808234a:	6885      	ldr	r5, [r0, #8]
 808234c:	429d      	cmp	r5, r3
 808234e:	d802      	bhi.n	8082356 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8082350:	2300      	movs	r3, #0
 8082352:	700b      	strb	r3, [r1, #0]
		return;
 8082354:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 8082356:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 8082358:	1aed      	subs	r5, r5, r3
 808235a:	42ac      	cmp	r4, r5
 808235c:	bf28      	it	cs
 808235e:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 8082360:	6801      	ldr	r1, [r0, #0]
 8082362:	4622      	mov	r2, r4
 8082364:	4419      	add	r1, r3
 8082366:	4630      	mov	r0, r6
 8082368:	f001 fbaa 	bl	8083ac0 <strncpy>
	buf[n] = 0;
 808236c:	2300      	movs	r3, #0
 808236e:	5533      	strb	r3, [r6, r4]
 8082370:	bd70      	pop	{r4, r5, r6, pc}

08082372 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8082372:	4601      	mov	r1, r0
 8082374:	2200      	movs	r2, #0
 8082376:	208c      	movs	r0, #140	; 0x8c
 8082378:	f7fe befe 	b.w	8081178 <HAL_Core_System_Reset_Ex>

0808237c <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 808237c:	2000      	movs	r0, #0
 808237e:	f7ff bff8 	b.w	8082372 <_ZN11SystemClass5resetEm>
	...

08082384 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8082384:	b510      	push	{r4, lr}
 8082386:	4604      	mov	r4, r0
 8082388:	4608      	mov	r0, r1
 808238a:	4611      	mov	r1, r2
 808238c:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 808238e:	2300      	movs	r3, #0
 8082390:	f7ff f842 	bl	8081418 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
 8082394:	4b06      	ldr	r3, [pc, #24]	; (80823b0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
 8082396:	2200      	movs	r2, #0
 8082398:	701a      	strb	r2, [r3, #0]
 808239a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 808239e:	8058      	strh	r0, [r3, #2]
 80823a0:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 80823a2:	681a      	ldr	r2, [r3, #0]
 80823a4:	889b      	ldrh	r3, [r3, #4]
 80823a6:	6022      	str	r2, [r4, #0]
 80823a8:	80a3      	strh	r3, [r4, #4]
}
 80823aa:	4620      	mov	r0, r4
 80823ac:	bd10      	pop	{r4, pc}
 80823ae:	bf00      	nop
 80823b0:	2000076c 	.word	0x2000076c

080823b4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80823b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80823b8:	4b03      	ldr	r3, [pc, #12]	; (80823c8 <_GLOBAL__sub_I_System+0x14>)
 80823ba:	2000      	movs	r0, #0
 80823bc:	7018      	strb	r0, [r3, #0]
 80823be:	8058      	strh	r0, [r3, #2]
 80823c0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80823c2:	f7ff b819 	b.w	80813f8 <set_system_mode>
 80823c6:	bf00      	nop
 80823c8:	2000076c 	.word	0x2000076c

080823cc <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80823cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80823ce:	4b14      	ldr	r3, [pc, #80]	; (8082420 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80823d0:	4f14      	ldr	r7, [pc, #80]	; (8082424 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80823d2:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80823d4:	4b14      	ldr	r3, [pc, #80]	; (8082428 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80823d6:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80823d8:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80823da:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80823dc:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80823de:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80823e0:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80823e2:	d01b      	beq.n	808241c <_ZL22Refresh_UnixTime_Cachel+0x50>
 80823e4:	a80a      	add	r0, sp, #40	; 0x28
 80823e6:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80823ea:	f001 f9b1 	bl	8083750 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80823ee:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80823f0:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80823f2:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80823f4:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80823f8:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80823fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80823fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80823fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8082402:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082406:	4c09      	ldr	r4, [pc, #36]	; (808242c <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8082408:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808240c:	ad01      	add	r5, sp, #4
 808240e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082410:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8082416:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082418:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 808241c:	b00b      	add	sp, #44	; 0x2c
 808241e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082420:	200007a4 	.word	0x200007a4
 8082424:	200007a0 	.word	0x200007a0
 8082428:	2000079c 	.word	0x2000079c
 808242c:	20000774 	.word	0x20000774

08082430 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 8082430:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8082432:	2000      	movs	r0, #0
 8082434:	f7ff f87c 	bl	8081530 <spark_sync_time_pending>
 8082438:	b128      	cbz	r0, 8082446 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808243a:	f7ff f851 	bl	80814e0 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 808243e:	f080 0001 	eor.w	r0, r0, #1
 8082442:	b2c0      	uxtb	r0, r0
 8082444:	bd08      	pop	{r3, pc}
 8082446:	2001      	movs	r0, #1
    }
 8082448:	bd08      	pop	{r3, pc}
	...

0808244c <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 808244c:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808244e:	4909      	ldr	r1, [pc, #36]	; (8082474 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8082450:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8082452:	f001 f8e1 	bl	8083618 <__aeabi_fcmplt>
 8082456:	b960      	cbnz	r0, 8082472 <_ZN9TimeClass4zoneEf+0x26>
 8082458:	4907      	ldr	r1, [pc, #28]	; (8082478 <_ZN9TimeClass4zoneEf+0x2c>)
 808245a:	4620      	mov	r0, r4
 808245c:	f001 f8fa 	bl	8083654 <__aeabi_fcmpgt>
 8082460:	b938      	cbnz	r0, 8082472 <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 8082462:	4906      	ldr	r1, [pc, #24]	; (808247c <_ZN9TimeClass4zoneEf+0x30>)
 8082464:	4620      	mov	r0, r4
 8082466:	f000 ff39 	bl	80832dc <__aeabi_fmul>
 808246a:	f001 f8fd 	bl	8083668 <__aeabi_f2iz>
 808246e:	4b04      	ldr	r3, [pc, #16]	; (8082480 <_ZN9TimeClass4zoneEf+0x34>)
 8082470:	6018      	str	r0, [r3, #0]
 8082472:	bd10      	pop	{r4, pc}
 8082474:	c1400000 	.word	0xc1400000
 8082478:	41600000 	.word	0x41600000
 808247c:	45610000 	.word	0x45610000
 8082480:	200007a4 	.word	0x200007a4

08082484 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8082484:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 8082486:	4b0e      	ldr	r3, [pc, #56]	; (80824c0 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8082488:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 808248a:	681b      	ldr	r3, [r3, #0]
 808248c:	a802      	add	r0, sp, #8
 808248e:	4419      	add	r1, r3
 8082490:	4b0c      	ldr	r3, [pc, #48]	; (80824c4 <_ZN9TimeClass7timeStrEl+0x40>)
 8082492:	681b      	ldr	r3, [r3, #0]
 8082494:	4419      	add	r1, r3
 8082496:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 808249a:	f001 f959 	bl	8083750 <localtime>
        char* ascstr = asctime(calendar_time);
 808249e:	f001 f909 	bl	80836b4 <asctime>
 80824a2:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80824a4:	f001 faef 	bl	8083a86 <strlen>
        ascstr[len-1] = 0; // remove final newline
 80824a8:	2300      	movs	r3, #0
 80824aa:	4428      	add	r0, r5
 80824ac:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80824b0:	4629      	mov	r1, r5
 80824b2:	4620      	mov	r0, r4
 80824b4:	f7ff ff06 	bl	80822c4 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80824b8:	4620      	mov	r0, r4
 80824ba:	b003      	add	sp, #12
 80824bc:	bd30      	pop	{r4, r5, pc}
 80824be:	bf00      	nop
 80824c0:	200007a4 	.word	0x200007a4
 80824c4:	2000079c 	.word	0x2000079c

080824c8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80824c8:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80824ca:	2000      	movs	r0, #0
 80824cc:	f7fe fe9c 	bl	8081208 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80824d0:	4604      	mov	r4, r0
 80824d2:	b968      	cbnz	r0, 80824f0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80824d4:	f7fe ff88 	bl	80813e8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80824d8:	2801      	cmp	r0, #1
 80824da:	d10b      	bne.n	80824f4 <_ZN9TimeClass7isValidEv+0x2c>
 80824dc:	4620      	mov	r0, r4
 80824de:	f7fe ffbb 	bl	8081458 <system_thread_get_state>
 80824e2:	b938      	cbnz	r0, 80824f4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80824e4:	f7ff ffa4 	bl	8082430 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80824e8:	b930      	cbnz	r0, 80824f8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80824ea:	f7fe ffe1 	bl	80814b0 <spark_process>
 80824ee:	e7f9      	b.n	80824e4 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80824f0:	2001      	movs	r0, #1
 80824f2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80824f4:	2000      	movs	r0, #0
 80824f6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80824f8:	f7ff ff9a 	bl	8082430 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80824fc:	2000      	movs	r0, #0
 80824fe:	f7fe fe83 	bl	8081208 <HAL_RTC_Time_Is_Valid>
 8082502:	3000      	adds	r0, #0
 8082504:	bf18      	it	ne
 8082506:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8082508:	bd10      	pop	{r4, pc}

0808250a <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 808250a:	b508      	push	{r3, lr}
    (void)isValid();
 808250c:	f7ff ffdc 	bl	80824c8 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8082510:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8082514:	f7fe be50 	b.w	80811b8 <HAL_RTC_Get_UnixTime>

08082518 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 8082518:	b508      	push	{r3, lr}
	return hour(now());
 808251a:	f7ff fff6 	bl	808250a <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808251e:	f7ff ff55 	bl	80823cc <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 8082522:	4b01      	ldr	r3, [pc, #4]	; (8082528 <_ZN9TimeClass4hourEv+0x10>)
 8082524:	6898      	ldr	r0, [r3, #8]
 8082526:	bd08      	pop	{r3, pc}
 8082528:	20000774 	.word	0x20000774

0808252c <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 808252c:	b508      	push	{r3, lr}
	return minute(now());
 808252e:	f7ff ffec 	bl	808250a <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8082532:	f7ff ff4b 	bl	80823cc <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 8082536:	4b01      	ldr	r3, [pc, #4]	; (808253c <_ZN9TimeClass6minuteEv+0x10>)
 8082538:	6858      	ldr	r0, [r3, #4]
 808253a:	bd08      	pop	{r3, pc}
 808253c:	20000774 	.word	0x20000774

08082540 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 8082540:	b508      	push	{r3, lr}
	return day(now());
 8082542:	f7ff ffe2 	bl	808250a <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8082546:	f7ff ff41 	bl	80823cc <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 808254a:	4b01      	ldr	r3, [pc, #4]	; (8082550 <_ZN9TimeClass3dayEv+0x10>)
 808254c:	68d8      	ldr	r0, [r3, #12]
 808254e:	bd08      	pop	{r3, pc}
 8082550:	20000774 	.word	0x20000774

08082554 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8082554:	4b02      	ldr	r3, [pc, #8]	; (8082560 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8082556:	681a      	ldr	r2, [r3, #0]
 8082558:	4b02      	ldr	r3, [pc, #8]	; (8082564 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808255a:	601a      	str	r2, [r3, #0]
 808255c:	4770      	bx	lr
 808255e:	bf00      	nop
 8082560:	2000049c 	.word	0x2000049c
 8082564:	20000798 	.word	0x20000798

08082568 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8082568:	4770      	bx	lr

0808256a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808256a:	7441      	strb	r1, [r0, #17]
 808256c:	4770      	bx	lr

0808256e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 808256e:	7c00      	ldrb	r0, [r0, #16]
 8082570:	f7fe bf02 	b.w	8081378 <HAL_USART_Available_Data_For_Write>

08082574 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 8082574:	7c00      	ldrb	r0, [r0, #16]
 8082576:	f7fe bed7 	b.w	8081328 <HAL_USART_Available_Data>

0808257a <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 808257a:	7c00      	ldrb	r0, [r0, #16]
 808257c:	f7fe bee4 	b.w	8081348 <HAL_USART_Peek_Data>

08082580 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 8082580:	7c00      	ldrb	r0, [r0, #16]
 8082582:	f7fe bed9 	b.w	8081338 <HAL_USART_Read_Data>

08082586 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8082586:	7c00      	ldrb	r0, [r0, #16]
 8082588:	f7fe bee6 	b.w	8081358 <HAL_USART_Flush_Data>

0808258c <_ZN11USARTSerialD0Ev>:
 808258c:	b510      	push	{r4, lr}
 808258e:	4604      	mov	r4, r0
 8082590:	f7fd fd85 	bl	808009e <_ZdlPv>
 8082594:	4620      	mov	r0, r4
 8082596:	bd10      	pop	{r4, pc}

08082598 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8082598:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808259a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 808259c:	4604      	mov	r4, r0
 808259e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80825a0:	b925      	cbnz	r5, 80825ac <_ZN11USARTSerial5writeEh+0x14>
 80825a2:	7c00      	ldrb	r0, [r0, #16]
 80825a4:	f7fe fee8 	bl	8081378 <HAL_USART_Available_Data_For_Write>
 80825a8:	2800      	cmp	r0, #0
 80825aa:	dd05      	ble.n	80825b8 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80825ac:	4631      	mov	r1, r6
 80825ae:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80825b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80825b4:	f7fe beb0 	b.w	8081318 <HAL_USART_Write_Data>
  }
  return 0;
}
 80825b8:	4628      	mov	r0, r5
 80825ba:	bd70      	pop	{r4, r5, r6, pc}

080825bc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80825bc:	b510      	push	{r4, lr}
 80825be:	4604      	mov	r4, r0
 80825c0:	4608      	mov	r0, r1
 80825c2:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80825c4:	2200      	movs	r2, #0
 80825c6:	6062      	str	r2, [r4, #4]
 80825c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80825cc:	60a2      	str	r2, [r4, #8]
 80825ce:	4a05      	ldr	r2, [pc, #20]	; (80825e4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80825d0:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80825d2:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80825d4:	2201      	movs	r2, #1
 80825d6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80825d8:	461a      	mov	r2, r3
 80825da:	f7fe fe95 	bl	8081308 <HAL_USART_Init>
}
 80825de:	4620      	mov	r0, r4
 80825e0:	bd10      	pop	{r4, pc}
 80825e2:	bf00      	nop
 80825e4:	080849d0 	.word	0x080849d0

080825e8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80825e8:	7c00      	ldrb	r0, [r0, #16]
 80825ea:	f7fe bebd 	b.w	8081368 <HAL_USART_Is_Enabled>
	...

080825f0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80825f0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80825f2:	4d0c      	ldr	r5, [pc, #48]	; (8082624 <_Z22__fetch_global_Serial1v+0x34>)
 80825f4:	6829      	ldr	r1, [r5, #0]
 80825f6:	f011 0401 	ands.w	r4, r1, #1
 80825fa:	d111      	bne.n	8082620 <_Z22__fetch_global_Serial1v+0x30>
 80825fc:	4628      	mov	r0, r5
 80825fe:	f7fd fd50 	bl	80800a2 <__cxa_guard_acquire>
 8082602:	b168      	cbz	r0, 8082620 <_Z22__fetch_global_Serial1v+0x30>
 8082604:	4a08      	ldr	r2, [pc, #32]	; (8082628 <_Z22__fetch_global_Serial1v+0x38>)
 8082606:	4621      	mov	r1, r4
 8082608:	4b08      	ldr	r3, [pc, #32]	; (808262c <_Z22__fetch_global_Serial1v+0x3c>)
 808260a:	4809      	ldr	r0, [pc, #36]	; (8082630 <_Z22__fetch_global_Serial1v+0x40>)
 808260c:	f7ff ffd6 	bl	80825bc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8082610:	4628      	mov	r0, r5
 8082612:	f7fd fd4b 	bl	80800ac <__cxa_guard_release>
 8082616:	4a07      	ldr	r2, [pc, #28]	; (8082634 <_Z22__fetch_global_Serial1v+0x44>)
 8082618:	4907      	ldr	r1, [pc, #28]	; (8082638 <_Z22__fetch_global_Serial1v+0x48>)
 808261a:	4805      	ldr	r0, [pc, #20]	; (8082630 <_Z22__fetch_global_Serial1v+0x40>)
 808261c:	f000 fa48 	bl	8082ab0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8082620:	4803      	ldr	r0, [pc, #12]	; (8082630 <_Z22__fetch_global_Serial1v+0x40>)
 8082622:	bd38      	pop	{r3, r4, r5, pc}
 8082624:	20000840 	.word	0x20000840
 8082628:	20000844 	.word	0x20000844
 808262c:	200007bc 	.word	0x200007bc
 8082630:	200007a8 	.word	0x200007a8
 8082634:	20000554 	.word	0x20000554
 8082638:	08082569 	.word	0x08082569

0808263c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808263c:	7441      	strb	r1, [r0, #17]
 808263e:	4770      	bx	lr

08082640 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8082640:	4770      	bx	lr

08082642 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 8082642:	2100      	movs	r1, #0
 8082644:	7c00      	ldrb	r0, [r0, #16]
 8082646:	f7fe beb7 	b.w	80813b8 <HAL_USB_USART_Receive_Data>

0808264a <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 808264a:	2101      	movs	r1, #1
 808264c:	7c00      	ldrb	r0, [r0, #16]
 808264e:	f7fe beb3 	b.w	80813b8 <HAL_USB_USART_Receive_Data>

08082652 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 8082652:	7c00      	ldrb	r0, [r0, #16]
 8082654:	f7fe bea8 	b.w	80813a8 <HAL_USB_USART_Available_Data_For_Write>

08082658 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 8082658:	7c00      	ldrb	r0, [r0, #16]
 808265a:	f7fe be9d 	b.w	8081398 <HAL_USB_USART_Available_Data>

0808265e <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 808265e:	b538      	push	{r3, r4, r5, lr}
 8082660:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082662:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 8082664:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082666:	f7fe fe9f 	bl	80813a8 <HAL_USB_USART_Available_Data_For_Write>
 808266a:	2800      	cmp	r0, #0
 808266c:	dc01      	bgt.n	8082672 <_ZN9USBSerial5writeEh+0x14>
 808266e:	7c60      	ldrb	r0, [r4, #17]
 8082670:	b120      	cbz	r0, 808267c <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 8082672:	4629      	mov	r1, r5
 8082674:	7c20      	ldrb	r0, [r4, #16]
 8082676:	f7fe fea7 	bl	80813c8 <HAL_USB_USART_Send_Data>
    return 1;
 808267a:	2001      	movs	r0, #1
  }
  return 0;
}
 808267c:	bd38      	pop	{r3, r4, r5, pc}

0808267e <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 808267e:	7c00      	ldrb	r0, [r0, #16]
 8082680:	f7fe beaa 	b.w	80813d8 <HAL_USB_USART_Flush_Data>

08082684 <_ZN9USBSerialD0Ev>:
 8082684:	b510      	push	{r4, lr}
 8082686:	4604      	mov	r4, r0
 8082688:	f7fd fd09 	bl	808009e <_ZdlPv>
 808268c:	4620      	mov	r0, r4
 808268e:	bd10      	pop	{r4, pc}

08082690 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8082690:	b510      	push	{r4, lr}
 8082692:	4604      	mov	r4, r0
 8082694:	2300      	movs	r3, #0
 8082696:	6063      	str	r3, [r4, #4]
 8082698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808269c:	60a3      	str	r3, [r4, #8]
 808269e:	4b05      	ldr	r3, [pc, #20]	; (80826b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80826a0:	4608      	mov	r0, r1
 80826a2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80826a4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80826a6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80826a8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80826aa:	4611      	mov	r1, r2
 80826ac:	f7fe fe6c 	bl	8081388 <HAL_USB_USART_Init>
}
 80826b0:	4620      	mov	r0, r4
 80826b2:	bd10      	pop	{r4, pc}
 80826b4:	08084a00 	.word	0x08084a00

080826b8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80826b8:	b510      	push	{r4, lr}
 80826ba:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80826bc:	2214      	movs	r2, #20
 80826be:	2100      	movs	r1, #0
 80826c0:	f001 f949 	bl	8083956 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80826c4:	4b05      	ldr	r3, [pc, #20]	; (80826dc <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80826c6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80826c8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80826ca:	4b05      	ldr	r3, [pc, #20]	; (80826e0 <_Z19acquireSerialBufferv+0x28>)
 80826cc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80826ce:	f240 1301 	movw	r3, #257	; 0x101
 80826d2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80826d4:	2381      	movs	r3, #129	; 0x81
 80826d6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80826d8:	bd10      	pop	{r4, pc}
 80826da:	bf00      	nop
 80826dc:	2000094d 	.word	0x2000094d
 80826e0:	200008cc 	.word	0x200008cc

080826e4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80826e4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80826e6:	4d0e      	ldr	r5, [pc, #56]	; (8082720 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80826e8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80826ea:	a801      	add	r0, sp, #4
 80826ec:	f7ff ffe4 	bl	80826b8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80826f0:	6829      	ldr	r1, [r5, #0]
 80826f2:	f011 0401 	ands.w	r4, r1, #1
 80826f6:	d110      	bne.n	808271a <_Z16_fetch_usbserialv+0x36>
 80826f8:	4628      	mov	r0, r5
 80826fa:	f7fd fcd2 	bl	80800a2 <__cxa_guard_acquire>
 80826fe:	b160      	cbz	r0, 808271a <_Z16_fetch_usbserialv+0x36>
 8082700:	aa01      	add	r2, sp, #4
 8082702:	4621      	mov	r1, r4
 8082704:	4807      	ldr	r0, [pc, #28]	; (8082724 <_Z16_fetch_usbserialv+0x40>)
 8082706:	f7ff ffc3 	bl	8082690 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808270a:	4628      	mov	r0, r5
 808270c:	f7fd fcce 	bl	80800ac <__cxa_guard_release>
 8082710:	4a05      	ldr	r2, [pc, #20]	; (8082728 <_Z16_fetch_usbserialv+0x44>)
 8082712:	4906      	ldr	r1, [pc, #24]	; (808272c <_Z16_fetch_usbserialv+0x48>)
 8082714:	4803      	ldr	r0, [pc, #12]	; (8082724 <_Z16_fetch_usbserialv+0x40>)
 8082716:	f000 f9cb 	bl	8082ab0 <__aeabi_atexit>
	return _usbserial;
}
 808271a:	4802      	ldr	r0, [pc, #8]	; (8082724 <_Z16_fetch_usbserialv+0x40>)
 808271c:	b007      	add	sp, #28
 808271e:	bd30      	pop	{r4, r5, pc}
 8082720:	200008c8 	.word	0x200008c8
 8082724:	20000a50 	.word	0x20000a50
 8082728:	20000554 	.word	0x20000554
 808272c:	08082641 	.word	0x08082641

08082730 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8082730:	b510      	push	{r4, lr}
 8082732:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082734:	2214      	movs	r2, #20
 8082736:	2100      	movs	r1, #0
 8082738:	f001 f90d 	bl	8083956 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808273c:	4b05      	ldr	r3, [pc, #20]	; (8082754 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808273e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082740:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8082742:	4b05      	ldr	r3, [pc, #20]	; (8082758 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8082744:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082746:	f240 1301 	movw	r3, #257	; 0x101
 808274a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808274c:	2381      	movs	r3, #129	; 0x81
 808274e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082750:	bd10      	pop	{r4, pc}
 8082752:	bf00      	nop
 8082754:	20000b00 	.word	0x20000b00
 8082758:	20000a68 	.word	0x20000a68

0808275c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 808275c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808275e:	4c0e      	ldr	r4, [pc, #56]	; (8082798 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8082760:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8082762:	a801      	add	r0, sp, #4
 8082764:	f7ff ffe4 	bl	8082730 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082768:	6823      	ldr	r3, [r4, #0]
 808276a:	07db      	lsls	r3, r3, #31
 808276c:	d410      	bmi.n	8082790 <_Z17_fetch_usbserial1v+0x34>
 808276e:	4620      	mov	r0, r4
 8082770:	f7fd fc97 	bl	80800a2 <__cxa_guard_acquire>
 8082774:	b160      	cbz	r0, 8082790 <_Z17_fetch_usbserial1v+0x34>
 8082776:	aa01      	add	r2, sp, #4
 8082778:	2101      	movs	r1, #1
 808277a:	4808      	ldr	r0, [pc, #32]	; (808279c <_Z17_fetch_usbserial1v+0x40>)
 808277c:	f7ff ff88 	bl	8082690 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082780:	4620      	mov	r0, r4
 8082782:	f7fd fc93 	bl	80800ac <__cxa_guard_release>
 8082786:	4a06      	ldr	r2, [pc, #24]	; (80827a0 <_Z17_fetch_usbserial1v+0x44>)
 8082788:	4906      	ldr	r1, [pc, #24]	; (80827a4 <_Z17_fetch_usbserial1v+0x48>)
 808278a:	4804      	ldr	r0, [pc, #16]	; (808279c <_Z17_fetch_usbserial1v+0x40>)
 808278c:	f000 f990 	bl	8082ab0 <__aeabi_atexit>
  return _usbserial1;
}
 8082790:	4802      	ldr	r0, [pc, #8]	; (808279c <_Z17_fetch_usbserial1v+0x40>)
 8082792:	b006      	add	sp, #24
 8082794:	bd10      	pop	{r4, pc}
 8082796:	bf00      	nop
 8082798:	20000a64 	.word	0x20000a64
 808279c:	20000aec 	.word	0x20000aec
 80827a0:	20000554 	.word	0x20000554
 80827a4:	08082641 	.word	0x08082641

080827a8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80827a8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80827aa:	4b18      	ldr	r3, [pc, #96]	; (808280c <serialEventRun+0x64>)
 80827ac:	b133      	cbz	r3, 80827bc <serialEventRun+0x14>
 80827ae:	f7ff ff99 	bl	80826e4 <_Z16_fetch_usbserialv>
 80827b2:	6803      	ldr	r3, [r0, #0]
 80827b4:	691b      	ldr	r3, [r3, #16]
 80827b6:	4798      	blx	r3
 80827b8:	2800      	cmp	r0, #0
 80827ba:	dc1e      	bgt.n	80827fa <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80827bc:	4b14      	ldr	r3, [pc, #80]	; (8082810 <serialEventRun+0x68>)
 80827be:	b133      	cbz	r3, 80827ce <serialEventRun+0x26>
 80827c0:	f7ff ff16 	bl	80825f0 <_Z22__fetch_global_Serial1v>
 80827c4:	6803      	ldr	r3, [r0, #0]
 80827c6:	691b      	ldr	r3, [r3, #16]
 80827c8:	4798      	blx	r3
 80827ca:	2800      	cmp	r0, #0
 80827cc:	dc18      	bgt.n	8082800 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80827ce:	4b11      	ldr	r3, [pc, #68]	; (8082814 <serialEventRun+0x6c>)
 80827d0:	b10b      	cbz	r3, 80827d6 <serialEventRun+0x2e>
 80827d2:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 80827d6:	4b10      	ldr	r3, [pc, #64]	; (8082818 <serialEventRun+0x70>)
 80827d8:	b10b      	cbz	r3, 80827de <serialEventRun+0x36>
 80827da:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 80827de:	4b0f      	ldr	r3, [pc, #60]	; (808281c <serialEventRun+0x74>)
 80827e0:	b10b      	cbz	r3, 80827e6 <serialEventRun+0x3e>
 80827e2:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80827e6:	4b0e      	ldr	r3, [pc, #56]	; (8082820 <serialEventRun+0x78>)
 80827e8:	b17b      	cbz	r3, 808280a <serialEventRun+0x62>
 80827ea:	f7ff ffb7 	bl	808275c <_Z17_fetch_usbserial1v>
 80827ee:	6803      	ldr	r3, [r0, #0]
 80827f0:	691b      	ldr	r3, [r3, #16]
 80827f2:	4798      	blx	r3
 80827f4:	2800      	cmp	r0, #0
 80827f6:	dc06      	bgt.n	8082806 <serialEventRun+0x5e>
 80827f8:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80827fa:	f3af 8000 	nop.w
 80827fe:	e7dd      	b.n	80827bc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8082800:	f3af 8000 	nop.w
 8082804:	e7e3      	b.n	80827ce <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8082806:	f3af 8000 	nop.w
 808280a:	bd08      	pop	{r3, pc}
	...

08082824 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8082824:	b508      	push	{r3, lr}
	serialEventRun();
 8082826:	f7ff ffbf 	bl	80827a8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808282a:	f7fe fcbd 	bl	80811a8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808282e:	4b01      	ldr	r3, [pc, #4]	; (8082834 <_post_loop+0x10>)
 8082830:	6018      	str	r0, [r3, #0]
 8082832:	bd08      	pop	{r3, pc}
 8082834:	20000c0c 	.word	0x20000c0c

08082838 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8082838:	4802      	ldr	r0, [pc, #8]	; (8082844 <_Z33system_initialize_user_backup_ramv+0xc>)
 808283a:	4a03      	ldr	r2, [pc, #12]	; (8082848 <_Z33system_initialize_user_backup_ramv+0x10>)
 808283c:	4903      	ldr	r1, [pc, #12]	; (808284c <_Z33system_initialize_user_backup_ramv+0x14>)
 808283e:	1a12      	subs	r2, r2, r0
 8082840:	f001 b87e 	b.w	8083940 <memcpy>
 8082844:	40024000 	.word	0x40024000
 8082848:	40024004 	.word	0x40024004
 808284c:	08084cc0 	.word	0x08084cc0

08082850 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8082850:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082852:	2300      	movs	r3, #0
 8082854:	9300      	str	r3, [sp, #0]
 8082856:	461a      	mov	r2, r3
 8082858:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808285c:	f7fe fe0e 	bl	808147c <system_ctrl_set_result>
}
 8082860:	b003      	add	sp, #12
 8082862:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08082868 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8082868:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 808286a:	8843      	ldrh	r3, [r0, #2]
 808286c:	2b0a      	cmp	r3, #10
 808286e:	d008      	beq.n	8082882 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8082870:	2b50      	cmp	r3, #80	; 0x50
 8082872:	d109      	bne.n	8082888 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8082874:	4b09      	ldr	r3, [pc, #36]	; (808289c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8082876:	681b      	ldr	r3, [r3, #0]
 8082878:	b13b      	cbz	r3, 808288a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 808287a:	b003      	add	sp, #12
 808287c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8082880:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8082882:	f7ff ffe5 	bl	8082850 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8082886:	e006      	b.n	8082896 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082888:	2300      	movs	r3, #0
 808288a:	9300      	str	r3, [sp, #0]
 808288c:	461a      	mov	r2, r3
 808288e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082892:	f7fe fdf3 	bl	808147c <system_ctrl_set_result>
        break;
    }
}
 8082896:	b003      	add	sp, #12
 8082898:	f85d fb04 	ldr.w	pc, [sp], #4
 808289c:	20000c04 	.word	0x20000c04

080828a0 <module_user_init_hook>:

void module_user_init_hook()
{
 80828a0:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80828a2:	4c10      	ldr	r4, [pc, #64]	; (80828e4 <module_user_init_hook+0x44>)
 80828a4:	4d10      	ldr	r5, [pc, #64]	; (80828e8 <module_user_init_hook+0x48>)
 80828a6:	6823      	ldr	r3, [r4, #0]
 80828a8:	42ab      	cmp	r3, r5
 80828aa:	4b10      	ldr	r3, [pc, #64]	; (80828ec <module_user_init_hook+0x4c>)
 80828ac:	bf0c      	ite	eq
 80828ae:	2201      	moveq	r2, #1
 80828b0:	2200      	movne	r2, #0
 80828b2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80828b4:	d002      	beq.n	80828bc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80828b6:	f7ff ffbf 	bl	8082838 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80828ba:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80828bc:	f7fe fc6c 	bl	8081198 <HAL_RNG_GetRandomNumber>
 80828c0:	4604      	mov	r4, r0
    srand(seed);
 80828c2:	f001 f851 	bl	8083968 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80828c6:	4b0a      	ldr	r3, [pc, #40]	; (80828f0 <module_user_init_hook+0x50>)
 80828c8:	b113      	cbz	r3, 80828d0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80828ca:	4620      	mov	r0, r4
 80828cc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80828d0:	2100      	movs	r1, #0
 80828d2:	4807      	ldr	r0, [pc, #28]	; (80828f0 <module_user_init_hook+0x50>)
 80828d4:	f7fe fe34 	bl	8081540 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80828d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80828dc:	2100      	movs	r1, #0
 80828de:	4805      	ldr	r0, [pc, #20]	; (80828f4 <module_user_init_hook+0x54>)
 80828e0:	f7fe bdc2 	b.w	8081468 <system_ctrl_set_app_request_handler>
 80828e4:	40024000 	.word	0x40024000
 80828e8:	9a271c1e 	.word	0x9a271c1e
 80828ec:	20000c08 	.word	0x20000c08
 80828f0:	00000000 	.word	0x00000000
 80828f4:	08082869 	.word	0x08082869

080828f8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80828f8:	b510      	push	{r4, lr}
 80828fa:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80828fc:	480f      	ldr	r0, [pc, #60]	; (808293c <pinAvailable+0x44>)
 80828fe:	f7ff fc97 	bl	8082230 <_ZN8SPIClass9isEnabledEv>
 8082902:	b128      	cbz	r0, 8082910 <pinAvailable+0x18>
 8082904:	f1a4 030d 	sub.w	r3, r4, #13
 8082908:	2b02      	cmp	r3, #2
 808290a:	d801      	bhi.n	8082910 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 808290c:	2000      	movs	r0, #0
 808290e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8082910:	f000 f868 	bl	80829e4 <_Z19__fetch_global_Wirev>
 8082914:	f7ff fb04 	bl	8081f20 <_ZN7TwoWire9isEnabledEv>
 8082918:	b108      	cbz	r0, 808291e <pinAvailable+0x26>
 808291a:	2c01      	cmp	r4, #1
 808291c:	d9f6      	bls.n	808290c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 808291e:	f7ff fe67 	bl	80825f0 <_Z22__fetch_global_Serial1v>
 8082922:	f7ff fe61 	bl	80825e8 <_ZN11USARTSerial9isEnabledEv>
 8082926:	b118      	cbz	r0, 8082930 <pinAvailable+0x38>
 8082928:	f1a4 0312 	sub.w	r3, r4, #18
 808292c:	2b01      	cmp	r3, #1
 808292e:	d9ed      	bls.n	808290c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8082930:	2c2e      	cmp	r4, #46	; 0x2e
 8082932:	bf8c      	ite	hi
 8082934:	2000      	movhi	r0, #0
 8082936:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8082938:	bd10      	pop	{r4, pc}
 808293a:	bf00      	nop
 808293c:	20000c38 	.word	0x20000c38

08082940 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082940:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8082942:	b538      	push	{r3, r4, r5, lr}
 8082944:	4604      	mov	r4, r0
 8082946:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082948:	d80a      	bhi.n	8082960 <pinMode+0x20>
 808294a:	29ff      	cmp	r1, #255	; 0xff
 808294c:	d008      	beq.n	8082960 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808294e:	f7ff ffd3 	bl	80828f8 <pinAvailable>
 8082952:	b128      	cbz	r0, 8082960 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8082954:	4629      	mov	r1, r5
 8082956:	4620      	mov	r0, r4
}
 8082958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808295c:	f7fe bc6c 	b.w	8081238 <HAL_Pin_Mode>
 8082960:	bd38      	pop	{r3, r4, r5, pc}

08082962 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8082962:	b538      	push	{r3, r4, r5, lr}
 8082964:	4604      	mov	r4, r0
 8082966:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8082968:	f7fe fc6e 	bl	8081248 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808296c:	28ff      	cmp	r0, #255	; 0xff
 808296e:	d010      	beq.n	8082992 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8082970:	2806      	cmp	r0, #6
 8082972:	d804      	bhi.n	808297e <digitalWrite+0x1c>
 8082974:	234d      	movs	r3, #77	; 0x4d
 8082976:	fa23 f000 	lsr.w	r0, r3, r0
 808297a:	07c3      	lsls	r3, r0, #31
 808297c:	d409      	bmi.n	8082992 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808297e:	4620      	mov	r0, r4
 8082980:	f7ff ffba 	bl	80828f8 <pinAvailable>
 8082984:	b128      	cbz	r0, 8082992 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8082986:	4629      	mov	r1, r5
 8082988:	4620      	mov	r0, r4
}
 808298a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808298e:	f7fe bc63 	b.w	8081258 <HAL_GPIO_Write>
 8082992:	bd38      	pop	{r3, r4, r5, pc}

08082994 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8082994:	b510      	push	{r4, lr}
 8082996:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8082998:	f7fe fc56 	bl	8081248 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 808299c:	3804      	subs	r0, #4
 808299e:	b2c0      	uxtb	r0, r0
 80829a0:	2801      	cmp	r0, #1
 80829a2:	d908      	bls.n	80829b6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80829a4:	4620      	mov	r0, r4
 80829a6:	f7ff ffa7 	bl	80828f8 <pinAvailable>
 80829aa:	b120      	cbz	r0, 80829b6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80829ac:	4620      	mov	r0, r4
}
 80829ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80829b2:	f7fe bc59 	b.w	8081268 <HAL_GPIO_Read>
}
 80829b6:	2000      	movs	r0, #0
 80829b8:	bd10      	pop	{r4, pc}
	...

080829bc <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80829bc:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80829be:	4c07      	ldr	r4, [pc, #28]	; (80829dc <_Z21__fetch_global_EEPROMv+0x20>)
 80829c0:	6823      	ldr	r3, [r4, #0]
 80829c2:	07db      	lsls	r3, r3, #31
 80829c4:	d408      	bmi.n	80829d8 <_Z21__fetch_global_EEPROMv+0x1c>
 80829c6:	4620      	mov	r0, r4
 80829c8:	f7fd fb6b 	bl	80800a2 <__cxa_guard_acquire>
 80829cc:	b120      	cbz	r0, 80829d8 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80829ce:	f7fe fbfb 	bl	80811c8 <HAL_EEPROM_Init>
 80829d2:	4620      	mov	r0, r4
 80829d4:	f7fd fb6a 	bl	80800ac <__cxa_guard_release>
	return eeprom;
}
 80829d8:	4801      	ldr	r0, [pc, #4]	; (80829e0 <_Z21__fetch_global_EEPROMv+0x24>)
 80829da:	bd10      	pop	{r4, pc}
 80829dc:	20000c10 	.word	0x20000c10
 80829e0:	20000c14 	.word	0x20000c14

080829e4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80829e4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80829e6:	4d0b      	ldr	r5, [pc, #44]	; (8082a14 <_Z19__fetch_global_Wirev+0x30>)
 80829e8:	6829      	ldr	r1, [r5, #0]
 80829ea:	f011 0401 	ands.w	r4, r1, #1
 80829ee:	d10f      	bne.n	8082a10 <_Z19__fetch_global_Wirev+0x2c>
 80829f0:	4628      	mov	r0, r5
 80829f2:	f7fd fb56 	bl	80800a2 <__cxa_guard_acquire>
 80829f6:	b158      	cbz	r0, 8082a10 <_Z19__fetch_global_Wirev+0x2c>
 80829f8:	4621      	mov	r1, r4
 80829fa:	4807      	ldr	r0, [pc, #28]	; (8082a18 <_Z19__fetch_global_Wirev+0x34>)
 80829fc:	f7ff fa7e 	bl	8081efc <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8082a00:	4628      	mov	r0, r5
 8082a02:	f7fd fb53 	bl	80800ac <__cxa_guard_release>
 8082a06:	4a05      	ldr	r2, [pc, #20]	; (8082a1c <_Z19__fetch_global_Wirev+0x38>)
 8082a08:	4905      	ldr	r1, [pc, #20]	; (8082a20 <_Z19__fetch_global_Wirev+0x3c>)
 8082a0a:	4803      	ldr	r0, [pc, #12]	; (8082a18 <_Z19__fetch_global_Wirev+0x34>)
 8082a0c:	f000 f850 	bl	8082ab0 <__aeabi_atexit>
	return wire;
}
 8082a10:	4801      	ldr	r0, [pc, #4]	; (8082a18 <_Z19__fetch_global_Wirev+0x34>)
 8082a12:	bd38      	pop	{r3, r4, r5, pc}
 8082a14:	20000c18 	.word	0x20000c18
 8082a18:	20000c1c 	.word	0x20000c1c
 8082a1c:	20000554 	.word	0x20000554
 8082a20:	08081ea5 	.word	0x08081ea5

08082a24 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8082a24:	b513      	push	{r0, r1, r4, lr}
 8082a26:	4c08      	ldr	r4, [pc, #32]	; (8082a48 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8082a28:	2300      	movs	r3, #0
 8082a2a:	461a      	mov	r2, r3
 8082a2c:	4619      	mov	r1, r3
 8082a2e:	9300      	str	r3, [sp, #0]
 8082a30:	4620      	mov	r0, r4
 8082a32:	f7ff fabb 	bl	8081fac <_ZN9IPAddressC1Ehhhh>
 8082a36:	4620      	mov	r0, r4
 8082a38:	4a04      	ldr	r2, [pc, #16]	; (8082a4c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8082a3a:	4905      	ldr	r1, [pc, #20]	; (8082a50 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8082a3c:	b002      	add	sp, #8
 8082a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8082a42:	f000 b835 	b.w	8082ab0 <__aeabi_atexit>
 8082a46:	bf00      	nop
 8082a48:	20000c30 	.word	0x20000c30
 8082a4c:	20000554 	.word	0x20000554
 8082a50:	08081f29 	.word	0x08081f29

08082a54 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8082a54:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8082a56:	4e11      	ldr	r6, [pc, #68]	; (8082a9c <_GLOBAL__sub_I_SPI+0x48>)
 8082a58:	4d11      	ldr	r5, [pc, #68]	; (8082aa0 <_GLOBAL__sub_I_SPI+0x4c>)
 8082a5a:	4c12      	ldr	r4, [pc, #72]	; (8082aa4 <_GLOBAL__sub_I_SPI+0x50>)
 8082a5c:	2100      	movs	r1, #0
 8082a5e:	4630      	mov	r0, r6
 8082a60:	f7ff fbd2 	bl	8082208 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082a64:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8082a66:	4e10      	ldr	r6, [pc, #64]	; (8082aa8 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8082a68:	462a      	mov	r2, r5
 8082a6a:	4621      	mov	r1, r4
 8082a6c:	f000 f820 	bl	8082ab0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8082a70:	2101      	movs	r1, #1
 8082a72:	4630      	mov	r0, r6
 8082a74:	f7ff fbc8 	bl	8082208 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082a78:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8082a7a:	4e0c      	ldr	r6, [pc, #48]	; (8082aac <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8082a7c:	462a      	mov	r2, r5
 8082a7e:	4621      	mov	r1, r4
 8082a80:	f000 f816 	bl	8082ab0 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8082a84:	2102      	movs	r1, #2
 8082a86:	4630      	mov	r0, r6
 8082a88:	f7ff fbbe 	bl	8082208 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082a8c:	462a      	mov	r2, r5
 8082a8e:	4621      	mov	r1, r4
 8082a90:	4630      	mov	r0, r6
 8082a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8082a96:	f000 b80b 	b.w	8082ab0 <__aeabi_atexit>
 8082a9a:	bf00      	nop
 8082a9c:	20000c38 	.word	0x20000c38
 8082aa0:	20000554 	.word	0x20000554
 8082aa4:	080821f9 	.word	0x080821f9
 8082aa8:	20000c48 	.word	0x20000c48
 8082aac:	20000c58 	.word	0x20000c58

08082ab0 <__aeabi_atexit>:
 8082ab0:	460b      	mov	r3, r1
 8082ab2:	4601      	mov	r1, r0
 8082ab4:	4618      	mov	r0, r3
 8082ab6:	f000 be3d 	b.w	8083734 <__cxa_atexit>

08082aba <_ZSt25__throw_bad_function_callv>:
 8082aba:	b508      	push	{r3, lr}
 8082abc:	f7fe fdc8 	bl	8081650 <abort>

08082ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8082ac0:	4b24      	ldr	r3, [pc, #144]	; (8082b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8082ac2:	681a      	ldr	r2, [r3, #0]
 8082ac4:	07d0      	lsls	r0, r2, #31
 8082ac6:	bf5c      	itt	pl
 8082ac8:	2201      	movpl	r2, #1
 8082aca:	601a      	strpl	r2, [r3, #0]
 8082acc:	4b22      	ldr	r3, [pc, #136]	; (8082b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8082ace:	681a      	ldr	r2, [r3, #0]
 8082ad0:	07d1      	lsls	r1, r2, #31
 8082ad2:	bf5c      	itt	pl
 8082ad4:	2201      	movpl	r2, #1
 8082ad6:	601a      	strpl	r2, [r3, #0]
 8082ad8:	4b20      	ldr	r3, [pc, #128]	; (8082b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8082ada:	681a      	ldr	r2, [r3, #0]
 8082adc:	07d2      	lsls	r2, r2, #31
 8082ade:	bf5c      	itt	pl
 8082ae0:	2201      	movpl	r2, #1
 8082ae2:	601a      	strpl	r2, [r3, #0]
 8082ae4:	4b1e      	ldr	r3, [pc, #120]	; (8082b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8082ae6:	681a      	ldr	r2, [r3, #0]
 8082ae8:	07d0      	lsls	r0, r2, #31
 8082aea:	bf5c      	itt	pl
 8082aec:	2201      	movpl	r2, #1
 8082aee:	601a      	strpl	r2, [r3, #0]
 8082af0:	4b1c      	ldr	r3, [pc, #112]	; (8082b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8082af2:	681a      	ldr	r2, [r3, #0]
 8082af4:	07d1      	lsls	r1, r2, #31
 8082af6:	bf5c      	itt	pl
 8082af8:	2201      	movpl	r2, #1
 8082afa:	601a      	strpl	r2, [r3, #0]
 8082afc:	4b1a      	ldr	r3, [pc, #104]	; (8082b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8082afe:	681a      	ldr	r2, [r3, #0]
 8082b00:	07d2      	lsls	r2, r2, #31
 8082b02:	bf5c      	itt	pl
 8082b04:	2201      	movpl	r2, #1
 8082b06:	601a      	strpl	r2, [r3, #0]
 8082b08:	4b18      	ldr	r3, [pc, #96]	; (8082b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8082b0a:	681a      	ldr	r2, [r3, #0]
 8082b0c:	07d0      	lsls	r0, r2, #31
 8082b0e:	bf5c      	itt	pl
 8082b10:	2201      	movpl	r2, #1
 8082b12:	601a      	strpl	r2, [r3, #0]
 8082b14:	4b16      	ldr	r3, [pc, #88]	; (8082b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8082b16:	681a      	ldr	r2, [r3, #0]
 8082b18:	07d1      	lsls	r1, r2, #31
 8082b1a:	bf5c      	itt	pl
 8082b1c:	2201      	movpl	r2, #1
 8082b1e:	601a      	strpl	r2, [r3, #0]
 8082b20:	4b14      	ldr	r3, [pc, #80]	; (8082b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8082b22:	681a      	ldr	r2, [r3, #0]
 8082b24:	07d2      	lsls	r2, r2, #31
 8082b26:	bf5c      	itt	pl
 8082b28:	2201      	movpl	r2, #1
 8082b2a:	601a      	strpl	r2, [r3, #0]
 8082b2c:	4b12      	ldr	r3, [pc, #72]	; (8082b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8082b2e:	681a      	ldr	r2, [r3, #0]
 8082b30:	07d0      	lsls	r0, r2, #31
 8082b32:	bf5c      	itt	pl
 8082b34:	2201      	movpl	r2, #1
 8082b36:	601a      	strpl	r2, [r3, #0]
 8082b38:	4b10      	ldr	r3, [pc, #64]	; (8082b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8082b3a:	681a      	ldr	r2, [r3, #0]
 8082b3c:	07d1      	lsls	r1, r2, #31
 8082b3e:	bf5c      	itt	pl
 8082b40:	2201      	movpl	r2, #1
 8082b42:	601a      	strpl	r2, [r3, #0]
 8082b44:	4b0e      	ldr	r3, [pc, #56]	; (8082b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8082b46:	681a      	ldr	r2, [r3, #0]
 8082b48:	07d2      	lsls	r2, r2, #31
 8082b4a:	bf5c      	itt	pl
 8082b4c:	2201      	movpl	r2, #1
 8082b4e:	601a      	strpl	r2, [r3, #0]
 8082b50:	4770      	bx	lr
 8082b52:	bf00      	nop
 8082b54:	20000c94 	.word	0x20000c94
 8082b58:	20000c90 	.word	0x20000c90
 8082b5c:	20000c8c 	.word	0x20000c8c
 8082b60:	20000c88 	.word	0x20000c88
 8082b64:	20000c84 	.word	0x20000c84
 8082b68:	20000c80 	.word	0x20000c80
 8082b6c:	20000c7c 	.word	0x20000c7c
 8082b70:	20000c78 	.word	0x20000c78
 8082b74:	20000c74 	.word	0x20000c74
 8082b78:	20000c70 	.word	0x20000c70
 8082b7c:	20000c6c 	.word	0x20000c6c
 8082b80:	20000c68 	.word	0x20000c68

08082b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8082b84:	4b18      	ldr	r3, [pc, #96]	; (8082be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8082b86:	681a      	ldr	r2, [r3, #0]
 8082b88:	07d1      	lsls	r1, r2, #31
 8082b8a:	bf5c      	itt	pl
 8082b8c:	2201      	movpl	r2, #1
 8082b8e:	601a      	strpl	r2, [r3, #0]
 8082b90:	4b16      	ldr	r3, [pc, #88]	; (8082bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8082b92:	681a      	ldr	r2, [r3, #0]
 8082b94:	07d2      	lsls	r2, r2, #31
 8082b96:	bf5c      	itt	pl
 8082b98:	2201      	movpl	r2, #1
 8082b9a:	601a      	strpl	r2, [r3, #0]
 8082b9c:	4b14      	ldr	r3, [pc, #80]	; (8082bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8082b9e:	681a      	ldr	r2, [r3, #0]
 8082ba0:	07d0      	lsls	r0, r2, #31
 8082ba2:	bf5c      	itt	pl
 8082ba4:	2201      	movpl	r2, #1
 8082ba6:	601a      	strpl	r2, [r3, #0]
 8082ba8:	4b12      	ldr	r3, [pc, #72]	; (8082bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8082baa:	681a      	ldr	r2, [r3, #0]
 8082bac:	07d1      	lsls	r1, r2, #31
 8082bae:	bf5c      	itt	pl
 8082bb0:	2201      	movpl	r2, #1
 8082bb2:	601a      	strpl	r2, [r3, #0]
 8082bb4:	4b10      	ldr	r3, [pc, #64]	; (8082bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8082bb6:	681a      	ldr	r2, [r3, #0]
 8082bb8:	07d2      	lsls	r2, r2, #31
 8082bba:	bf5c      	itt	pl
 8082bbc:	2201      	movpl	r2, #1
 8082bbe:	601a      	strpl	r2, [r3, #0]
 8082bc0:	4b0e      	ldr	r3, [pc, #56]	; (8082bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8082bc2:	681a      	ldr	r2, [r3, #0]
 8082bc4:	07d0      	lsls	r0, r2, #31
 8082bc6:	bf5c      	itt	pl
 8082bc8:	2201      	movpl	r2, #1
 8082bca:	601a      	strpl	r2, [r3, #0]
 8082bcc:	4b0c      	ldr	r3, [pc, #48]	; (8082c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8082bce:	681a      	ldr	r2, [r3, #0]
 8082bd0:	07d1      	lsls	r1, r2, #31
 8082bd2:	bf5c      	itt	pl
 8082bd4:	2201      	movpl	r2, #1
 8082bd6:	601a      	strpl	r2, [r3, #0]
 8082bd8:	4b0a      	ldr	r3, [pc, #40]	; (8082c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8082bda:	681a      	ldr	r2, [r3, #0]
 8082bdc:	07d2      	lsls	r2, r2, #31
 8082bde:	bf5c      	itt	pl
 8082be0:	2201      	movpl	r2, #1
 8082be2:	601a      	strpl	r2, [r3, #0]
 8082be4:	4770      	bx	lr
 8082be6:	bf00      	nop
 8082be8:	20000cb4 	.word	0x20000cb4
 8082bec:	20000cb0 	.word	0x20000cb0
 8082bf0:	20000cac 	.word	0x20000cac
 8082bf4:	20000ca8 	.word	0x20000ca8
 8082bf8:	20000ca4 	.word	0x20000ca4
 8082bfc:	20000ca0 	.word	0x20000ca0
 8082c00:	20000c9c 	.word	0x20000c9c
 8082c04:	20000c98 	.word	0x20000c98

08082c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8082c08:	4b18      	ldr	r3, [pc, #96]	; (8082c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8082c0a:	681a      	ldr	r2, [r3, #0]
 8082c0c:	07d1      	lsls	r1, r2, #31
 8082c0e:	bf5c      	itt	pl
 8082c10:	2201      	movpl	r2, #1
 8082c12:	601a      	strpl	r2, [r3, #0]
 8082c14:	4b16      	ldr	r3, [pc, #88]	; (8082c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8082c16:	681a      	ldr	r2, [r3, #0]
 8082c18:	07d2      	lsls	r2, r2, #31
 8082c1a:	bf5c      	itt	pl
 8082c1c:	2201      	movpl	r2, #1
 8082c1e:	601a      	strpl	r2, [r3, #0]
 8082c20:	4b14      	ldr	r3, [pc, #80]	; (8082c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8082c22:	681a      	ldr	r2, [r3, #0]
 8082c24:	07d0      	lsls	r0, r2, #31
 8082c26:	bf5c      	itt	pl
 8082c28:	2201      	movpl	r2, #1
 8082c2a:	601a      	strpl	r2, [r3, #0]
 8082c2c:	4b12      	ldr	r3, [pc, #72]	; (8082c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8082c2e:	681a      	ldr	r2, [r3, #0]
 8082c30:	07d1      	lsls	r1, r2, #31
 8082c32:	bf5c      	itt	pl
 8082c34:	2201      	movpl	r2, #1
 8082c36:	601a      	strpl	r2, [r3, #0]
 8082c38:	4b10      	ldr	r3, [pc, #64]	; (8082c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8082c3a:	681a      	ldr	r2, [r3, #0]
 8082c3c:	07d2      	lsls	r2, r2, #31
 8082c3e:	bf5c      	itt	pl
 8082c40:	2201      	movpl	r2, #1
 8082c42:	601a      	strpl	r2, [r3, #0]
 8082c44:	4b0e      	ldr	r3, [pc, #56]	; (8082c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8082c46:	681a      	ldr	r2, [r3, #0]
 8082c48:	07d0      	lsls	r0, r2, #31
 8082c4a:	bf5c      	itt	pl
 8082c4c:	2201      	movpl	r2, #1
 8082c4e:	601a      	strpl	r2, [r3, #0]
 8082c50:	4b0c      	ldr	r3, [pc, #48]	; (8082c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8082c52:	681a      	ldr	r2, [r3, #0]
 8082c54:	07d1      	lsls	r1, r2, #31
 8082c56:	bf5c      	itt	pl
 8082c58:	2201      	movpl	r2, #1
 8082c5a:	601a      	strpl	r2, [r3, #0]
 8082c5c:	4b0a      	ldr	r3, [pc, #40]	; (8082c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8082c5e:	681a      	ldr	r2, [r3, #0]
 8082c60:	07d2      	lsls	r2, r2, #31
 8082c62:	bf5c      	itt	pl
 8082c64:	2201      	movpl	r2, #1
 8082c66:	601a      	strpl	r2, [r3, #0]
 8082c68:	4770      	bx	lr
 8082c6a:	bf00      	nop
 8082c6c:	20000cd4 	.word	0x20000cd4
 8082c70:	20000cd0 	.word	0x20000cd0
 8082c74:	20000ccc 	.word	0x20000ccc
 8082c78:	20000cc8 	.word	0x20000cc8
 8082c7c:	20000cc4 	.word	0x20000cc4
 8082c80:	20000cc0 	.word	0x20000cc0
 8082c84:	20000cbc 	.word	0x20000cbc
 8082c88:	20000cb8 	.word	0x20000cb8

08082c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8082c8c:	4b24      	ldr	r3, [pc, #144]	; (8082d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8082c8e:	681a      	ldr	r2, [r3, #0]
 8082c90:	07d0      	lsls	r0, r2, #31
 8082c92:	bf5c      	itt	pl
 8082c94:	2201      	movpl	r2, #1
 8082c96:	601a      	strpl	r2, [r3, #0]
 8082c98:	4b22      	ldr	r3, [pc, #136]	; (8082d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8082c9a:	681a      	ldr	r2, [r3, #0]
 8082c9c:	07d1      	lsls	r1, r2, #31
 8082c9e:	bf5c      	itt	pl
 8082ca0:	2201      	movpl	r2, #1
 8082ca2:	601a      	strpl	r2, [r3, #0]
 8082ca4:	4b20      	ldr	r3, [pc, #128]	; (8082d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8082ca6:	681a      	ldr	r2, [r3, #0]
 8082ca8:	07d2      	lsls	r2, r2, #31
 8082caa:	bf5c      	itt	pl
 8082cac:	2201      	movpl	r2, #1
 8082cae:	601a      	strpl	r2, [r3, #0]
 8082cb0:	4b1e      	ldr	r3, [pc, #120]	; (8082d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8082cb2:	681a      	ldr	r2, [r3, #0]
 8082cb4:	07d0      	lsls	r0, r2, #31
 8082cb6:	bf5c      	itt	pl
 8082cb8:	2201      	movpl	r2, #1
 8082cba:	601a      	strpl	r2, [r3, #0]
 8082cbc:	4b1c      	ldr	r3, [pc, #112]	; (8082d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8082cbe:	681a      	ldr	r2, [r3, #0]
 8082cc0:	07d1      	lsls	r1, r2, #31
 8082cc2:	bf5c      	itt	pl
 8082cc4:	2201      	movpl	r2, #1
 8082cc6:	601a      	strpl	r2, [r3, #0]
 8082cc8:	4b1a      	ldr	r3, [pc, #104]	; (8082d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8082cca:	681a      	ldr	r2, [r3, #0]
 8082ccc:	07d2      	lsls	r2, r2, #31
 8082cce:	bf5c      	itt	pl
 8082cd0:	2201      	movpl	r2, #1
 8082cd2:	601a      	strpl	r2, [r3, #0]
 8082cd4:	4b18      	ldr	r3, [pc, #96]	; (8082d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8082cd6:	681a      	ldr	r2, [r3, #0]
 8082cd8:	07d0      	lsls	r0, r2, #31
 8082cda:	bf5c      	itt	pl
 8082cdc:	2201      	movpl	r2, #1
 8082cde:	601a      	strpl	r2, [r3, #0]
 8082ce0:	4b16      	ldr	r3, [pc, #88]	; (8082d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8082ce2:	681a      	ldr	r2, [r3, #0]
 8082ce4:	07d1      	lsls	r1, r2, #31
 8082ce6:	bf5c      	itt	pl
 8082ce8:	2201      	movpl	r2, #1
 8082cea:	601a      	strpl	r2, [r3, #0]
 8082cec:	4b14      	ldr	r3, [pc, #80]	; (8082d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8082cee:	681a      	ldr	r2, [r3, #0]
 8082cf0:	07d2      	lsls	r2, r2, #31
 8082cf2:	bf5c      	itt	pl
 8082cf4:	2201      	movpl	r2, #1
 8082cf6:	601a      	strpl	r2, [r3, #0]
 8082cf8:	4b12      	ldr	r3, [pc, #72]	; (8082d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8082cfa:	681a      	ldr	r2, [r3, #0]
 8082cfc:	07d0      	lsls	r0, r2, #31
 8082cfe:	bf5c      	itt	pl
 8082d00:	2201      	movpl	r2, #1
 8082d02:	601a      	strpl	r2, [r3, #0]
 8082d04:	4b10      	ldr	r3, [pc, #64]	; (8082d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8082d06:	681a      	ldr	r2, [r3, #0]
 8082d08:	07d1      	lsls	r1, r2, #31
 8082d0a:	bf5c      	itt	pl
 8082d0c:	2201      	movpl	r2, #1
 8082d0e:	601a      	strpl	r2, [r3, #0]
 8082d10:	4b0e      	ldr	r3, [pc, #56]	; (8082d4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8082d12:	681a      	ldr	r2, [r3, #0]
 8082d14:	07d2      	lsls	r2, r2, #31
 8082d16:	bf5c      	itt	pl
 8082d18:	2201      	movpl	r2, #1
 8082d1a:	601a      	strpl	r2, [r3, #0]
 8082d1c:	4770      	bx	lr
 8082d1e:	bf00      	nop
 8082d20:	20000d04 	.word	0x20000d04
 8082d24:	20000d00 	.word	0x20000d00
 8082d28:	20000cfc 	.word	0x20000cfc
 8082d2c:	20000cf8 	.word	0x20000cf8
 8082d30:	20000cf4 	.word	0x20000cf4
 8082d34:	20000cf0 	.word	0x20000cf0
 8082d38:	20000cec 	.word	0x20000cec
 8082d3c:	20000ce8 	.word	0x20000ce8
 8082d40:	20000ce4 	.word	0x20000ce4
 8082d44:	20000ce0 	.word	0x20000ce0
 8082d48:	20000cdc 	.word	0x20000cdc
 8082d4c:	20000cd8 	.word	0x20000cd8

08082d50 <__aeabi_drsub>:
 8082d50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8082d54:	e002      	b.n	8082d5c <__adddf3>
 8082d56:	bf00      	nop

08082d58 <__aeabi_dsub>:
 8082d58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08082d5c <__adddf3>:
 8082d5c:	b530      	push	{r4, r5, lr}
 8082d5e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8082d62:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8082d66:	ea94 0f05 	teq	r4, r5
 8082d6a:	bf08      	it	eq
 8082d6c:	ea90 0f02 	teqeq	r0, r2
 8082d70:	bf1f      	itttt	ne
 8082d72:	ea54 0c00 	orrsne.w	ip, r4, r0
 8082d76:	ea55 0c02 	orrsne.w	ip, r5, r2
 8082d7a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8082d7e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8082d82:	f000 80e2 	beq.w	8082f4a <__adddf3+0x1ee>
 8082d86:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8082d8a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8082d8e:	bfb8      	it	lt
 8082d90:	426d      	neglt	r5, r5
 8082d92:	dd0c      	ble.n	8082dae <__adddf3+0x52>
 8082d94:	442c      	add	r4, r5
 8082d96:	ea80 0202 	eor.w	r2, r0, r2
 8082d9a:	ea81 0303 	eor.w	r3, r1, r3
 8082d9e:	ea82 0000 	eor.w	r0, r2, r0
 8082da2:	ea83 0101 	eor.w	r1, r3, r1
 8082da6:	ea80 0202 	eor.w	r2, r0, r2
 8082daa:	ea81 0303 	eor.w	r3, r1, r3
 8082dae:	2d36      	cmp	r5, #54	; 0x36
 8082db0:	bf88      	it	hi
 8082db2:	bd30      	pophi	{r4, r5, pc}
 8082db4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8082db8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8082dbc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8082dc0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8082dc4:	d002      	beq.n	8082dcc <__adddf3+0x70>
 8082dc6:	4240      	negs	r0, r0
 8082dc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8082dcc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8082dd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8082dd4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8082dd8:	d002      	beq.n	8082de0 <__adddf3+0x84>
 8082dda:	4252      	negs	r2, r2
 8082ddc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8082de0:	ea94 0f05 	teq	r4, r5
 8082de4:	f000 80a7 	beq.w	8082f36 <__adddf3+0x1da>
 8082de8:	f1a4 0401 	sub.w	r4, r4, #1
 8082dec:	f1d5 0e20 	rsbs	lr, r5, #32
 8082df0:	db0d      	blt.n	8082e0e <__adddf3+0xb2>
 8082df2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8082df6:	fa22 f205 	lsr.w	r2, r2, r5
 8082dfa:	1880      	adds	r0, r0, r2
 8082dfc:	f141 0100 	adc.w	r1, r1, #0
 8082e00:	fa03 f20e 	lsl.w	r2, r3, lr
 8082e04:	1880      	adds	r0, r0, r2
 8082e06:	fa43 f305 	asr.w	r3, r3, r5
 8082e0a:	4159      	adcs	r1, r3
 8082e0c:	e00e      	b.n	8082e2c <__adddf3+0xd0>
 8082e0e:	f1a5 0520 	sub.w	r5, r5, #32
 8082e12:	f10e 0e20 	add.w	lr, lr, #32
 8082e16:	2a01      	cmp	r2, #1
 8082e18:	fa03 fc0e 	lsl.w	ip, r3, lr
 8082e1c:	bf28      	it	cs
 8082e1e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8082e22:	fa43 f305 	asr.w	r3, r3, r5
 8082e26:	18c0      	adds	r0, r0, r3
 8082e28:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8082e2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082e30:	d507      	bpl.n	8082e42 <__adddf3+0xe6>
 8082e32:	f04f 0e00 	mov.w	lr, #0
 8082e36:	f1dc 0c00 	rsbs	ip, ip, #0
 8082e3a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8082e3e:	eb6e 0101 	sbc.w	r1, lr, r1
 8082e42:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8082e46:	d31b      	bcc.n	8082e80 <__adddf3+0x124>
 8082e48:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8082e4c:	d30c      	bcc.n	8082e68 <__adddf3+0x10c>
 8082e4e:	0849      	lsrs	r1, r1, #1
 8082e50:	ea5f 0030 	movs.w	r0, r0, rrx
 8082e54:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8082e58:	f104 0401 	add.w	r4, r4, #1
 8082e5c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8082e60:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8082e64:	f080 809a 	bcs.w	8082f9c <__adddf3+0x240>
 8082e68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8082e6c:	bf08      	it	eq
 8082e6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8082e72:	f150 0000 	adcs.w	r0, r0, #0
 8082e76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8082e7a:	ea41 0105 	orr.w	r1, r1, r5
 8082e7e:	bd30      	pop	{r4, r5, pc}
 8082e80:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8082e84:	4140      	adcs	r0, r0
 8082e86:	eb41 0101 	adc.w	r1, r1, r1
 8082e8a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082e8e:	f1a4 0401 	sub.w	r4, r4, #1
 8082e92:	d1e9      	bne.n	8082e68 <__adddf3+0x10c>
 8082e94:	f091 0f00 	teq	r1, #0
 8082e98:	bf04      	itt	eq
 8082e9a:	4601      	moveq	r1, r0
 8082e9c:	2000      	moveq	r0, #0
 8082e9e:	fab1 f381 	clz	r3, r1
 8082ea2:	bf08      	it	eq
 8082ea4:	3320      	addeq	r3, #32
 8082ea6:	f1a3 030b 	sub.w	r3, r3, #11
 8082eaa:	f1b3 0220 	subs.w	r2, r3, #32
 8082eae:	da0c      	bge.n	8082eca <__adddf3+0x16e>
 8082eb0:	320c      	adds	r2, #12
 8082eb2:	dd08      	ble.n	8082ec6 <__adddf3+0x16a>
 8082eb4:	f102 0c14 	add.w	ip, r2, #20
 8082eb8:	f1c2 020c 	rsb	r2, r2, #12
 8082ebc:	fa01 f00c 	lsl.w	r0, r1, ip
 8082ec0:	fa21 f102 	lsr.w	r1, r1, r2
 8082ec4:	e00c      	b.n	8082ee0 <__adddf3+0x184>
 8082ec6:	f102 0214 	add.w	r2, r2, #20
 8082eca:	bfd8      	it	le
 8082ecc:	f1c2 0c20 	rsble	ip, r2, #32
 8082ed0:	fa01 f102 	lsl.w	r1, r1, r2
 8082ed4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8082ed8:	bfdc      	itt	le
 8082eda:	ea41 010c 	orrle.w	r1, r1, ip
 8082ede:	4090      	lslle	r0, r2
 8082ee0:	1ae4      	subs	r4, r4, r3
 8082ee2:	bfa2      	ittt	ge
 8082ee4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8082ee8:	4329      	orrge	r1, r5
 8082eea:	bd30      	popge	{r4, r5, pc}
 8082eec:	ea6f 0404 	mvn.w	r4, r4
 8082ef0:	3c1f      	subs	r4, #31
 8082ef2:	da1c      	bge.n	8082f2e <__adddf3+0x1d2>
 8082ef4:	340c      	adds	r4, #12
 8082ef6:	dc0e      	bgt.n	8082f16 <__adddf3+0x1ba>
 8082ef8:	f104 0414 	add.w	r4, r4, #20
 8082efc:	f1c4 0220 	rsb	r2, r4, #32
 8082f00:	fa20 f004 	lsr.w	r0, r0, r4
 8082f04:	fa01 f302 	lsl.w	r3, r1, r2
 8082f08:	ea40 0003 	orr.w	r0, r0, r3
 8082f0c:	fa21 f304 	lsr.w	r3, r1, r4
 8082f10:	ea45 0103 	orr.w	r1, r5, r3
 8082f14:	bd30      	pop	{r4, r5, pc}
 8082f16:	f1c4 040c 	rsb	r4, r4, #12
 8082f1a:	f1c4 0220 	rsb	r2, r4, #32
 8082f1e:	fa20 f002 	lsr.w	r0, r0, r2
 8082f22:	fa01 f304 	lsl.w	r3, r1, r4
 8082f26:	ea40 0003 	orr.w	r0, r0, r3
 8082f2a:	4629      	mov	r1, r5
 8082f2c:	bd30      	pop	{r4, r5, pc}
 8082f2e:	fa21 f004 	lsr.w	r0, r1, r4
 8082f32:	4629      	mov	r1, r5
 8082f34:	bd30      	pop	{r4, r5, pc}
 8082f36:	f094 0f00 	teq	r4, #0
 8082f3a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8082f3e:	bf06      	itte	eq
 8082f40:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8082f44:	3401      	addeq	r4, #1
 8082f46:	3d01      	subne	r5, #1
 8082f48:	e74e      	b.n	8082de8 <__adddf3+0x8c>
 8082f4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8082f4e:	bf18      	it	ne
 8082f50:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8082f54:	d029      	beq.n	8082faa <__adddf3+0x24e>
 8082f56:	ea94 0f05 	teq	r4, r5
 8082f5a:	bf08      	it	eq
 8082f5c:	ea90 0f02 	teqeq	r0, r2
 8082f60:	d005      	beq.n	8082f6e <__adddf3+0x212>
 8082f62:	ea54 0c00 	orrs.w	ip, r4, r0
 8082f66:	bf04      	itt	eq
 8082f68:	4619      	moveq	r1, r3
 8082f6a:	4610      	moveq	r0, r2
 8082f6c:	bd30      	pop	{r4, r5, pc}
 8082f6e:	ea91 0f03 	teq	r1, r3
 8082f72:	bf1e      	ittt	ne
 8082f74:	2100      	movne	r1, #0
 8082f76:	2000      	movne	r0, #0
 8082f78:	bd30      	popne	{r4, r5, pc}
 8082f7a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8082f7e:	d105      	bne.n	8082f8c <__adddf3+0x230>
 8082f80:	0040      	lsls	r0, r0, #1
 8082f82:	4149      	adcs	r1, r1
 8082f84:	bf28      	it	cs
 8082f86:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8082f8a:	bd30      	pop	{r4, r5, pc}
 8082f8c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8082f90:	bf3c      	itt	cc
 8082f92:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8082f96:	bd30      	popcc	{r4, r5, pc}
 8082f98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082f9c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8082fa0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8082fa4:	f04f 0000 	mov.w	r0, #0
 8082fa8:	bd30      	pop	{r4, r5, pc}
 8082faa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8082fae:	bf1a      	itte	ne
 8082fb0:	4619      	movne	r1, r3
 8082fb2:	4610      	movne	r0, r2
 8082fb4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8082fb8:	bf1c      	itt	ne
 8082fba:	460b      	movne	r3, r1
 8082fbc:	4602      	movne	r2, r0
 8082fbe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8082fc2:	bf06      	itte	eq
 8082fc4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8082fc8:	ea91 0f03 	teqeq	r1, r3
 8082fcc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8082fd0:	bd30      	pop	{r4, r5, pc}
 8082fd2:	bf00      	nop

08082fd4 <__aeabi_ui2d>:
 8082fd4:	f090 0f00 	teq	r0, #0
 8082fd8:	bf04      	itt	eq
 8082fda:	2100      	moveq	r1, #0
 8082fdc:	4770      	bxeq	lr
 8082fde:	b530      	push	{r4, r5, lr}
 8082fe0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8082fe4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8082fe8:	f04f 0500 	mov.w	r5, #0
 8082fec:	f04f 0100 	mov.w	r1, #0
 8082ff0:	e750      	b.n	8082e94 <__adddf3+0x138>
 8082ff2:	bf00      	nop

08082ff4 <__aeabi_i2d>:
 8082ff4:	f090 0f00 	teq	r0, #0
 8082ff8:	bf04      	itt	eq
 8082ffa:	2100      	moveq	r1, #0
 8082ffc:	4770      	bxeq	lr
 8082ffe:	b530      	push	{r4, r5, lr}
 8083000:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083004:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083008:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808300c:	bf48      	it	mi
 808300e:	4240      	negmi	r0, r0
 8083010:	f04f 0100 	mov.w	r1, #0
 8083014:	e73e      	b.n	8082e94 <__adddf3+0x138>
 8083016:	bf00      	nop

08083018 <__aeabi_f2d>:
 8083018:	0042      	lsls	r2, r0, #1
 808301a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808301e:	ea4f 0131 	mov.w	r1, r1, rrx
 8083022:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8083026:	bf1f      	itttt	ne
 8083028:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808302c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083030:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8083034:	4770      	bxne	lr
 8083036:	f092 0f00 	teq	r2, #0
 808303a:	bf14      	ite	ne
 808303c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083040:	4770      	bxeq	lr
 8083042:	b530      	push	{r4, r5, lr}
 8083044:	f44f 7460 	mov.w	r4, #896	; 0x380
 8083048:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808304c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083050:	e720      	b.n	8082e94 <__adddf3+0x138>
 8083052:	bf00      	nop

08083054 <__aeabi_ul2d>:
 8083054:	ea50 0201 	orrs.w	r2, r0, r1
 8083058:	bf08      	it	eq
 808305a:	4770      	bxeq	lr
 808305c:	b530      	push	{r4, r5, lr}
 808305e:	f04f 0500 	mov.w	r5, #0
 8083062:	e00a      	b.n	808307a <__aeabi_l2d+0x16>

08083064 <__aeabi_l2d>:
 8083064:	ea50 0201 	orrs.w	r2, r0, r1
 8083068:	bf08      	it	eq
 808306a:	4770      	bxeq	lr
 808306c:	b530      	push	{r4, r5, lr}
 808306e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8083072:	d502      	bpl.n	808307a <__aeabi_l2d+0x16>
 8083074:	4240      	negs	r0, r0
 8083076:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808307a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808307e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083082:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8083086:	f43f aedc 	beq.w	8082e42 <__adddf3+0xe6>
 808308a:	f04f 0203 	mov.w	r2, #3
 808308e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083092:	bf18      	it	ne
 8083094:	3203      	addne	r2, #3
 8083096:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808309a:	bf18      	it	ne
 808309c:	3203      	addne	r2, #3
 808309e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80830a2:	f1c2 0320 	rsb	r3, r2, #32
 80830a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80830aa:	fa20 f002 	lsr.w	r0, r0, r2
 80830ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80830b2:	ea40 000e 	orr.w	r0, r0, lr
 80830b6:	fa21 f102 	lsr.w	r1, r1, r2
 80830ba:	4414      	add	r4, r2
 80830bc:	e6c1      	b.n	8082e42 <__adddf3+0xe6>
 80830be:	bf00      	nop

080830c0 <__aeabi_frsub>:
 80830c0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80830c4:	e002      	b.n	80830cc <__addsf3>
 80830c6:	bf00      	nop

080830c8 <__aeabi_fsub>:
 80830c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080830cc <__addsf3>:
 80830cc:	0042      	lsls	r2, r0, #1
 80830ce:	bf1f      	itttt	ne
 80830d0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80830d4:	ea92 0f03 	teqne	r2, r3
 80830d8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80830dc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80830e0:	d06a      	beq.n	80831b8 <__addsf3+0xec>
 80830e2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80830e6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80830ea:	bfc1      	itttt	gt
 80830ec:	18d2      	addgt	r2, r2, r3
 80830ee:	4041      	eorgt	r1, r0
 80830f0:	4048      	eorgt	r0, r1
 80830f2:	4041      	eorgt	r1, r0
 80830f4:	bfb8      	it	lt
 80830f6:	425b      	neglt	r3, r3
 80830f8:	2b19      	cmp	r3, #25
 80830fa:	bf88      	it	hi
 80830fc:	4770      	bxhi	lr
 80830fe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8083102:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083106:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808310a:	bf18      	it	ne
 808310c:	4240      	negne	r0, r0
 808310e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083112:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8083116:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808311a:	bf18      	it	ne
 808311c:	4249      	negne	r1, r1
 808311e:	ea92 0f03 	teq	r2, r3
 8083122:	d03f      	beq.n	80831a4 <__addsf3+0xd8>
 8083124:	f1a2 0201 	sub.w	r2, r2, #1
 8083128:	fa41 fc03 	asr.w	ip, r1, r3
 808312c:	eb10 000c 	adds.w	r0, r0, ip
 8083130:	f1c3 0320 	rsb	r3, r3, #32
 8083134:	fa01 f103 	lsl.w	r1, r1, r3
 8083138:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808313c:	d502      	bpl.n	8083144 <__addsf3+0x78>
 808313e:	4249      	negs	r1, r1
 8083140:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8083144:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8083148:	d313      	bcc.n	8083172 <__addsf3+0xa6>
 808314a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808314e:	d306      	bcc.n	808315e <__addsf3+0x92>
 8083150:	0840      	lsrs	r0, r0, #1
 8083152:	ea4f 0131 	mov.w	r1, r1, rrx
 8083156:	f102 0201 	add.w	r2, r2, #1
 808315a:	2afe      	cmp	r2, #254	; 0xfe
 808315c:	d251      	bcs.n	8083202 <__addsf3+0x136>
 808315e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8083162:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083166:	bf08      	it	eq
 8083168:	f020 0001 	biceq.w	r0, r0, #1
 808316c:	ea40 0003 	orr.w	r0, r0, r3
 8083170:	4770      	bx	lr
 8083172:	0049      	lsls	r1, r1, #1
 8083174:	eb40 0000 	adc.w	r0, r0, r0
 8083178:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 808317c:	f1a2 0201 	sub.w	r2, r2, #1
 8083180:	d1ed      	bne.n	808315e <__addsf3+0x92>
 8083182:	fab0 fc80 	clz	ip, r0
 8083186:	f1ac 0c08 	sub.w	ip, ip, #8
 808318a:	ebb2 020c 	subs.w	r2, r2, ip
 808318e:	fa00 f00c 	lsl.w	r0, r0, ip
 8083192:	bfaa      	itet	ge
 8083194:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8083198:	4252      	neglt	r2, r2
 808319a:	4318      	orrge	r0, r3
 808319c:	bfbc      	itt	lt
 808319e:	40d0      	lsrlt	r0, r2
 80831a0:	4318      	orrlt	r0, r3
 80831a2:	4770      	bx	lr
 80831a4:	f092 0f00 	teq	r2, #0
 80831a8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80831ac:	bf06      	itte	eq
 80831ae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80831b2:	3201      	addeq	r2, #1
 80831b4:	3b01      	subne	r3, #1
 80831b6:	e7b5      	b.n	8083124 <__addsf3+0x58>
 80831b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80831bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80831c0:	bf18      	it	ne
 80831c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80831c6:	d021      	beq.n	808320c <__addsf3+0x140>
 80831c8:	ea92 0f03 	teq	r2, r3
 80831cc:	d004      	beq.n	80831d8 <__addsf3+0x10c>
 80831ce:	f092 0f00 	teq	r2, #0
 80831d2:	bf08      	it	eq
 80831d4:	4608      	moveq	r0, r1
 80831d6:	4770      	bx	lr
 80831d8:	ea90 0f01 	teq	r0, r1
 80831dc:	bf1c      	itt	ne
 80831de:	2000      	movne	r0, #0
 80831e0:	4770      	bxne	lr
 80831e2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80831e6:	d104      	bne.n	80831f2 <__addsf3+0x126>
 80831e8:	0040      	lsls	r0, r0, #1
 80831ea:	bf28      	it	cs
 80831ec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80831f0:	4770      	bx	lr
 80831f2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80831f6:	bf3c      	itt	cc
 80831f8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80831fc:	4770      	bxcc	lr
 80831fe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083202:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8083206:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808320a:	4770      	bx	lr
 808320c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8083210:	bf16      	itet	ne
 8083212:	4608      	movne	r0, r1
 8083214:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8083218:	4601      	movne	r1, r0
 808321a:	0242      	lsls	r2, r0, #9
 808321c:	bf06      	itte	eq
 808321e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8083222:	ea90 0f01 	teqeq	r0, r1
 8083226:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808322a:	4770      	bx	lr

0808322c <__aeabi_ui2f>:
 808322c:	f04f 0300 	mov.w	r3, #0
 8083230:	e004      	b.n	808323c <__aeabi_i2f+0x8>
 8083232:	bf00      	nop

08083234 <__aeabi_i2f>:
 8083234:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8083238:	bf48      	it	mi
 808323a:	4240      	negmi	r0, r0
 808323c:	ea5f 0c00 	movs.w	ip, r0
 8083240:	bf08      	it	eq
 8083242:	4770      	bxeq	lr
 8083244:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8083248:	4601      	mov	r1, r0
 808324a:	f04f 0000 	mov.w	r0, #0
 808324e:	e01c      	b.n	808328a <__aeabi_l2f+0x2a>

08083250 <__aeabi_ul2f>:
 8083250:	ea50 0201 	orrs.w	r2, r0, r1
 8083254:	bf08      	it	eq
 8083256:	4770      	bxeq	lr
 8083258:	f04f 0300 	mov.w	r3, #0
 808325c:	e00a      	b.n	8083274 <__aeabi_l2f+0x14>
 808325e:	bf00      	nop

08083260 <__aeabi_l2f>:
 8083260:	ea50 0201 	orrs.w	r2, r0, r1
 8083264:	bf08      	it	eq
 8083266:	4770      	bxeq	lr
 8083268:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808326c:	d502      	bpl.n	8083274 <__aeabi_l2f+0x14>
 808326e:	4240      	negs	r0, r0
 8083270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083274:	ea5f 0c01 	movs.w	ip, r1
 8083278:	bf02      	ittt	eq
 808327a:	4684      	moveq	ip, r0
 808327c:	4601      	moveq	r1, r0
 808327e:	2000      	moveq	r0, #0
 8083280:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8083284:	bf08      	it	eq
 8083286:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808328a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808328e:	fabc f28c 	clz	r2, ip
 8083292:	3a08      	subs	r2, #8
 8083294:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8083298:	db10      	blt.n	80832bc <__aeabi_l2f+0x5c>
 808329a:	fa01 fc02 	lsl.w	ip, r1, r2
 808329e:	4463      	add	r3, ip
 80832a0:	fa00 fc02 	lsl.w	ip, r0, r2
 80832a4:	f1c2 0220 	rsb	r2, r2, #32
 80832a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80832ac:	fa20 f202 	lsr.w	r2, r0, r2
 80832b0:	eb43 0002 	adc.w	r0, r3, r2
 80832b4:	bf08      	it	eq
 80832b6:	f020 0001 	biceq.w	r0, r0, #1
 80832ba:	4770      	bx	lr
 80832bc:	f102 0220 	add.w	r2, r2, #32
 80832c0:	fa01 fc02 	lsl.w	ip, r1, r2
 80832c4:	f1c2 0220 	rsb	r2, r2, #32
 80832c8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80832cc:	fa21 f202 	lsr.w	r2, r1, r2
 80832d0:	eb43 0002 	adc.w	r0, r3, r2
 80832d4:	bf08      	it	eq
 80832d6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80832da:	4770      	bx	lr

080832dc <__aeabi_fmul>:
 80832dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80832e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80832e4:	bf1e      	ittt	ne
 80832e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80832ea:	ea92 0f0c 	teqne	r2, ip
 80832ee:	ea93 0f0c 	teqne	r3, ip
 80832f2:	d06f      	beq.n	80833d4 <__aeabi_fmul+0xf8>
 80832f4:	441a      	add	r2, r3
 80832f6:	ea80 0c01 	eor.w	ip, r0, r1
 80832fa:	0240      	lsls	r0, r0, #9
 80832fc:	bf18      	it	ne
 80832fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8083302:	d01e      	beq.n	8083342 <__aeabi_fmul+0x66>
 8083304:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8083308:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808330c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8083310:	fba0 3101 	umull	r3, r1, r0, r1
 8083314:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8083318:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808331c:	bf3e      	ittt	cc
 808331e:	0049      	lslcc	r1, r1, #1
 8083320:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8083324:	005b      	lslcc	r3, r3, #1
 8083326:	ea40 0001 	orr.w	r0, r0, r1
 808332a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808332e:	2afd      	cmp	r2, #253	; 0xfd
 8083330:	d81d      	bhi.n	808336e <__aeabi_fmul+0x92>
 8083332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8083336:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808333a:	bf08      	it	eq
 808333c:	f020 0001 	biceq.w	r0, r0, #1
 8083340:	4770      	bx	lr
 8083342:	f090 0f00 	teq	r0, #0
 8083346:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808334a:	bf08      	it	eq
 808334c:	0249      	lsleq	r1, r1, #9
 808334e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8083352:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8083356:	3a7f      	subs	r2, #127	; 0x7f
 8083358:	bfc2      	ittt	gt
 808335a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808335e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8083362:	4770      	bxgt	lr
 8083364:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083368:	f04f 0300 	mov.w	r3, #0
 808336c:	3a01      	subs	r2, #1
 808336e:	dc5d      	bgt.n	808342c <__aeabi_fmul+0x150>
 8083370:	f112 0f19 	cmn.w	r2, #25
 8083374:	bfdc      	itt	le
 8083376:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808337a:	4770      	bxle	lr
 808337c:	f1c2 0200 	rsb	r2, r2, #0
 8083380:	0041      	lsls	r1, r0, #1
 8083382:	fa21 f102 	lsr.w	r1, r1, r2
 8083386:	f1c2 0220 	rsb	r2, r2, #32
 808338a:	fa00 fc02 	lsl.w	ip, r0, r2
 808338e:	ea5f 0031 	movs.w	r0, r1, rrx
 8083392:	f140 0000 	adc.w	r0, r0, #0
 8083396:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808339a:	bf08      	it	eq
 808339c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80833a0:	4770      	bx	lr
 80833a2:	f092 0f00 	teq	r2, #0
 80833a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80833aa:	bf02      	ittt	eq
 80833ac:	0040      	lsleq	r0, r0, #1
 80833ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80833b2:	3a01      	subeq	r2, #1
 80833b4:	d0f9      	beq.n	80833aa <__aeabi_fmul+0xce>
 80833b6:	ea40 000c 	orr.w	r0, r0, ip
 80833ba:	f093 0f00 	teq	r3, #0
 80833be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80833c2:	bf02      	ittt	eq
 80833c4:	0049      	lsleq	r1, r1, #1
 80833c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80833ca:	3b01      	subeq	r3, #1
 80833cc:	d0f9      	beq.n	80833c2 <__aeabi_fmul+0xe6>
 80833ce:	ea41 010c 	orr.w	r1, r1, ip
 80833d2:	e78f      	b.n	80832f4 <__aeabi_fmul+0x18>
 80833d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80833d8:	ea92 0f0c 	teq	r2, ip
 80833dc:	bf18      	it	ne
 80833de:	ea93 0f0c 	teqne	r3, ip
 80833e2:	d00a      	beq.n	80833fa <__aeabi_fmul+0x11e>
 80833e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80833e8:	bf18      	it	ne
 80833ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80833ee:	d1d8      	bne.n	80833a2 <__aeabi_fmul+0xc6>
 80833f0:	ea80 0001 	eor.w	r0, r0, r1
 80833f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80833f8:	4770      	bx	lr
 80833fa:	f090 0f00 	teq	r0, #0
 80833fe:	bf17      	itett	ne
 8083400:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8083404:	4608      	moveq	r0, r1
 8083406:	f091 0f00 	teqne	r1, #0
 808340a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808340e:	d014      	beq.n	808343a <__aeabi_fmul+0x15e>
 8083410:	ea92 0f0c 	teq	r2, ip
 8083414:	d101      	bne.n	808341a <__aeabi_fmul+0x13e>
 8083416:	0242      	lsls	r2, r0, #9
 8083418:	d10f      	bne.n	808343a <__aeabi_fmul+0x15e>
 808341a:	ea93 0f0c 	teq	r3, ip
 808341e:	d103      	bne.n	8083428 <__aeabi_fmul+0x14c>
 8083420:	024b      	lsls	r3, r1, #9
 8083422:	bf18      	it	ne
 8083424:	4608      	movne	r0, r1
 8083426:	d108      	bne.n	808343a <__aeabi_fmul+0x15e>
 8083428:	ea80 0001 	eor.w	r0, r0, r1
 808342c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8083430:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083434:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083438:	4770      	bx	lr
 808343a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808343e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8083442:	4770      	bx	lr

08083444 <__aeabi_fdiv>:
 8083444:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083448:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808344c:	bf1e      	ittt	ne
 808344e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8083452:	ea92 0f0c 	teqne	r2, ip
 8083456:	ea93 0f0c 	teqne	r3, ip
 808345a:	d069      	beq.n	8083530 <__aeabi_fdiv+0xec>
 808345c:	eba2 0203 	sub.w	r2, r2, r3
 8083460:	ea80 0c01 	eor.w	ip, r0, r1
 8083464:	0249      	lsls	r1, r1, #9
 8083466:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808346a:	d037      	beq.n	80834dc <__aeabi_fdiv+0x98>
 808346c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8083470:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8083474:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8083478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808347c:	428b      	cmp	r3, r1
 808347e:	bf38      	it	cc
 8083480:	005b      	lslcc	r3, r3, #1
 8083482:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8083486:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808348a:	428b      	cmp	r3, r1
 808348c:	bf24      	itt	cs
 808348e:	1a5b      	subcs	r3, r3, r1
 8083490:	ea40 000c 	orrcs.w	r0, r0, ip
 8083494:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8083498:	bf24      	itt	cs
 808349a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808349e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80834a2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80834a6:	bf24      	itt	cs
 80834a8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80834ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80834b0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80834b4:	bf24      	itt	cs
 80834b6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80834ba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80834be:	011b      	lsls	r3, r3, #4
 80834c0:	bf18      	it	ne
 80834c2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80834c6:	d1e0      	bne.n	808348a <__aeabi_fdiv+0x46>
 80834c8:	2afd      	cmp	r2, #253	; 0xfd
 80834ca:	f63f af50 	bhi.w	808336e <__aeabi_fmul+0x92>
 80834ce:	428b      	cmp	r3, r1
 80834d0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80834d4:	bf08      	it	eq
 80834d6:	f020 0001 	biceq.w	r0, r0, #1
 80834da:	4770      	bx	lr
 80834dc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80834e0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80834e4:	327f      	adds	r2, #127	; 0x7f
 80834e6:	bfc2      	ittt	gt
 80834e8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80834ec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80834f0:	4770      	bxgt	lr
 80834f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80834f6:	f04f 0300 	mov.w	r3, #0
 80834fa:	3a01      	subs	r2, #1
 80834fc:	e737      	b.n	808336e <__aeabi_fmul+0x92>
 80834fe:	f092 0f00 	teq	r2, #0
 8083502:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8083506:	bf02      	ittt	eq
 8083508:	0040      	lsleq	r0, r0, #1
 808350a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808350e:	3a01      	subeq	r2, #1
 8083510:	d0f9      	beq.n	8083506 <__aeabi_fdiv+0xc2>
 8083512:	ea40 000c 	orr.w	r0, r0, ip
 8083516:	f093 0f00 	teq	r3, #0
 808351a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808351e:	bf02      	ittt	eq
 8083520:	0049      	lsleq	r1, r1, #1
 8083522:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8083526:	3b01      	subeq	r3, #1
 8083528:	d0f9      	beq.n	808351e <__aeabi_fdiv+0xda>
 808352a:	ea41 010c 	orr.w	r1, r1, ip
 808352e:	e795      	b.n	808345c <__aeabi_fdiv+0x18>
 8083530:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8083534:	ea92 0f0c 	teq	r2, ip
 8083538:	d108      	bne.n	808354c <__aeabi_fdiv+0x108>
 808353a:	0242      	lsls	r2, r0, #9
 808353c:	f47f af7d 	bne.w	808343a <__aeabi_fmul+0x15e>
 8083540:	ea93 0f0c 	teq	r3, ip
 8083544:	f47f af70 	bne.w	8083428 <__aeabi_fmul+0x14c>
 8083548:	4608      	mov	r0, r1
 808354a:	e776      	b.n	808343a <__aeabi_fmul+0x15e>
 808354c:	ea93 0f0c 	teq	r3, ip
 8083550:	d104      	bne.n	808355c <__aeabi_fdiv+0x118>
 8083552:	024b      	lsls	r3, r1, #9
 8083554:	f43f af4c 	beq.w	80833f0 <__aeabi_fmul+0x114>
 8083558:	4608      	mov	r0, r1
 808355a:	e76e      	b.n	808343a <__aeabi_fmul+0x15e>
 808355c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8083560:	bf18      	it	ne
 8083562:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8083566:	d1ca      	bne.n	80834fe <__aeabi_fdiv+0xba>
 8083568:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808356c:	f47f af5c 	bne.w	8083428 <__aeabi_fmul+0x14c>
 8083570:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8083574:	f47f af3c 	bne.w	80833f0 <__aeabi_fmul+0x114>
 8083578:	e75f      	b.n	808343a <__aeabi_fmul+0x15e>
 808357a:	bf00      	nop

0808357c <__gesf2>:
 808357c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8083580:	e006      	b.n	8083590 <__cmpsf2+0x4>
 8083582:	bf00      	nop

08083584 <__lesf2>:
 8083584:	f04f 0c01 	mov.w	ip, #1
 8083588:	e002      	b.n	8083590 <__cmpsf2+0x4>
 808358a:	bf00      	nop

0808358c <__cmpsf2>:
 808358c:	f04f 0c01 	mov.w	ip, #1
 8083590:	f84d cd04 	str.w	ip, [sp, #-4]!
 8083594:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8083598:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808359c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80835a0:	bf18      	it	ne
 80835a2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80835a6:	d011      	beq.n	80835cc <__cmpsf2+0x40>
 80835a8:	b001      	add	sp, #4
 80835aa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80835ae:	bf18      	it	ne
 80835b0:	ea90 0f01 	teqne	r0, r1
 80835b4:	bf58      	it	pl
 80835b6:	ebb2 0003 	subspl.w	r0, r2, r3
 80835ba:	bf88      	it	hi
 80835bc:	17c8      	asrhi	r0, r1, #31
 80835be:	bf38      	it	cc
 80835c0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80835c4:	bf18      	it	ne
 80835c6:	f040 0001 	orrne.w	r0, r0, #1
 80835ca:	4770      	bx	lr
 80835cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80835d0:	d102      	bne.n	80835d8 <__cmpsf2+0x4c>
 80835d2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80835d6:	d105      	bne.n	80835e4 <__cmpsf2+0x58>
 80835d8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80835dc:	d1e4      	bne.n	80835a8 <__cmpsf2+0x1c>
 80835de:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80835e2:	d0e1      	beq.n	80835a8 <__cmpsf2+0x1c>
 80835e4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80835e8:	4770      	bx	lr
 80835ea:	bf00      	nop

080835ec <__aeabi_cfrcmple>:
 80835ec:	4684      	mov	ip, r0
 80835ee:	4608      	mov	r0, r1
 80835f0:	4661      	mov	r1, ip
 80835f2:	e7ff      	b.n	80835f4 <__aeabi_cfcmpeq>

080835f4 <__aeabi_cfcmpeq>:
 80835f4:	b50f      	push	{r0, r1, r2, r3, lr}
 80835f6:	f7ff ffc9 	bl	808358c <__cmpsf2>
 80835fa:	2800      	cmp	r0, #0
 80835fc:	bf48      	it	mi
 80835fe:	f110 0f00 	cmnmi.w	r0, #0
 8083602:	bd0f      	pop	{r0, r1, r2, r3, pc}

08083604 <__aeabi_fcmpeq>:
 8083604:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083608:	f7ff fff4 	bl	80835f4 <__aeabi_cfcmpeq>
 808360c:	bf0c      	ite	eq
 808360e:	2001      	moveq	r0, #1
 8083610:	2000      	movne	r0, #0
 8083612:	f85d fb08 	ldr.w	pc, [sp], #8
 8083616:	bf00      	nop

08083618 <__aeabi_fcmplt>:
 8083618:	f84d ed08 	str.w	lr, [sp, #-8]!
 808361c:	f7ff ffea 	bl	80835f4 <__aeabi_cfcmpeq>
 8083620:	bf34      	ite	cc
 8083622:	2001      	movcc	r0, #1
 8083624:	2000      	movcs	r0, #0
 8083626:	f85d fb08 	ldr.w	pc, [sp], #8
 808362a:	bf00      	nop

0808362c <__aeabi_fcmple>:
 808362c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083630:	f7ff ffe0 	bl	80835f4 <__aeabi_cfcmpeq>
 8083634:	bf94      	ite	ls
 8083636:	2001      	movls	r0, #1
 8083638:	2000      	movhi	r0, #0
 808363a:	f85d fb08 	ldr.w	pc, [sp], #8
 808363e:	bf00      	nop

08083640 <__aeabi_fcmpge>:
 8083640:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083644:	f7ff ffd2 	bl	80835ec <__aeabi_cfrcmple>
 8083648:	bf94      	ite	ls
 808364a:	2001      	movls	r0, #1
 808364c:	2000      	movhi	r0, #0
 808364e:	f85d fb08 	ldr.w	pc, [sp], #8
 8083652:	bf00      	nop

08083654 <__aeabi_fcmpgt>:
 8083654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083658:	f7ff ffc8 	bl	80835ec <__aeabi_cfrcmple>
 808365c:	bf34      	ite	cc
 808365e:	2001      	movcc	r0, #1
 8083660:	2000      	movcs	r0, #0
 8083662:	f85d fb08 	ldr.w	pc, [sp], #8
 8083666:	bf00      	nop

08083668 <__aeabi_f2iz>:
 8083668:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808366c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8083670:	d30f      	bcc.n	8083692 <__aeabi_f2iz+0x2a>
 8083672:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8083676:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808367a:	d90d      	bls.n	8083698 <__aeabi_f2iz+0x30>
 808367c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8083680:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8083684:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8083688:	fa23 f002 	lsr.w	r0, r3, r2
 808368c:	bf18      	it	ne
 808368e:	4240      	negne	r0, r0
 8083690:	4770      	bx	lr
 8083692:	f04f 0000 	mov.w	r0, #0
 8083696:	4770      	bx	lr
 8083698:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808369c:	d101      	bne.n	80836a2 <__aeabi_f2iz+0x3a>
 808369e:	0242      	lsls	r2, r0, #9
 80836a0:	d105      	bne.n	80836ae <__aeabi_f2iz+0x46>
 80836a2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80836a6:	bf08      	it	eq
 80836a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80836ac:	4770      	bx	lr
 80836ae:	f04f 0000 	mov.w	r0, #0
 80836b2:	4770      	bx	lr

080836b4 <asctime>:
 80836b4:	4b09      	ldr	r3, [pc, #36]	; (80836dc <asctime+0x28>)
 80836b6:	b570      	push	{r4, r5, r6, lr}
 80836b8:	681c      	ldr	r4, [r3, #0]
 80836ba:	4606      	mov	r6, r0
 80836bc:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80836be:	b93d      	cbnz	r5, 80836d0 <asctime+0x1c>
 80836c0:	201a      	movs	r0, #26
 80836c2:	f7fd ff95 	bl	80815f0 <malloc>
 80836c6:	221a      	movs	r2, #26
 80836c8:	6420      	str	r0, [r4, #64]	; 0x40
 80836ca:	4629      	mov	r1, r5
 80836cc:	f000 f943 	bl	8083956 <memset>
 80836d0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80836d2:	4630      	mov	r0, r6
 80836d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80836d8:	f000 b802 	b.w	80836e0 <asctime_r>
 80836dc:	20000504 	.word	0x20000504

080836e0 <asctime_r>:
 80836e0:	b510      	push	{r4, lr}
 80836e2:	460c      	mov	r4, r1
 80836e4:	6941      	ldr	r1, [r0, #20]
 80836e6:	b086      	sub	sp, #24
 80836e8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80836ec:	6903      	ldr	r3, [r0, #16]
 80836ee:	6982      	ldr	r2, [r0, #24]
 80836f0:	9104      	str	r1, [sp, #16]
 80836f2:	6801      	ldr	r1, [r0, #0]
 80836f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80836f8:	9103      	str	r1, [sp, #12]
 80836fa:	6841      	ldr	r1, [r0, #4]
 80836fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8083700:	9102      	str	r1, [sp, #8]
 8083702:	6881      	ldr	r1, [r0, #8]
 8083704:	9101      	str	r1, [sp, #4]
 8083706:	68c1      	ldr	r1, [r0, #12]
 8083708:	4620      	mov	r0, r4
 808370a:	9100      	str	r1, [sp, #0]
 808370c:	4904      	ldr	r1, [pc, #16]	; (8083720 <asctime_r+0x40>)
 808370e:	440b      	add	r3, r1
 8083710:	4904      	ldr	r1, [pc, #16]	; (8083724 <asctime_r+0x44>)
 8083712:	440a      	add	r2, r1
 8083714:	4904      	ldr	r1, [pc, #16]	; (8083728 <asctime_r+0x48>)
 8083716:	f7fd ff83 	bl	8081620 <siprintf>
 808371a:	4620      	mov	r0, r4
 808371c:	b006      	add	sp, #24
 808371e:	bd10      	pop	{r4, pc}
 8083720:	08084a3d 	.word	0x08084a3d
 8083724:	08084a28 	.word	0x08084a28
 8083728:	08084a61 	.word	0x08084a61

0808372c <atoi>:
 808372c:	220a      	movs	r2, #10
 808372e:	2100      	movs	r1, #0
 8083730:	f000 ba60 	b.w	8083bf4 <strtol>

08083734 <__cxa_atexit>:
 8083734:	b510      	push	{r4, lr}
 8083736:	4c05      	ldr	r4, [pc, #20]	; (808374c <__cxa_atexit+0x18>)
 8083738:	4613      	mov	r3, r2
 808373a:	b12c      	cbz	r4, 8083748 <__cxa_atexit+0x14>
 808373c:	460a      	mov	r2, r1
 808373e:	4601      	mov	r1, r0
 8083740:	2002      	movs	r0, #2
 8083742:	f3af 8000 	nop.w
 8083746:	bd10      	pop	{r4, pc}
 8083748:	4620      	mov	r0, r4
 808374a:	bd10      	pop	{r4, pc}
 808374c:	00000000 	.word	0x00000000

08083750 <localtime>:
 8083750:	b538      	push	{r3, r4, r5, lr}
 8083752:	4b07      	ldr	r3, [pc, #28]	; (8083770 <localtime+0x20>)
 8083754:	4605      	mov	r5, r0
 8083756:	681c      	ldr	r4, [r3, #0]
 8083758:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808375a:	b91b      	cbnz	r3, 8083764 <localtime+0x14>
 808375c:	2024      	movs	r0, #36	; 0x24
 808375e:	f7fd ff47 	bl	80815f0 <malloc>
 8083762:	63e0      	str	r0, [r4, #60]	; 0x3c
 8083764:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8083766:	4628      	mov	r0, r5
 8083768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808376c:	f000 b802 	b.w	8083774 <localtime_r>
 8083770:	20000504 	.word	0x20000504

08083774 <localtime_r>:
 8083774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083778:	460c      	mov	r4, r1
 808377a:	4680      	mov	r8, r0
 808377c:	f000 fd40 	bl	8084200 <__gettzinfo>
 8083780:	4621      	mov	r1, r4
 8083782:	4607      	mov	r7, r0
 8083784:	4640      	mov	r0, r8
 8083786:	f000 fd3f 	bl	8084208 <gmtime_r>
 808378a:	6946      	ldr	r6, [r0, #20]
 808378c:	4604      	mov	r4, r0
 808378e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8083792:	07b3      	lsls	r3, r6, #30
 8083794:	d105      	bne.n	80837a2 <localtime_r+0x2e>
 8083796:	2264      	movs	r2, #100	; 0x64
 8083798:	fb96 f3f2 	sdiv	r3, r6, r2
 808379c:	fb02 6313 	mls	r3, r2, r3, r6
 80837a0:	b94b      	cbnz	r3, 80837b6 <localtime_r+0x42>
 80837a2:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80837a6:	fb96 f3f5 	sdiv	r3, r6, r5
 80837aa:	fb05 6513 	mls	r5, r5, r3, r6
 80837ae:	fab5 f385 	clz	r3, r5
 80837b2:	095b      	lsrs	r3, r3, #5
 80837b4:	e000      	b.n	80837b8 <localtime_r+0x44>
 80837b6:	2301      	movs	r3, #1
 80837b8:	4a5f      	ldr	r2, [pc, #380]	; (8083938 <localtime_r+0x1c4>)
 80837ba:	2530      	movs	r5, #48	; 0x30
 80837bc:	fb05 2503 	mla	r5, r5, r3, r2
 80837c0:	f000 fb52 	bl	8083e68 <__tz_lock>
 80837c4:	f000 fb52 	bl	8083e6c <_tzset_unlocked>
 80837c8:	4b5c      	ldr	r3, [pc, #368]	; (808393c <localtime_r+0x1c8>)
 80837ca:	681b      	ldr	r3, [r3, #0]
 80837cc:	b1f3      	cbz	r3, 808380c <localtime_r+0x98>
 80837ce:	687b      	ldr	r3, [r7, #4]
 80837d0:	429e      	cmp	r6, r3
 80837d2:	d105      	bne.n	80837e0 <localtime_r+0x6c>
 80837d4:	6839      	ldr	r1, [r7, #0]
 80837d6:	f8d8 3000 	ldr.w	r3, [r8]
 80837da:	69fa      	ldr	r2, [r7, #28]
 80837dc:	b941      	cbnz	r1, 80837f0 <localtime_r+0x7c>
 80837de:	e00a      	b.n	80837f6 <localtime_r+0x82>
 80837e0:	4630      	mov	r0, r6
 80837e2:	f000 fa99 	bl	8083d18 <__tzcalc_limits>
 80837e6:	2800      	cmp	r0, #0
 80837e8:	d1f4      	bne.n	80837d4 <localtime_r+0x60>
 80837ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80837ee:	e00d      	b.n	808380c <localtime_r+0x98>
 80837f0:	4293      	cmp	r3, r2
 80837f2:	db08      	blt.n	8083806 <localtime_r+0x92>
 80837f4:	e001      	b.n	80837fa <localtime_r+0x86>
 80837f6:	4293      	cmp	r3, r2
 80837f8:	da07      	bge.n	808380a <localtime_r+0x96>
 80837fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80837fc:	4293      	cmp	r3, r2
 80837fe:	bfac      	ite	ge
 8083800:	2300      	movge	r3, #0
 8083802:	2301      	movlt	r3, #1
 8083804:	e002      	b.n	808380c <localtime_r+0x98>
 8083806:	2300      	movs	r3, #0
 8083808:	e000      	b.n	808380c <localtime_r+0x98>
 808380a:	2301      	movs	r3, #1
 808380c:	6223      	str	r3, [r4, #32]
 808380e:	6a23      	ldr	r3, [r4, #32]
 8083810:	203c      	movs	r0, #60	; 0x3c
 8083812:	2b01      	cmp	r3, #1
 8083814:	bf0c      	ite	eq
 8083816:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8083818:	6a39      	ldrne	r1, [r7, #32]
 808381a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808381e:	fb91 f6f3 	sdiv	r6, r1, r3
 8083822:	fb03 1316 	mls	r3, r3, r6, r1
 8083826:	fb93 f2f0 	sdiv	r2, r3, r0
 808382a:	fb00 3012 	mls	r0, r0, r2, r3
 808382e:	6861      	ldr	r1, [r4, #4]
 8083830:	6823      	ldr	r3, [r4, #0]
 8083832:	1a89      	subs	r1, r1, r2
 8083834:	68a2      	ldr	r2, [r4, #8]
 8083836:	1a1b      	subs	r3, r3, r0
 8083838:	1b92      	subs	r2, r2, r6
 808383a:	2b3b      	cmp	r3, #59	; 0x3b
 808383c:	6023      	str	r3, [r4, #0]
 808383e:	6061      	str	r1, [r4, #4]
 8083840:	60a2      	str	r2, [r4, #8]
 8083842:	dd03      	ble.n	808384c <localtime_r+0xd8>
 8083844:	3101      	adds	r1, #1
 8083846:	6061      	str	r1, [r4, #4]
 8083848:	3b3c      	subs	r3, #60	; 0x3c
 808384a:	e004      	b.n	8083856 <localtime_r+0xe2>
 808384c:	2b00      	cmp	r3, #0
 808384e:	da03      	bge.n	8083858 <localtime_r+0xe4>
 8083850:	3901      	subs	r1, #1
 8083852:	6061      	str	r1, [r4, #4]
 8083854:	333c      	adds	r3, #60	; 0x3c
 8083856:	6023      	str	r3, [r4, #0]
 8083858:	6863      	ldr	r3, [r4, #4]
 808385a:	2b3b      	cmp	r3, #59	; 0x3b
 808385c:	dd03      	ble.n	8083866 <localtime_r+0xf2>
 808385e:	3201      	adds	r2, #1
 8083860:	60a2      	str	r2, [r4, #8]
 8083862:	3b3c      	subs	r3, #60	; 0x3c
 8083864:	e004      	b.n	8083870 <localtime_r+0xfc>
 8083866:	2b00      	cmp	r3, #0
 8083868:	da03      	bge.n	8083872 <localtime_r+0xfe>
 808386a:	3a01      	subs	r2, #1
 808386c:	60a2      	str	r2, [r4, #8]
 808386e:	333c      	adds	r3, #60	; 0x3c
 8083870:	6063      	str	r3, [r4, #4]
 8083872:	68a3      	ldr	r3, [r4, #8]
 8083874:	2b17      	cmp	r3, #23
 8083876:	dd22      	ble.n	80838be <localtime_r+0x14a>
 8083878:	69e2      	ldr	r2, [r4, #28]
 808387a:	3b18      	subs	r3, #24
 808387c:	3201      	adds	r2, #1
 808387e:	61e2      	str	r2, [r4, #28]
 8083880:	69a2      	ldr	r2, [r4, #24]
 8083882:	60a3      	str	r3, [r4, #8]
 8083884:	3201      	adds	r2, #1
 8083886:	2a06      	cmp	r2, #6
 8083888:	bfc8      	it	gt
 808388a:	2200      	movgt	r2, #0
 808388c:	61a2      	str	r2, [r4, #24]
 808388e:	68e2      	ldr	r2, [r4, #12]
 8083890:	6923      	ldr	r3, [r4, #16]
 8083892:	3201      	adds	r2, #1
 8083894:	60e2      	str	r2, [r4, #12]
 8083896:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808389a:	428a      	cmp	r2, r1
 808389c:	dd46      	ble.n	808392c <localtime_r+0x1b8>
 808389e:	3301      	adds	r3, #1
 80838a0:	2b0c      	cmp	r3, #12
 80838a2:	bf08      	it	eq
 80838a4:	6963      	ldreq	r3, [r4, #20]
 80838a6:	eba2 0201 	sub.w	r2, r2, r1
 80838aa:	60e2      	str	r2, [r4, #12]
 80838ac:	bf05      	ittet	eq
 80838ae:	3301      	addeq	r3, #1
 80838b0:	2200      	moveq	r2, #0
 80838b2:	6123      	strne	r3, [r4, #16]
 80838b4:	6122      	streq	r2, [r4, #16]
 80838b6:	bf04      	itt	eq
 80838b8:	6163      	streq	r3, [r4, #20]
 80838ba:	61e2      	streq	r2, [r4, #28]
 80838bc:	e036      	b.n	808392c <localtime_r+0x1b8>
 80838be:	2b00      	cmp	r3, #0
 80838c0:	da34      	bge.n	808392c <localtime_r+0x1b8>
 80838c2:	69e2      	ldr	r2, [r4, #28]
 80838c4:	3318      	adds	r3, #24
 80838c6:	3a01      	subs	r2, #1
 80838c8:	61e2      	str	r2, [r4, #28]
 80838ca:	69a2      	ldr	r2, [r4, #24]
 80838cc:	60a3      	str	r3, [r4, #8]
 80838ce:	3a01      	subs	r2, #1
 80838d0:	bf48      	it	mi
 80838d2:	2206      	movmi	r2, #6
 80838d4:	61a2      	str	r2, [r4, #24]
 80838d6:	68e2      	ldr	r2, [r4, #12]
 80838d8:	3a01      	subs	r2, #1
 80838da:	60e2      	str	r2, [r4, #12]
 80838dc:	bb32      	cbnz	r2, 808392c <localtime_r+0x1b8>
 80838de:	6923      	ldr	r3, [r4, #16]
 80838e0:	3b01      	subs	r3, #1
 80838e2:	d401      	bmi.n	80838e8 <localtime_r+0x174>
 80838e4:	6123      	str	r3, [r4, #16]
 80838e6:	e01d      	b.n	8083924 <localtime_r+0x1b0>
 80838e8:	230b      	movs	r3, #11
 80838ea:	6123      	str	r3, [r4, #16]
 80838ec:	6963      	ldr	r3, [r4, #20]
 80838ee:	1e5a      	subs	r2, r3, #1
 80838f0:	f012 0f03 	tst.w	r2, #3
 80838f4:	6162      	str	r2, [r4, #20]
 80838f6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80838fa:	d105      	bne.n	8083908 <localtime_r+0x194>
 80838fc:	2164      	movs	r1, #100	; 0x64
 80838fe:	fb93 f2f1 	sdiv	r2, r3, r1
 8083902:	fb01 3212 	mls	r2, r1, r2, r3
 8083906:	b94a      	cbnz	r2, 808391c <localtime_r+0x1a8>
 8083908:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808390c:	fb93 f2f1 	sdiv	r2, r3, r1
 8083910:	fb01 3312 	mls	r3, r1, r2, r3
 8083914:	fab3 f383 	clz	r3, r3
 8083918:	095b      	lsrs	r3, r3, #5
 808391a:	e000      	b.n	808391e <localtime_r+0x1aa>
 808391c:	2301      	movs	r3, #1
 808391e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8083922:	61e3      	str	r3, [r4, #28]
 8083924:	6923      	ldr	r3, [r4, #16]
 8083926:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808392a:	60e3      	str	r3, [r4, #12]
 808392c:	f000 fa9d 	bl	8083e6a <__tz_unlock>
 8083930:	4620      	mov	r0, r4
 8083932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8083936:	bf00      	nop
 8083938:	08084be4 	.word	0x08084be4
 808393c:	20000d24 	.word	0x20000d24

08083940 <memcpy>:
 8083940:	b510      	push	{r4, lr}
 8083942:	1e43      	subs	r3, r0, #1
 8083944:	440a      	add	r2, r1
 8083946:	4291      	cmp	r1, r2
 8083948:	d004      	beq.n	8083954 <memcpy+0x14>
 808394a:	f811 4b01 	ldrb.w	r4, [r1], #1
 808394e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8083952:	e7f8      	b.n	8083946 <memcpy+0x6>
 8083954:	bd10      	pop	{r4, pc}

08083956 <memset>:
 8083956:	4603      	mov	r3, r0
 8083958:	4402      	add	r2, r0
 808395a:	4293      	cmp	r3, r2
 808395c:	d002      	beq.n	8083964 <memset+0xe>
 808395e:	f803 1b01 	strb.w	r1, [r3], #1
 8083962:	e7fa      	b.n	808395a <memset+0x4>
 8083964:	4770      	bx	lr
	...

08083968 <srand>:
 8083968:	b538      	push	{r3, r4, r5, lr}
 808396a:	4b12      	ldr	r3, [pc, #72]	; (80839b4 <srand+0x4c>)
 808396c:	4605      	mov	r5, r0
 808396e:	681c      	ldr	r4, [r3, #0]
 8083970:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8083972:	b9d3      	cbnz	r3, 80839aa <srand+0x42>
 8083974:	2018      	movs	r0, #24
 8083976:	f7fd fe3b 	bl	80815f0 <malloc>
 808397a:	f243 330e 	movw	r3, #13070	; 0x330e
 808397e:	63a0      	str	r0, [r4, #56]	; 0x38
 8083980:	8003      	strh	r3, [r0, #0]
 8083982:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8083986:	8043      	strh	r3, [r0, #2]
 8083988:	f241 2334 	movw	r3, #4660	; 0x1234
 808398c:	8083      	strh	r3, [r0, #4]
 808398e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8083992:	80c3      	strh	r3, [r0, #6]
 8083994:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8083998:	8103      	strh	r3, [r0, #8]
 808399a:	2305      	movs	r3, #5
 808399c:	8143      	strh	r3, [r0, #10]
 808399e:	230b      	movs	r3, #11
 80839a0:	8183      	strh	r3, [r0, #12]
 80839a2:	2201      	movs	r2, #1
 80839a4:	2300      	movs	r3, #0
 80839a6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80839aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80839ac:	2200      	movs	r2, #0
 80839ae:	611d      	str	r5, [r3, #16]
 80839b0:	615a      	str	r2, [r3, #20]
 80839b2:	bd38      	pop	{r3, r4, r5, pc}
 80839b4:	20000504 	.word	0x20000504

080839b8 <rand>:
 80839b8:	4b19      	ldr	r3, [pc, #100]	; (8083a20 <rand+0x68>)
 80839ba:	b510      	push	{r4, lr}
 80839bc:	681c      	ldr	r4, [r3, #0]
 80839be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80839c0:	b9d3      	cbnz	r3, 80839f8 <rand+0x40>
 80839c2:	2018      	movs	r0, #24
 80839c4:	f7fd fe14 	bl	80815f0 <malloc>
 80839c8:	f243 330e 	movw	r3, #13070	; 0x330e
 80839cc:	63a0      	str	r0, [r4, #56]	; 0x38
 80839ce:	8003      	strh	r3, [r0, #0]
 80839d0:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80839d4:	8043      	strh	r3, [r0, #2]
 80839d6:	f241 2334 	movw	r3, #4660	; 0x1234
 80839da:	8083      	strh	r3, [r0, #4]
 80839dc:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80839e0:	80c3      	strh	r3, [r0, #6]
 80839e2:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80839e6:	8103      	strh	r3, [r0, #8]
 80839e8:	2305      	movs	r3, #5
 80839ea:	8143      	strh	r3, [r0, #10]
 80839ec:	230b      	movs	r3, #11
 80839ee:	8183      	strh	r3, [r0, #12]
 80839f0:	2201      	movs	r2, #1
 80839f2:	2300      	movs	r3, #0
 80839f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80839f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80839fa:	4c0a      	ldr	r4, [pc, #40]	; (8083a24 <rand+0x6c>)
 80839fc:	690b      	ldr	r3, [r1, #16]
 80839fe:	6948      	ldr	r0, [r1, #20]
 8083a00:	435c      	muls	r4, r3
 8083a02:	4a09      	ldr	r2, [pc, #36]	; (8083a28 <rand+0x70>)
 8083a04:	fb02 4000 	mla	r0, r2, r0, r4
 8083a08:	fba3 2302 	umull	r2, r3, r3, r2
 8083a0c:	3201      	adds	r2, #1
 8083a0e:	4403      	add	r3, r0
 8083a10:	f143 0300 	adc.w	r3, r3, #0
 8083a14:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8083a18:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8083a1c:	bd10      	pop	{r4, pc}
 8083a1e:	bf00      	nop
 8083a20:	20000504 	.word	0x20000504
 8083a24:	5851f42d 	.word	0x5851f42d
 8083a28:	4c957f2d 	.word	0x4c957f2d

08083a2c <strcmp>:
 8083a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8083a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8083a34:	2a01      	cmp	r2, #1
 8083a36:	bf28      	it	cs
 8083a38:	429a      	cmpcs	r2, r3
 8083a3a:	d0f7      	beq.n	8083a2c <strcmp>
 8083a3c:	1ad0      	subs	r0, r2, r3
 8083a3e:	4770      	bx	lr

08083a40 <strcpy>:
 8083a40:	4603      	mov	r3, r0
 8083a42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8083a46:	f803 2b01 	strb.w	r2, [r3], #1
 8083a4a:	2a00      	cmp	r2, #0
 8083a4c:	d1f9      	bne.n	8083a42 <strcpy+0x2>
 8083a4e:	4770      	bx	lr

08083a50 <strdup>:
 8083a50:	4b02      	ldr	r3, [pc, #8]	; (8083a5c <strdup+0xc>)
 8083a52:	4601      	mov	r1, r0
 8083a54:	6818      	ldr	r0, [r3, #0]
 8083a56:	f000 b803 	b.w	8083a60 <_strdup_r>
 8083a5a:	bf00      	nop
 8083a5c:	20000504 	.word	0x20000504

08083a60 <_strdup_r>:
 8083a60:	b570      	push	{r4, r5, r6, lr}
 8083a62:	4606      	mov	r6, r0
 8083a64:	4608      	mov	r0, r1
 8083a66:	460c      	mov	r4, r1
 8083a68:	f000 f80d 	bl	8083a86 <strlen>
 8083a6c:	1c45      	adds	r5, r0, #1
 8083a6e:	4629      	mov	r1, r5
 8083a70:	4630      	mov	r0, r6
 8083a72:	f7fd fdf5 	bl	8081660 <_malloc_r>
 8083a76:	4606      	mov	r6, r0
 8083a78:	b118      	cbz	r0, 8083a82 <_strdup_r+0x22>
 8083a7a:	462a      	mov	r2, r5
 8083a7c:	4621      	mov	r1, r4
 8083a7e:	f7ff ff5f 	bl	8083940 <memcpy>
 8083a82:	4630      	mov	r0, r6
 8083a84:	bd70      	pop	{r4, r5, r6, pc}

08083a86 <strlen>:
 8083a86:	4603      	mov	r3, r0
 8083a88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8083a8c:	2a00      	cmp	r2, #0
 8083a8e:	d1fb      	bne.n	8083a88 <strlen+0x2>
 8083a90:	1a18      	subs	r0, r3, r0
 8083a92:	3801      	subs	r0, #1
 8083a94:	4770      	bx	lr

08083a96 <strncmp>:
 8083a96:	b530      	push	{r4, r5, lr}
 8083a98:	b182      	cbz	r2, 8083abc <strncmp+0x26>
 8083a9a:	1e45      	subs	r5, r0, #1
 8083a9c:	3901      	subs	r1, #1
 8083a9e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8083aa2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8083aa6:	42a3      	cmp	r3, r4
 8083aa8:	d106      	bne.n	8083ab8 <strncmp+0x22>
 8083aaa:	43ec      	mvns	r4, r5
 8083aac:	4414      	add	r4, r2
 8083aae:	42e0      	cmn	r0, r4
 8083ab0:	d001      	beq.n	8083ab6 <strncmp+0x20>
 8083ab2:	2b00      	cmp	r3, #0
 8083ab4:	d1f3      	bne.n	8083a9e <strncmp+0x8>
 8083ab6:	461c      	mov	r4, r3
 8083ab8:	1b18      	subs	r0, r3, r4
 8083aba:	bd30      	pop	{r4, r5, pc}
 8083abc:	4610      	mov	r0, r2
 8083abe:	bd30      	pop	{r4, r5, pc}

08083ac0 <strncpy>:
 8083ac0:	4603      	mov	r3, r0
 8083ac2:	b510      	push	{r4, lr}
 8083ac4:	b142      	cbz	r2, 8083ad8 <strncpy+0x18>
 8083ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8083aca:	3a01      	subs	r2, #1
 8083acc:	f803 4b01 	strb.w	r4, [r3], #1
 8083ad0:	2c00      	cmp	r4, #0
 8083ad2:	d1f7      	bne.n	8083ac4 <strncpy+0x4>
 8083ad4:	441a      	add	r2, r3
 8083ad6:	e000      	b.n	8083ada <strncpy+0x1a>
 8083ad8:	bd10      	pop	{r4, pc}
 8083ada:	4293      	cmp	r3, r2
 8083adc:	d002      	beq.n	8083ae4 <strncpy+0x24>
 8083ade:	f803 4b01 	strb.w	r4, [r3], #1
 8083ae2:	e7fa      	b.n	8083ada <strncpy+0x1a>
 8083ae4:	bd10      	pop	{r4, pc}
	...

08083ae8 <_strtol_r>:
 8083ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8083aec:	460f      	mov	r7, r1
 8083aee:	4680      	mov	r8, r0
 8083af0:	483f      	ldr	r0, [pc, #252]	; (8083bf0 <_strtol_r+0x108>)
 8083af2:	f8d0 9000 	ldr.w	r9, [r0]
 8083af6:	463d      	mov	r5, r7
 8083af8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8083afc:	eb09 0004 	add.w	r0, r9, r4
 8083b00:	7840      	ldrb	r0, [r0, #1]
 8083b02:	f000 0008 	and.w	r0, r0, #8
 8083b06:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8083b0a:	b108      	cbz	r0, 8083b10 <_strtol_r+0x28>
 8083b0c:	462f      	mov	r7, r5
 8083b0e:	e7f2      	b.n	8083af6 <_strtol_r+0xe>
 8083b10:	2c2d      	cmp	r4, #45	; 0x2d
 8083b12:	d103      	bne.n	8083b1c <_strtol_r+0x34>
 8083b14:	1cbd      	adds	r5, r7, #2
 8083b16:	787c      	ldrb	r4, [r7, #1]
 8083b18:	2601      	movs	r6, #1
 8083b1a:	e003      	b.n	8083b24 <_strtol_r+0x3c>
 8083b1c:	2c2b      	cmp	r4, #43	; 0x2b
 8083b1e:	bf04      	itt	eq
 8083b20:	787c      	ldrbeq	r4, [r7, #1]
 8083b22:	1cbd      	addeq	r5, r7, #2
 8083b24:	b113      	cbz	r3, 8083b2c <_strtol_r+0x44>
 8083b26:	2b10      	cmp	r3, #16
 8083b28:	d10a      	bne.n	8083b40 <_strtol_r+0x58>
 8083b2a:	e05b      	b.n	8083be4 <_strtol_r+0xfc>
 8083b2c:	2c30      	cmp	r4, #48	; 0x30
 8083b2e:	d157      	bne.n	8083be0 <_strtol_r+0xf8>
 8083b30:	7828      	ldrb	r0, [r5, #0]
 8083b32:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8083b36:	2858      	cmp	r0, #88	; 0x58
 8083b38:	d14d      	bne.n	8083bd6 <_strtol_r+0xee>
 8083b3a:	786c      	ldrb	r4, [r5, #1]
 8083b3c:	2310      	movs	r3, #16
 8083b3e:	3502      	adds	r5, #2
 8083b40:	2e00      	cmp	r6, #0
 8083b42:	bf14      	ite	ne
 8083b44:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8083b48:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8083b4c:	fbbc faf3 	udiv	sl, ip, r3
 8083b50:	2700      	movs	r7, #0
 8083b52:	4638      	mov	r0, r7
 8083b54:	fb03 cc1a 	mls	ip, r3, sl, ip
 8083b58:	eb09 0e04 	add.w	lr, r9, r4
 8083b5c:	f89e e001 	ldrb.w	lr, [lr, #1]
 8083b60:	f01e 0f04 	tst.w	lr, #4
 8083b64:	d001      	beq.n	8083b6a <_strtol_r+0x82>
 8083b66:	3c30      	subs	r4, #48	; 0x30
 8083b68:	e00b      	b.n	8083b82 <_strtol_r+0x9a>
 8083b6a:	f01e 0e03 	ands.w	lr, lr, #3
 8083b6e:	d01b      	beq.n	8083ba8 <_strtol_r+0xc0>
 8083b70:	f1be 0f01 	cmp.w	lr, #1
 8083b74:	bf0c      	ite	eq
 8083b76:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8083b7a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8083b7e:	ebce 0404 	rsb	r4, lr, r4
 8083b82:	42a3      	cmp	r3, r4
 8083b84:	dd10      	ble.n	8083ba8 <_strtol_r+0xc0>
 8083b86:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8083b8a:	d00a      	beq.n	8083ba2 <_strtol_r+0xba>
 8083b8c:	4550      	cmp	r0, sl
 8083b8e:	d806      	bhi.n	8083b9e <_strtol_r+0xb6>
 8083b90:	d101      	bne.n	8083b96 <_strtol_r+0xae>
 8083b92:	4564      	cmp	r4, ip
 8083b94:	dc03      	bgt.n	8083b9e <_strtol_r+0xb6>
 8083b96:	fb03 4000 	mla	r0, r3, r0, r4
 8083b9a:	2701      	movs	r7, #1
 8083b9c:	e001      	b.n	8083ba2 <_strtol_r+0xba>
 8083b9e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8083ba2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8083ba6:	e7d7      	b.n	8083b58 <_strtol_r+0x70>
 8083ba8:	1c7b      	adds	r3, r7, #1
 8083baa:	d10c      	bne.n	8083bc6 <_strtol_r+0xde>
 8083bac:	2e00      	cmp	r6, #0
 8083bae:	f04f 0322 	mov.w	r3, #34	; 0x22
 8083bb2:	bf14      	ite	ne
 8083bb4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8083bb8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8083bbc:	f8c8 3000 	str.w	r3, [r8]
 8083bc0:	b92a      	cbnz	r2, 8083bce <_strtol_r+0xe6>
 8083bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8083bc6:	b106      	cbz	r6, 8083bca <_strtol_r+0xe2>
 8083bc8:	4240      	negs	r0, r0
 8083bca:	b172      	cbz	r2, 8083bea <_strtol_r+0x102>
 8083bcc:	b107      	cbz	r7, 8083bd0 <_strtol_r+0xe8>
 8083bce:	1e69      	subs	r1, r5, #1
 8083bd0:	6011      	str	r1, [r2, #0]
 8083bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8083bd6:	2430      	movs	r4, #48	; 0x30
 8083bd8:	2b00      	cmp	r3, #0
 8083bda:	d1b1      	bne.n	8083b40 <_strtol_r+0x58>
 8083bdc:	2308      	movs	r3, #8
 8083bde:	e7af      	b.n	8083b40 <_strtol_r+0x58>
 8083be0:	230a      	movs	r3, #10
 8083be2:	e7ad      	b.n	8083b40 <_strtol_r+0x58>
 8083be4:	2c30      	cmp	r4, #48	; 0x30
 8083be6:	d0a3      	beq.n	8083b30 <_strtol_r+0x48>
 8083be8:	e7aa      	b.n	8083b40 <_strtol_r+0x58>
 8083bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8083bee:	bf00      	nop
 8083bf0:	200004a0 	.word	0x200004a0

08083bf4 <strtol>:
 8083bf4:	4613      	mov	r3, r2
 8083bf6:	460a      	mov	r2, r1
 8083bf8:	4601      	mov	r1, r0
 8083bfa:	4802      	ldr	r0, [pc, #8]	; (8083c04 <strtol+0x10>)
 8083bfc:	6800      	ldr	r0, [r0, #0]
 8083bfe:	f7ff bf73 	b.w	8083ae8 <_strtol_r>
 8083c02:	bf00      	nop
 8083c04:	20000504 	.word	0x20000504

08083c08 <_strtoul_r>:
 8083c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8083c0c:	460e      	mov	r6, r1
 8083c0e:	4680      	mov	r8, r0
 8083c10:	483b      	ldr	r0, [pc, #236]	; (8083d00 <_strtoul_r+0xf8>)
 8083c12:	f8d0 9000 	ldr.w	r9, [r0]
 8083c16:	4635      	mov	r5, r6
 8083c18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8083c1c:	eb09 0004 	add.w	r0, r9, r4
 8083c20:	7840      	ldrb	r0, [r0, #1]
 8083c22:	f000 0008 	and.w	r0, r0, #8
 8083c26:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8083c2a:	b108      	cbz	r0, 8083c30 <_strtoul_r+0x28>
 8083c2c:	462e      	mov	r6, r5
 8083c2e:	e7f2      	b.n	8083c16 <_strtoul_r+0xe>
 8083c30:	2c2d      	cmp	r4, #45	; 0x2d
 8083c32:	d103      	bne.n	8083c3c <_strtoul_r+0x34>
 8083c34:	1cb5      	adds	r5, r6, #2
 8083c36:	7874      	ldrb	r4, [r6, #1]
 8083c38:	2701      	movs	r7, #1
 8083c3a:	e003      	b.n	8083c44 <_strtoul_r+0x3c>
 8083c3c:	2c2b      	cmp	r4, #43	; 0x2b
 8083c3e:	bf04      	itt	eq
 8083c40:	7874      	ldrbeq	r4, [r6, #1]
 8083c42:	1cb5      	addeq	r5, r6, #2
 8083c44:	b113      	cbz	r3, 8083c4c <_strtoul_r+0x44>
 8083c46:	2b10      	cmp	r3, #16
 8083c48:	d10a      	bne.n	8083c60 <_strtoul_r+0x58>
 8083c4a:	e053      	b.n	8083cf4 <_strtoul_r+0xec>
 8083c4c:	2c30      	cmp	r4, #48	; 0x30
 8083c4e:	d14f      	bne.n	8083cf0 <_strtoul_r+0xe8>
 8083c50:	7828      	ldrb	r0, [r5, #0]
 8083c52:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8083c56:	2858      	cmp	r0, #88	; 0x58
 8083c58:	d145      	bne.n	8083ce6 <_strtoul_r+0xde>
 8083c5a:	786c      	ldrb	r4, [r5, #1]
 8083c5c:	2310      	movs	r3, #16
 8083c5e:	3502      	adds	r5, #2
 8083c60:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8083c64:	fbbc fcf3 	udiv	ip, ip, r3
 8083c68:	fb03 fa0c 	mul.w	sl, r3, ip
 8083c6c:	2600      	movs	r6, #0
 8083c6e:	ea6f 0a0a 	mvn.w	sl, sl
 8083c72:	4630      	mov	r0, r6
 8083c74:	eb09 0e04 	add.w	lr, r9, r4
 8083c78:	f89e e001 	ldrb.w	lr, [lr, #1]
 8083c7c:	f01e 0f04 	tst.w	lr, #4
 8083c80:	d001      	beq.n	8083c86 <_strtoul_r+0x7e>
 8083c82:	3c30      	subs	r4, #48	; 0x30
 8083c84:	e00b      	b.n	8083c9e <_strtoul_r+0x96>
 8083c86:	f01e 0e03 	ands.w	lr, lr, #3
 8083c8a:	d01a      	beq.n	8083cc2 <_strtoul_r+0xba>
 8083c8c:	f1be 0f01 	cmp.w	lr, #1
 8083c90:	bf0c      	ite	eq
 8083c92:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8083c96:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8083c9a:	ebce 0404 	rsb	r4, lr, r4
 8083c9e:	42a3      	cmp	r3, r4
 8083ca0:	dd0f      	ble.n	8083cc2 <_strtoul_r+0xba>
 8083ca2:	2e00      	cmp	r6, #0
 8083ca4:	db08      	blt.n	8083cb8 <_strtoul_r+0xb0>
 8083ca6:	4560      	cmp	r0, ip
 8083ca8:	d806      	bhi.n	8083cb8 <_strtoul_r+0xb0>
 8083caa:	d101      	bne.n	8083cb0 <_strtoul_r+0xa8>
 8083cac:	4554      	cmp	r4, sl
 8083cae:	dc03      	bgt.n	8083cb8 <_strtoul_r+0xb0>
 8083cb0:	fb03 4000 	mla	r0, r3, r0, r4
 8083cb4:	2601      	movs	r6, #1
 8083cb6:	e001      	b.n	8083cbc <_strtoul_r+0xb4>
 8083cb8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8083cbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8083cc0:	e7d8      	b.n	8083c74 <_strtoul_r+0x6c>
 8083cc2:	2e00      	cmp	r6, #0
 8083cc4:	da07      	bge.n	8083cd6 <_strtoul_r+0xce>
 8083cc6:	2322      	movs	r3, #34	; 0x22
 8083cc8:	f8c8 3000 	str.w	r3, [r8]
 8083ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8083cd0:	b92a      	cbnz	r2, 8083cde <_strtoul_r+0xd6>
 8083cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8083cd6:	b107      	cbz	r7, 8083cda <_strtoul_r+0xd2>
 8083cd8:	4240      	negs	r0, r0
 8083cda:	b172      	cbz	r2, 8083cfa <_strtoul_r+0xf2>
 8083cdc:	b106      	cbz	r6, 8083ce0 <_strtoul_r+0xd8>
 8083cde:	1e69      	subs	r1, r5, #1
 8083ce0:	6011      	str	r1, [r2, #0]
 8083ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8083ce6:	2430      	movs	r4, #48	; 0x30
 8083ce8:	2b00      	cmp	r3, #0
 8083cea:	d1b9      	bne.n	8083c60 <_strtoul_r+0x58>
 8083cec:	2308      	movs	r3, #8
 8083cee:	e7b7      	b.n	8083c60 <_strtoul_r+0x58>
 8083cf0:	230a      	movs	r3, #10
 8083cf2:	e7b5      	b.n	8083c60 <_strtoul_r+0x58>
 8083cf4:	2c30      	cmp	r4, #48	; 0x30
 8083cf6:	d0ab      	beq.n	8083c50 <_strtoul_r+0x48>
 8083cf8:	e7b2      	b.n	8083c60 <_strtoul_r+0x58>
 8083cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8083cfe:	bf00      	nop
 8083d00:	200004a0 	.word	0x200004a0

08083d04 <strtoul>:
 8083d04:	4613      	mov	r3, r2
 8083d06:	460a      	mov	r2, r1
 8083d08:	4601      	mov	r1, r0
 8083d0a:	4802      	ldr	r0, [pc, #8]	; (8083d14 <strtoul+0x10>)
 8083d0c:	6800      	ldr	r0, [r0, #0]
 8083d0e:	f7ff bf7b 	b.w	8083c08 <_strtoul_r>
 8083d12:	bf00      	nop
 8083d14:	20000504 	.word	0x20000504

08083d18 <__tzcalc_limits>:
 8083d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083d1c:	4604      	mov	r4, r0
 8083d1e:	f000 fa6f 	bl	8084200 <__gettzinfo>
 8083d22:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8083d26:	429c      	cmp	r4, r3
 8083d28:	f340 8096 	ble.w	8083e58 <__tzcalc_limits+0x140>
 8083d2c:	f240 156d 	movw	r5, #365	; 0x16d
 8083d30:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8083d34:	18e3      	adds	r3, r4, r3
 8083d36:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 8083d3a:	109b      	asrs	r3, r3, #2
 8083d3c:	fb05 3502 	mla	r5, r5, r2, r3
 8083d40:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8083d44:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8083d48:	fb92 f3f3 	sdiv	r3, r2, r3
 8083d4c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8083d50:	442b      	add	r3, r5
 8083d52:	18a5      	adds	r5, r4, r2
 8083d54:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8083d58:	fb94 f7f2 	sdiv	r7, r4, r2
 8083d5c:	fb95 f5f2 	sdiv	r5, r5, r2
 8083d60:	fb02 4717 	mls	r7, r2, r7, r4
 8083d64:	441d      	add	r5, r3
 8083d66:	2364      	movs	r3, #100	; 0x64
 8083d68:	fb94 f6f3 	sdiv	r6, r4, r3
 8083d6c:	fab7 fe87 	clz	lr, r7
 8083d70:	4601      	mov	r1, r0
 8083d72:	fb03 4616 	mls	r6, r3, r6, r4
 8083d76:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8083d7a:	9301      	str	r3, [sp, #4]
 8083d7c:	f004 0303 	and.w	r3, r4, #3
 8083d80:	6044      	str	r4, [r0, #4]
 8083d82:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8083d86:	9300      	str	r3, [sp, #0]
 8083d88:	f04f 0c07 	mov.w	ip, #7
 8083d8c:	7a0b      	ldrb	r3, [r1, #8]
 8083d8e:	2b4a      	cmp	r3, #74	; 0x4a
 8083d90:	d10e      	bne.n	8083db0 <__tzcalc_limits+0x98>
 8083d92:	694b      	ldr	r3, [r1, #20]
 8083d94:	9a00      	ldr	r2, [sp, #0]
 8083d96:	18ec      	adds	r4, r5, r3
 8083d98:	b902      	cbnz	r2, 8083d9c <__tzcalc_limits+0x84>
 8083d9a:	b906      	cbnz	r6, 8083d9e <__tzcalc_limits+0x86>
 8083d9c:	b927      	cbnz	r7, 8083da8 <__tzcalc_limits+0x90>
 8083d9e:	2b3b      	cmp	r3, #59	; 0x3b
 8083da0:	bfd4      	ite	le
 8083da2:	2300      	movle	r3, #0
 8083da4:	2301      	movgt	r3, #1
 8083da6:	e000      	b.n	8083daa <__tzcalc_limits+0x92>
 8083da8:	2300      	movs	r3, #0
 8083daa:	4423      	add	r3, r4
 8083dac:	3b01      	subs	r3, #1
 8083dae:	e03f      	b.n	8083e30 <__tzcalc_limits+0x118>
 8083db0:	2b44      	cmp	r3, #68	; 0x44
 8083db2:	d102      	bne.n	8083dba <__tzcalc_limits+0xa2>
 8083db4:	694b      	ldr	r3, [r1, #20]
 8083db6:	442b      	add	r3, r5
 8083db8:	e03a      	b.n	8083e30 <__tzcalc_limits+0x118>
 8083dba:	9b00      	ldr	r3, [sp, #0]
 8083dbc:	b92b      	cbnz	r3, 8083dca <__tzcalc_limits+0xb2>
 8083dbe:	2e00      	cmp	r6, #0
 8083dc0:	bf0c      	ite	eq
 8083dc2:	46f0      	moveq	r8, lr
 8083dc4:	f04f 0801 	movne.w	r8, #1
 8083dc8:	e000      	b.n	8083dcc <__tzcalc_limits+0xb4>
 8083dca:	46f0      	mov	r8, lr
 8083dcc:	46a9      	mov	r9, r5
 8083dce:	4b24      	ldr	r3, [pc, #144]	; (8083e60 <__tzcalc_limits+0x148>)
 8083dd0:	2230      	movs	r2, #48	; 0x30
 8083dd2:	fb02 3808 	mla	r8, r2, r8, r3
 8083dd6:	68cc      	ldr	r4, [r1, #12]
 8083dd8:	f1a8 0a04 	sub.w	sl, r8, #4
 8083ddc:	2301      	movs	r3, #1
 8083dde:	42a3      	cmp	r3, r4
 8083de0:	da04      	bge.n	8083dec <__tzcalc_limits+0xd4>
 8083de2:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8083de6:	3301      	adds	r3, #1
 8083de8:	44d9      	add	r9, fp
 8083dea:	e7f8      	b.n	8083dde <__tzcalc_limits+0xc6>
 8083dec:	f109 0304 	add.w	r3, r9, #4
 8083df0:	fb93 fbfc 	sdiv	fp, r3, ip
 8083df4:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 8083df8:	ebca 0a03 	rsb	sl, sl, r3
 8083dfc:	694b      	ldr	r3, [r1, #20]
 8083dfe:	2c01      	cmp	r4, #1
 8083e00:	bfb8      	it	lt
 8083e02:	2401      	movlt	r4, #1
 8083e04:	ebb3 0a0a 	subs.w	sl, r3, sl
 8083e08:	690b      	ldr	r3, [r1, #16]
 8083e0a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8083e0e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8083e12:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8083e16:	bf48      	it	mi
 8083e18:	f10a 0a07 	addmi.w	sl, sl, #7
 8083e1c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8083e20:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8083e24:	4453      	add	r3, sl
 8083e26:	42a3      	cmp	r3, r4
 8083e28:	db01      	blt.n	8083e2e <__tzcalc_limits+0x116>
 8083e2a:	3b07      	subs	r3, #7
 8083e2c:	e7fb      	b.n	8083e26 <__tzcalc_limits+0x10e>
 8083e2e:	444b      	add	r3, r9
 8083e30:	698c      	ldr	r4, [r1, #24]
 8083e32:	4a0c      	ldr	r2, [pc, #48]	; (8083e64 <__tzcalc_limits+0x14c>)
 8083e34:	fb02 4303 	mla	r3, r2, r3, r4
 8083e38:	6a0c      	ldr	r4, [r1, #32]
 8083e3a:	4423      	add	r3, r4
 8083e3c:	f841 3f1c 	str.w	r3, [r1, #28]!
 8083e40:	9b01      	ldr	r3, [sp, #4]
 8083e42:	4299      	cmp	r1, r3
 8083e44:	d1a2      	bne.n	8083d8c <__tzcalc_limits+0x74>
 8083e46:	69c3      	ldr	r3, [r0, #28]
 8083e48:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8083e4a:	4293      	cmp	r3, r2
 8083e4c:	bfac      	ite	ge
 8083e4e:	2300      	movge	r3, #0
 8083e50:	2301      	movlt	r3, #1
 8083e52:	6003      	str	r3, [r0, #0]
 8083e54:	2001      	movs	r0, #1
 8083e56:	e000      	b.n	8083e5a <__tzcalc_limits+0x142>
 8083e58:	2000      	movs	r0, #0
 8083e5a:	b003      	add	sp, #12
 8083e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083e60:	08084be4 	.word	0x08084be4
 8083e64:	00015180 	.word	0x00015180

08083e68 <__tz_lock>:
 8083e68:	4770      	bx	lr

08083e6a <__tz_unlock>:
 8083e6a:	4770      	bx	lr

08083e6c <_tzset_unlocked>:
 8083e6c:	4b01      	ldr	r3, [pc, #4]	; (8083e74 <_tzset_unlocked+0x8>)
 8083e6e:	6818      	ldr	r0, [r3, #0]
 8083e70:	f000 b802 	b.w	8083e78 <_tzset_unlocked_r>
 8083e74:	20000504 	.word	0x20000504

08083e78 <_tzset_unlocked_r>:
 8083e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083e7c:	b08d      	sub	sp, #52	; 0x34
 8083e7e:	4607      	mov	r7, r0
 8083e80:	f000 f9be 	bl	8084200 <__gettzinfo>
 8083e84:	49b0      	ldr	r1, [pc, #704]	; (8084148 <_tzset_unlocked_r+0x2d0>)
 8083e86:	4604      	mov	r4, r0
 8083e88:	4638      	mov	r0, r7
 8083e8a:	f000 f9b1 	bl	80841f0 <_getenv_r>
 8083e8e:	4eaf      	ldr	r6, [pc, #700]	; (808414c <_tzset_unlocked_r+0x2d4>)
 8083e90:	4605      	mov	r5, r0
 8083e92:	b960      	cbnz	r0, 8083eae <_tzset_unlocked_r+0x36>
 8083e94:	4bae      	ldr	r3, [pc, #696]	; (8084150 <_tzset_unlocked_r+0x2d8>)
 8083e96:	4aaf      	ldr	r2, [pc, #700]	; (8084154 <_tzset_unlocked_r+0x2dc>)
 8083e98:	6018      	str	r0, [r3, #0]
 8083e9a:	4baf      	ldr	r3, [pc, #700]	; (8084158 <_tzset_unlocked_r+0x2e0>)
 8083e9c:	6018      	str	r0, [r3, #0]
 8083e9e:	4baf      	ldr	r3, [pc, #700]	; (808415c <_tzset_unlocked_r+0x2e4>)
 8083ea0:	6830      	ldr	r0, [r6, #0]
 8083ea2:	601a      	str	r2, [r3, #0]
 8083ea4:	605a      	str	r2, [r3, #4]
 8083ea6:	f7fd fbab 	bl	8081600 <free>
 8083eaa:	6035      	str	r5, [r6, #0]
 8083eac:	e148      	b.n	8084140 <_tzset_unlocked_r+0x2c8>
 8083eae:	6831      	ldr	r1, [r6, #0]
 8083eb0:	b979      	cbnz	r1, 8083ed2 <_tzset_unlocked_r+0x5a>
 8083eb2:	6830      	ldr	r0, [r6, #0]
 8083eb4:	f7fd fba4 	bl	8081600 <free>
 8083eb8:	4628      	mov	r0, r5
 8083eba:	f7ff fde4 	bl	8083a86 <strlen>
 8083ebe:	1c41      	adds	r1, r0, #1
 8083ec0:	4638      	mov	r0, r7
 8083ec2:	f7fd fbcd 	bl	8081660 <_malloc_r>
 8083ec6:	6030      	str	r0, [r6, #0]
 8083ec8:	b148      	cbz	r0, 8083ede <_tzset_unlocked_r+0x66>
 8083eca:	4629      	mov	r1, r5
 8083ecc:	f7ff fdb8 	bl	8083a40 <strcpy>
 8083ed0:	e005      	b.n	8083ede <_tzset_unlocked_r+0x66>
 8083ed2:	f7ff fdab 	bl	8083a2c <strcmp>
 8083ed6:	2800      	cmp	r0, #0
 8083ed8:	f000 8132 	beq.w	8084140 <_tzset_unlocked_r+0x2c8>
 8083edc:	e7e9      	b.n	8083eb2 <_tzset_unlocked_r+0x3a>
 8083ede:	782b      	ldrb	r3, [r5, #0]
 8083ee0:	ae0a      	add	r6, sp, #40	; 0x28
 8083ee2:	2b3a      	cmp	r3, #58	; 0x3a
 8083ee4:	bf08      	it	eq
 8083ee6:	3501      	addeq	r5, #1
 8083ee8:	4633      	mov	r3, r6
 8083eea:	4a9d      	ldr	r2, [pc, #628]	; (8084160 <_tzset_unlocked_r+0x2e8>)
 8083eec:	499d      	ldr	r1, [pc, #628]	; (8084164 <_tzset_unlocked_r+0x2ec>)
 8083eee:	4628      	mov	r0, r5
 8083ef0:	f7fd fb9e 	bl	8081630 <siscanf>
 8083ef4:	2800      	cmp	r0, #0
 8083ef6:	f340 8123 	ble.w	8084140 <_tzset_unlocked_r+0x2c8>
 8083efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8083efc:	18ef      	adds	r7, r5, r3
 8083efe:	5ceb      	ldrb	r3, [r5, r3]
 8083f00:	2b2d      	cmp	r3, #45	; 0x2d
 8083f02:	d103      	bne.n	8083f0c <_tzset_unlocked_r+0x94>
 8083f04:	3701      	adds	r7, #1
 8083f06:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8083f0a:	e003      	b.n	8083f14 <_tzset_unlocked_r+0x9c>
 8083f0c:	2b2b      	cmp	r3, #43	; 0x2b
 8083f0e:	bf08      	it	eq
 8083f10:	3701      	addeq	r7, #1
 8083f12:	2501      	movs	r5, #1
 8083f14:	f10d 0a20 	add.w	sl, sp, #32
 8083f18:	f10d 0b1e 	add.w	fp, sp, #30
 8083f1c:	f04f 0800 	mov.w	r8, #0
 8083f20:	9603      	str	r6, [sp, #12]
 8083f22:	f8cd a008 	str.w	sl, [sp, #8]
 8083f26:	9601      	str	r6, [sp, #4]
 8083f28:	f8cd b000 	str.w	fp, [sp]
 8083f2c:	4633      	mov	r3, r6
 8083f2e:	aa07      	add	r2, sp, #28
 8083f30:	498d      	ldr	r1, [pc, #564]	; (8084168 <_tzset_unlocked_r+0x2f0>)
 8083f32:	4638      	mov	r0, r7
 8083f34:	f8ad 801e 	strh.w	r8, [sp, #30]
 8083f38:	f8ad 8020 	strh.w	r8, [sp, #32]
 8083f3c:	f7fd fb78 	bl	8081630 <siscanf>
 8083f40:	4540      	cmp	r0, r8
 8083f42:	f340 80fd 	ble.w	8084140 <_tzset_unlocked_r+0x2c8>
 8083f46:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8083f4a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8083f4e:	213c      	movs	r1, #60	; 0x3c
 8083f50:	fb01 3302 	mla	r3, r1, r2, r3
 8083f54:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8083f58:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8083f5c:	fb01 3302 	mla	r3, r1, r2, r3
 8083f60:	435d      	muls	r5, r3
 8083f62:	4b7f      	ldr	r3, [pc, #508]	; (8084160 <_tzset_unlocked_r+0x2e8>)
 8083f64:	6225      	str	r5, [r4, #32]
 8083f66:	4d7d      	ldr	r5, [pc, #500]	; (808415c <_tzset_unlocked_r+0x2e4>)
 8083f68:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8084174 <_tzset_unlocked_r+0x2fc>
 8083f6c:	602b      	str	r3, [r5, #0]
 8083f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8083f70:	464a      	mov	r2, r9
 8083f72:	441f      	add	r7, r3
 8083f74:	497b      	ldr	r1, [pc, #492]	; (8084164 <_tzset_unlocked_r+0x2ec>)
 8083f76:	4633      	mov	r3, r6
 8083f78:	4638      	mov	r0, r7
 8083f7a:	f7fd fb59 	bl	8081630 <siscanf>
 8083f7e:	4540      	cmp	r0, r8
 8083f80:	dc08      	bgt.n	8083f94 <_tzset_unlocked_r+0x11c>
 8083f82:	682b      	ldr	r3, [r5, #0]
 8083f84:	6a22      	ldr	r2, [r4, #32]
 8083f86:	606b      	str	r3, [r5, #4]
 8083f88:	4b71      	ldr	r3, [pc, #452]	; (8084150 <_tzset_unlocked_r+0x2d8>)
 8083f8a:	601a      	str	r2, [r3, #0]
 8083f8c:	4b72      	ldr	r3, [pc, #456]	; (8084158 <_tzset_unlocked_r+0x2e0>)
 8083f8e:	f8c3 8000 	str.w	r8, [r3]
 8083f92:	e0d5      	b.n	8084140 <_tzset_unlocked_r+0x2c8>
 8083f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8083f96:	f8c5 9004 	str.w	r9, [r5, #4]
 8083f9a:	18fd      	adds	r5, r7, r3
 8083f9c:	5cfb      	ldrb	r3, [r7, r3]
 8083f9e:	2b2d      	cmp	r3, #45	; 0x2d
 8083fa0:	d103      	bne.n	8083faa <_tzset_unlocked_r+0x132>
 8083fa2:	3501      	adds	r5, #1
 8083fa4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8083fa8:	e003      	b.n	8083fb2 <_tzset_unlocked_r+0x13a>
 8083faa:	2b2b      	cmp	r3, #43	; 0x2b
 8083fac:	bf08      	it	eq
 8083fae:	3501      	addeq	r5, #1
 8083fb0:	2701      	movs	r7, #1
 8083fb2:	2300      	movs	r3, #0
 8083fb4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8083fb8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8083fbc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8083fc0:	930a      	str	r3, [sp, #40]	; 0x28
 8083fc2:	9603      	str	r6, [sp, #12]
 8083fc4:	f8cd a008 	str.w	sl, [sp, #8]
 8083fc8:	9601      	str	r6, [sp, #4]
 8083fca:	f8cd b000 	str.w	fp, [sp]
 8083fce:	4633      	mov	r3, r6
 8083fd0:	aa07      	add	r2, sp, #28
 8083fd2:	4965      	ldr	r1, [pc, #404]	; (8084168 <_tzset_unlocked_r+0x2f0>)
 8083fd4:	4628      	mov	r0, r5
 8083fd6:	f7fd fb2b 	bl	8081630 <siscanf>
 8083fda:	2800      	cmp	r0, #0
 8083fdc:	dc04      	bgt.n	8083fe8 <_tzset_unlocked_r+0x170>
 8083fde:	6a23      	ldr	r3, [r4, #32]
 8083fe0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8083fe4:	63e3      	str	r3, [r4, #60]	; 0x3c
 8083fe6:	e00e      	b.n	8084006 <_tzset_unlocked_r+0x18e>
 8083fe8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8083fec:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8083ff0:	213c      	movs	r1, #60	; 0x3c
 8083ff2:	fb01 3302 	mla	r3, r1, r2, r3
 8083ff6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8083ffa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8083ffe:	fb01 3302 	mla	r3, r1, r2, r3
 8084002:	435f      	muls	r7, r3
 8084004:	63e7      	str	r7, [r4, #60]	; 0x3c
 8084006:	4627      	mov	r7, r4
 8084008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808400a:	f04f 0900 	mov.w	r9, #0
 808400e:	441d      	add	r5, r3
 8084010:	782b      	ldrb	r3, [r5, #0]
 8084012:	2b2c      	cmp	r3, #44	; 0x2c
 8084014:	bf08      	it	eq
 8084016:	3501      	addeq	r5, #1
 8084018:	f895 8000 	ldrb.w	r8, [r5]
 808401c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8084020:	d126      	bne.n	8084070 <_tzset_unlocked_r+0x1f8>
 8084022:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8084026:	9302      	str	r3, [sp, #8]
 8084028:	ab09      	add	r3, sp, #36	; 0x24
 808402a:	9300      	str	r3, [sp, #0]
 808402c:	9603      	str	r6, [sp, #12]
 808402e:	9601      	str	r6, [sp, #4]
 8084030:	4633      	mov	r3, r6
 8084032:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8084036:	494d      	ldr	r1, [pc, #308]	; (808416c <_tzset_unlocked_r+0x2f4>)
 8084038:	4628      	mov	r0, r5
 808403a:	f7fd faf9 	bl	8081630 <siscanf>
 808403e:	2803      	cmp	r0, #3
 8084040:	d17e      	bne.n	8084140 <_tzset_unlocked_r+0x2c8>
 8084042:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8084046:	1e4b      	subs	r3, r1, #1
 8084048:	2b0b      	cmp	r3, #11
 808404a:	d879      	bhi.n	8084140 <_tzset_unlocked_r+0x2c8>
 808404c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8084050:	1e53      	subs	r3, r2, #1
 8084052:	2b04      	cmp	r3, #4
 8084054:	d874      	bhi.n	8084140 <_tzset_unlocked_r+0x2c8>
 8084056:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 808405a:	2b06      	cmp	r3, #6
 808405c:	d870      	bhi.n	8084140 <_tzset_unlocked_r+0x2c8>
 808405e:	f887 8008 	strb.w	r8, [r7, #8]
 8084062:	60f9      	str	r1, [r7, #12]
 8084064:	613a      	str	r2, [r7, #16]
 8084066:	617b      	str	r3, [r7, #20]
 8084068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808406a:	eb05 0803 	add.w	r8, r5, r3
 808406e:	e02a      	b.n	80840c6 <_tzset_unlocked_r+0x24e>
 8084070:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8084074:	bf06      	itte	eq
 8084076:	4643      	moveq	r3, r8
 8084078:	3501      	addeq	r5, #1
 808407a:	2344      	movne	r3, #68	; 0x44
 808407c:	220a      	movs	r2, #10
 808407e:	a90b      	add	r1, sp, #44	; 0x2c
 8084080:	4628      	mov	r0, r5
 8084082:	9305      	str	r3, [sp, #20]
 8084084:	f7ff fe3e 	bl	8083d04 <strtoul>
 8084088:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 808408c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8084090:	4545      	cmp	r5, r8
 8084092:	9b05      	ldr	r3, [sp, #20]
 8084094:	d114      	bne.n	80840c0 <_tzset_unlocked_r+0x248>
 8084096:	234d      	movs	r3, #77	; 0x4d
 8084098:	f1b9 0f00 	cmp.w	r9, #0
 808409c:	d107      	bne.n	80840ae <_tzset_unlocked_r+0x236>
 808409e:	7223      	strb	r3, [r4, #8]
 80840a0:	2303      	movs	r3, #3
 80840a2:	60e3      	str	r3, [r4, #12]
 80840a4:	2302      	movs	r3, #2
 80840a6:	6123      	str	r3, [r4, #16]
 80840a8:	f8c4 9014 	str.w	r9, [r4, #20]
 80840ac:	e00b      	b.n	80840c6 <_tzset_unlocked_r+0x24e>
 80840ae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80840b2:	230b      	movs	r3, #11
 80840b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80840b6:	2301      	movs	r3, #1
 80840b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80840ba:	2300      	movs	r3, #0
 80840bc:	6323      	str	r3, [r4, #48]	; 0x30
 80840be:	e002      	b.n	80840c6 <_tzset_unlocked_r+0x24e>
 80840c0:	b280      	uxth	r0, r0
 80840c2:	723b      	strb	r3, [r7, #8]
 80840c4:	6178      	str	r0, [r7, #20]
 80840c6:	2302      	movs	r3, #2
 80840c8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80840cc:	2300      	movs	r3, #0
 80840ce:	f8ad 301e 	strh.w	r3, [sp, #30]
 80840d2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80840d6:	930a      	str	r3, [sp, #40]	; 0x28
 80840d8:	f898 3000 	ldrb.w	r3, [r8]
 80840dc:	2b2f      	cmp	r3, #47	; 0x2f
 80840de:	d10b      	bne.n	80840f8 <_tzset_unlocked_r+0x280>
 80840e0:	9603      	str	r6, [sp, #12]
 80840e2:	f8cd a008 	str.w	sl, [sp, #8]
 80840e6:	9601      	str	r6, [sp, #4]
 80840e8:	f8cd b000 	str.w	fp, [sp]
 80840ec:	4633      	mov	r3, r6
 80840ee:	aa07      	add	r2, sp, #28
 80840f0:	491f      	ldr	r1, [pc, #124]	; (8084170 <_tzset_unlocked_r+0x2f8>)
 80840f2:	4640      	mov	r0, r8
 80840f4:	f7fd fa9c 	bl	8081630 <siscanf>
 80840f8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80840fc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084100:	213c      	movs	r1, #60	; 0x3c
 8084102:	fb01 3302 	mla	r3, r1, r2, r3
 8084106:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808410a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808410e:	fb01 3302 	mla	r3, r1, r2, r3
 8084112:	61bb      	str	r3, [r7, #24]
 8084114:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8084116:	f109 0901 	add.w	r9, r9, #1
 808411a:	f1b9 0f02 	cmp.w	r9, #2
 808411e:	4445      	add	r5, r8
 8084120:	f107 071c 	add.w	r7, r7, #28
 8084124:	f47f af74 	bne.w	8084010 <_tzset_unlocked_r+0x198>
 8084128:	6860      	ldr	r0, [r4, #4]
 808412a:	f7ff fdf5 	bl	8083d18 <__tzcalc_limits>
 808412e:	6a22      	ldr	r2, [r4, #32]
 8084130:	4b07      	ldr	r3, [pc, #28]	; (8084150 <_tzset_unlocked_r+0x2d8>)
 8084132:	601a      	str	r2, [r3, #0]
 8084134:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8084136:	1a9b      	subs	r3, r3, r2
 8084138:	4a07      	ldr	r2, [pc, #28]	; (8084158 <_tzset_unlocked_r+0x2e0>)
 808413a:	bf18      	it	ne
 808413c:	2301      	movne	r3, #1
 808413e:	6013      	str	r3, [r2, #0]
 8084140:	b00d      	add	sp, #52	; 0x34
 8084142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084146:	bf00      	nop
 8084148:	08084c44 	.word	0x08084c44
 808414c:	20000d20 	.word	0x20000d20
 8084150:	20000d28 	.word	0x20000d28
 8084154:	08084c47 	.word	0x08084c47
 8084158:	20000d24 	.word	0x20000d24
 808415c:	20000508 	.word	0x20000508
 8084160:	20000d13 	.word	0x20000d13
 8084164:	08084c4b 	.word	0x08084c4b
 8084168:	08084c6e 	.word	0x08084c6e
 808416c:	08084c5a 	.word	0x08084c5a
 8084170:	08084c6d 	.word	0x08084c6d
 8084174:	20000d08 	.word	0x20000d08

08084178 <_findenv_r>:
 8084178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808417c:	4607      	mov	r7, r0
 808417e:	468b      	mov	fp, r1
 8084180:	4690      	mov	r8, r2
 8084182:	f000 f8d7 	bl	8084334 <__env_lock>
 8084186:	4b19      	ldr	r3, [pc, #100]	; (80841ec <_findenv_r+0x74>)
 8084188:	681d      	ldr	r5, [r3, #0]
 808418a:	469a      	mov	sl, r3
 808418c:	b13d      	cbz	r5, 808419e <_findenv_r+0x26>
 808418e:	465c      	mov	r4, fp
 8084190:	4623      	mov	r3, r4
 8084192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084196:	b142      	cbz	r2, 80841aa <_findenv_r+0x32>
 8084198:	2a3d      	cmp	r2, #61	; 0x3d
 808419a:	461c      	mov	r4, r3
 808419c:	d1f8      	bne.n	8084190 <_findenv_r+0x18>
 808419e:	4638      	mov	r0, r7
 80841a0:	f000 f8c9 	bl	8084336 <__env_unlock>
 80841a4:	2000      	movs	r0, #0
 80841a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80841aa:	ebcb 0404 	rsb	r4, fp, r4
 80841ae:	46a9      	mov	r9, r5
 80841b0:	f859 0b04 	ldr.w	r0, [r9], #4
 80841b4:	2800      	cmp	r0, #0
 80841b6:	d0f2      	beq.n	808419e <_findenv_r+0x26>
 80841b8:	4622      	mov	r2, r4
 80841ba:	4659      	mov	r1, fp
 80841bc:	f7ff fc6b 	bl	8083a96 <strncmp>
 80841c0:	b988      	cbnz	r0, 80841e6 <_findenv_r+0x6e>
 80841c2:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80841c6:	191e      	adds	r6, r3, r4
 80841c8:	5d1b      	ldrb	r3, [r3, r4]
 80841ca:	2b3d      	cmp	r3, #61	; 0x3d
 80841cc:	d10b      	bne.n	80841e6 <_findenv_r+0x6e>
 80841ce:	f8da 3000 	ldr.w	r3, [sl]
 80841d2:	4638      	mov	r0, r7
 80841d4:	1aed      	subs	r5, r5, r3
 80841d6:	10ad      	asrs	r5, r5, #2
 80841d8:	f8c8 5000 	str.w	r5, [r8]
 80841dc:	f000 f8ab 	bl	8084336 <__env_unlock>
 80841e0:	1c70      	adds	r0, r6, #1
 80841e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80841e6:	464d      	mov	r5, r9
 80841e8:	e7e1      	b.n	80841ae <_findenv_r+0x36>
 80841ea:	bf00      	nop
 80841ec:	20000550 	.word	0x20000550

080841f0 <_getenv_r>:
 80841f0:	b507      	push	{r0, r1, r2, lr}
 80841f2:	aa01      	add	r2, sp, #4
 80841f4:	f7ff ffc0 	bl	8084178 <_findenv_r>
 80841f8:	b003      	add	sp, #12
 80841fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08084200 <__gettzinfo>:
 8084200:	4800      	ldr	r0, [pc, #0]	; (8084204 <__gettzinfo+0x4>)
 8084202:	4770      	bx	lr
 8084204:	20000510 	.word	0x20000510

08084208 <gmtime_r>:
 8084208:	6802      	ldr	r2, [r0, #0]
 808420a:	4b46      	ldr	r3, [pc, #280]	; (8084324 <gmtime_r+0x11c>)
 808420c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808420e:	fb92 f4f3 	sdiv	r4, r2, r3
 8084212:	fb03 2214 	mls	r2, r3, r4, r2
 8084216:	2a00      	cmp	r2, #0
 8084218:	bfbc      	itt	lt
 808421a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 808421e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8084222:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8084226:	fb92 f3f0 	sdiv	r3, r2, r0
 808422a:	fb00 2213 	mls	r2, r0, r3, r2
 808422e:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8084232:	608b      	str	r3, [r1, #8]
 8084234:	fb92 f3f0 	sdiv	r3, r2, r0
 8084238:	fb00 2213 	mls	r2, r0, r3, r2
 808423c:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8084240:	bfac      	ite	ge
 8084242:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 8084246:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 808424a:	604b      	str	r3, [r1, #4]
 808424c:	600a      	str	r2, [r1, #0]
 808424e:	2307      	movs	r3, #7
 8084250:	1ce2      	adds	r2, r4, #3
 8084252:	fb92 f3f3 	sdiv	r3, r2, r3
 8084256:	4d34      	ldr	r5, [pc, #208]	; (8084328 <gmtime_r+0x120>)
 8084258:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808425c:	fb94 f5f5 	sdiv	r5, r4, r5
 8084260:	1ad3      	subs	r3, r2, r3
 8084262:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8084266:	f240 57b4 	movw	r7, #1460	; 0x5b4
 808426a:	618b      	str	r3, [r1, #24]
 808426c:	4b2f      	ldr	r3, [pc, #188]	; (808432c <gmtime_r+0x124>)
 808426e:	4830      	ldr	r0, [pc, #192]	; (8084330 <gmtime_r+0x128>)
 8084270:	fb03 4405 	mla	r4, r3, r5, r4
 8084274:	fbb4 f2f2 	udiv	r2, r4, r2
 8084278:	fbb4 f3f7 	udiv	r3, r4, r7
 808427c:	fbb4 f0f0 	udiv	r0, r4, r0
 8084280:	4422      	add	r2, r4
 8084282:	1ad2      	subs	r2, r2, r3
 8084284:	f648 6694 	movw	r6, #36500	; 0x8e94
 8084288:	1a13      	subs	r3, r2, r0
 808428a:	f240 126d 	movw	r2, #365	; 0x16d
 808428e:	fbb3 f6f6 	udiv	r6, r3, r6
 8084292:	fbb3 f0f2 	udiv	r0, r3, r2
 8084296:	fbb3 f3f7 	udiv	r3, r3, r7
 808429a:	4434      	add	r4, r6
 808429c:	1ae3      	subs	r3, r4, r3
 808429e:	fb02 3310 	mls	r3, r2, r0, r3
 80842a2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80842a6:	2499      	movs	r4, #153	; 0x99
 80842a8:	3202      	adds	r2, #2
 80842aa:	fbb2 f2f4 	udiv	r2, r2, r4
 80842ae:	4354      	muls	r4, r2
 80842b0:	1ca6      	adds	r6, r4, #2
 80842b2:	2405      	movs	r4, #5
 80842b4:	fbb6 f4f4 	udiv	r4, r6, r4
 80842b8:	2a0a      	cmp	r2, #10
 80842ba:	bf34      	ite	cc
 80842bc:	2602      	movcc	r6, #2
 80842be:	f06f 0609 	mvncs.w	r6, #9
 80842c2:	4416      	add	r6, r2
 80842c4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80842c8:	fb02 0505 	mla	r5, r2, r5, r0
 80842cc:	1c5f      	adds	r7, r3, #1
 80842ce:	2e01      	cmp	r6, #1
 80842d0:	bf98      	it	ls
 80842d2:	3501      	addls	r5, #1
 80842d4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80842d8:	eba7 0704 	sub.w	r7, r7, r4
 80842dc:	d302      	bcc.n	80842e4 <gmtime_r+0xdc>
 80842de:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80842e2:	e014      	b.n	808430e <gmtime_r+0x106>
 80842e4:	0782      	lsls	r2, r0, #30
 80842e6:	d105      	bne.n	80842f4 <gmtime_r+0xec>
 80842e8:	2464      	movs	r4, #100	; 0x64
 80842ea:	fbb0 f2f4 	udiv	r2, r0, r4
 80842ee:	fb04 0212 	mls	r2, r4, r2, r0
 80842f2:	b94a      	cbnz	r2, 8084308 <gmtime_r+0x100>
 80842f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80842f8:	fbb0 f4f2 	udiv	r4, r0, r2
 80842fc:	fb02 0014 	mls	r0, r2, r4, r0
 8084300:	fab0 f280 	clz	r2, r0
 8084304:	0952      	lsrs	r2, r2, #5
 8084306:	e000      	b.n	808430a <gmtime_r+0x102>
 8084308:	2201      	movs	r2, #1
 808430a:	333b      	adds	r3, #59	; 0x3b
 808430c:	441a      	add	r2, r3
 808430e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8084312:	2300      	movs	r3, #0
 8084314:	61ca      	str	r2, [r1, #28]
 8084316:	614d      	str	r5, [r1, #20]
 8084318:	610e      	str	r6, [r1, #16]
 808431a:	60cf      	str	r7, [r1, #12]
 808431c:	620b      	str	r3, [r1, #32]
 808431e:	4608      	mov	r0, r1
 8084320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084322:	bf00      	nop
 8084324:	00015180 	.word	0x00015180
 8084328:	00023ab1 	.word	0x00023ab1
 808432c:	fffdc54f 	.word	0xfffdc54f
 8084330:	00023ab0 	.word	0x00023ab0

08084334 <__env_lock>:
 8084334:	4770      	bx	lr

08084336 <__env_unlock>:
 8084336:	4770      	bx	lr

08084338 <dynalib_user>:
 8084338:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 8084348:	0000 0000 7453 7261 7574 2070 7553 6363     ....Startup Succ
 8084358:	7365 6673 6c75 0000 0000 0000 0000 0000     essful..........
	...
 808438c:	7325 5320 253a 2e32 6630 2525 202c 3a51     %s S:%2.0f%%, Q:
 808439c:	3225 302e 2566 2025 2500 2e34 6631 2520     %2.0f%% .%4.1f %
 80843ac:	0025 6925 7420 7069 0073 3425 312e 2066     %.%i tips.%4.1f 
 80843bc:	0043 5441 432b 5546 3d4e 3631 0a0d 7b00     C.AT+CFUN=16...{
 80843cc:	5322 696f 6d6c 696f 7473 7275 3165 3a22     "Soilmoisture1":
 80843dc:	3425 312e 2c66 2220 6f53 6c69 6f6d 7369     %4.1f, "Soilmois
 80843ec:	7574 6572 2232 253a 2e34 6631 202c 5322     ture2":%4.1f, "S
 80843fc:	696f 6d6c 696f 7473 7275 3365 3a22 3425     oilmoisture3":%4
 808440c:	312e 2c66 2220 6f53 6c69 6f6d 7369 7574     .1f, "Soilmoistu
 808441c:	6572 2234 253a 2e34 6631 202c 5322 696f     re4":%4.1f, "Soi
 808442c:	6d6c 696f 7473 7275 3565 3a22 3425 312e     lmoisture5":%4.1
 808443c:	2c66 2220 6f53 6c69 6f6d 7369 7574 6572     f, "Soilmoisture
 808444c:	2236 253a 2e34 6631 202c 5022 6572 6963     6":%4.1f, "Preci
 808445c:	6970 6174 6974 6e6f 3a22 2520 2c69 2220     pitation": %i, "
 808446c:	6f53 6c69 6574 706d 3a22 3425 312e 2c66     Soiltemp":%4.1f,
 808447c:	2220 7548 696d 6964 7974 3a22 3425 312e      "Humidity":%4.1
 808448c:	2c66 2220 6554 706d 7265 7461 7275 2265     f, "Temperature"
 808449c:	253a 2e34 6631 202c 5022 6e61 6c65 7568     :%4.1f, "Panelhu
 80844ac:	696d 6964 7974 3a22 3425 312e 2c66 2220     midity":%4.1f, "
 80844bc:	6150 656e 746c 6d65 6570 6172 7574 6572     Paneltemperature
 80844cc:	3a22 3425 312e 2c66 2220 6142 7474 7265     ":%4.1f, "Batter
 80844dc:	2279 253a 2e34 6631 202c 5222 6461 6f69     y":%4.1f, "Radio
 80844ec:	6574 6863 3a22 2520 2c69 2220 6953 6e67     tech": %i, "Sign
 80844fc:	6c61 3a22 2520 2e34 6631 202c 5122 6175     al": %4.1f, "Qua
 808450c:	696c 7974 3a22 2520 2e34 6631 202c 5222     lity": %4.1f, "R
 808451c:	7365 7465 2273 253a 2c69 2220 6c41 7265     esets":%i, "Aler
 808452c:	7374 3a22 6925 007d 6543 6c6c 6c75 7261     ts":%i}.Cellular
 808453c:	4c5f 5069 5f6f 6f48 6b6f 4e00 206f 6144     _LiPo_Hook.No Da
 808454c:	6174 5500 6962 6f64 7374 4820 6f6f 006b     ta.Ubidots Hook.
 808455c:	6552 7073 6e6f 6573 5220 6365 6965 6576     Response Receive
 808456c:	0064 7453 7461 0065 6553 2074 6556 6272     d.State.Set Verb
 808457c:	736f 2065 6f4d 6564 3000 4300 656c 7261     ose Mode.0.Clear
 808458c:	6465 5620 7265 6f62 6573 4d20 646f 0065     ed Verbose Mode.
 808459c:	6954 656d 7a20 6e6f 2065 666f 7366 7465     Time zone offset
 80845ac:	2520 0069 6954 656d 4c00 776f 5020 776f      %i.Time.Low Pow
 80845bc:	7265 4e00 726f 616d 206c 704f 7265 7461     er.Normal Operat
 80845cc:	6f69 736e 4600 6f72 206d 7325 7420 206f     ions.From %s to 
 80845dc:	7325 5300 6174 6574 5420 6172 736e 7469     %s.State Transit
 80845ec:	6f69 006e 7245 6f72 2072 6174 696b 676e     ion.Error taking
 80845fc:	4d20 6165 7573 6572 656d 746e 0073 7073      Measurements.sp
 808460c:	7261 2f6b 6564 6976 6563 732f 7365 6973     ark/device/sessi
 808461c:	6e6f 652f 646e 4700 696f 676e 7420 206f     on/end.Going to 
 808462c:	6c53 6565 0070 6f4c 2077 6142 7474 7265     Sleep.Low Batter
 808463c:	2079 202d 6c53 6565 6970 676e 4500 7272     y - Sleeping.Err
 808464c:	726f 5320 6174 6574 2d20 5220 7365 7465     or State - Reset
 808465c:	4500 7272 726f 5320 6174 6574 2d20 5020     .Error State - P
 808466c:	776f 7265 4320 6379 656c 4500 7272 726f     ower Cycle.Error
 808467c:	5320 6174 6574 2d20 4620 6c75 206c 6f4d      State - Full Mo
 808468c:	6564 206d 6552 6573 0074 6953 6e67 6c61     dem Reset.Signal
 808469c:	5200 7365 7465 6f43 6e75 0074 6552 656c     .ResetCount.Rele
 80846ac:	7361 0065 7473 7461 4f65 4366 6768 6c00     ase.stateOfChg.l
 80846bc:	776f 6f50 6577 4d72 646f 0065 6574 706d     owPowerMode.temp
 80846cc:	7265 7461 7275 0065 7568 696d 6964 7974     erature.humidity
 80846dc:	5300 696f 546c 6d65 0070 6f53 6c69 6f4d     .SoilTemp.SoilMo
 80846ec:	7369 7574 6572 0031 6f53 6c69 6f4d 7369     isture1.SoilMois
 80846fc:	7574 6572 0032 6f53 6c69 6f4d 7369 7574     ture2.SoilMoistu
 808470c:	6572 0033 6f53 6c69 6f4d 7369 7574 6572     re3.SoilMoisture
 808471c:	0034 6f53 6c69 6f4d 7369 7574 6572 0035     4.SoilMoisture5.
 808472c:	6f53 6c69 6f4d 7369 7574 6572 0036 654d     SoilMoisture6.Me
 808473c:	7361 7275 2d65 6f4e 0077 6f4c 5077 776f     asure-Now.LowPow
 808474c:	7265 6f4d 6564 5600 7265 6f62 6573 4d2d     erMode.Verbose-M
 808475c:	646f 0065 6553 5474 6d69 5a65 6e6f 0065     ode.SetTimeZone.
 808476c:	6146 6c69 6465 7420 206f 6f63 6e6e 6365     Failed to connec
 808477c:	0074 7453 7261 7574 0070 6e55 6e6b 776f     t.Startup.Unknow
 808478c:	006e 6f4e 656e 5700 4669 0069 5347 004d     n.None.WiFi.GSM.
 808479c:	4d55 5354 4300 4d44 0041 544c 0045 4549     UMTS.CDMA.LTE.IE
 80847ac:	4545 3038 3132 3435 3100 302e 0031 0000     EE802154.1.01...

080847bc <_ZTVN5spark13CellularClassE>:
	...
 80847c4:	173f 0808 1735 0808 172b 0808 169d 0808     ?...5...+.......
 80847d4:	171f 0808 1713 0808 1707 0808 16ff 0808     ................
 80847e4:	16f5 0808 16eb 0808 16a7 0808               ............

080847f0 <_ZTV14CellularSignal>:
	...
 80847f8:	17fd 0808 187f 0808 17ff 0808 18bd 0808     ................
 8084808:	1805 0808 188d 0808 1829 0808 184d 0808     ........)...M...
 8084818:	fffc ffff 0000 0000 1877 0808               ........w...

08084824 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 808482c:	1905 0808 190b 0808 1933 0808 1917 0808     ........3.......
 808483c:	1907 0808                                   ....

08084840 <_ZTV7TwoWire>:
	...
 8084848:	1ea5 0808 1eef 0808 1ec7 0808 1ea7 0808     ................
 8084858:	1ecf 0808 1ed7 0808 1edf 0808 1ee7 0808     ................

08084868 <_ZTV9IPAddress>:
	...
 8084870:	1f37 0808 1f29 0808 1f2b 0808 0066 6e6c     7...)...+...f.ln
 8084880:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 8084890:	3025 3031 2075 5d00 0020 6425 2c00 0020     %010u .] .%d., .
 80848a0:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
 80848b0:	6564 6174 6c69 2073 203d 6200 7561 0064     details = .baud.
 80848c0:	6553 6972 6c61 5500 4253 6553 6972 6c61     Serial.USBSerial
 80848d0:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
 80848e0:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
 80848f0:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
 8084900:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
 8084910:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
 8084920:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
 8084930:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
 8084940:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
 8084950:	6170 696e 0063 6c61 006c 0000               panic.all...

0808495c <_ZTVN5spark12NetworkClassE>:
	...
 8084964:	1fd5 0808 1fdf 0808 1fe9 0808 1ff3 0808     ................
 8084974:	1ffd 0808 2009 0808 2015 0808 2021 0808     ..... ... ..! ..
 8084984:	2029 0808 2033 0808 203d 0808               ) ..3 ..= ..

08084990 <_ZTV8SPIClass>:
	...
 8084998:	21f9 0808 21fb 0808 2b25 3330 3a64 3025     .!...!..%+03d:%0
 80849a8:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80849b8:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080849c8 <_ZTV11USARTSerial>:
	...
 80849d0:	2569 0808 258d 0808 2599 0808 209d 0808     i%...%...%... ..
 80849e0:	2575 0808 2581 0808 257b 0808 2587 0808     u%...%..{%...%..
 80849f0:	256b 0808 256f 0808                         k%..o%..

080849f8 <_ZTV9USBSerial>:
	...
 8084a00:	2641 0808 2685 0808 265f 0808 209d 0808     A&...&.._&... ..
 8084a10:	2659 0808 2643 0808 264b 0808 267f 0808     Y&..C&..K&...&..
 8084a20:	2653 0808 263d 0808                         S&..=&..

08084a28 <day_name.4723>:
 8084a28:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8084a38:	6972 6153 4a74                                   riSat

08084a3d <mon_name.4724>:
 8084a3d:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8084a4d:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8084a5d:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 8084a6d:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 8084a7d:	6425 000a                                   %d..

08084a81 <_ctype_>:
 8084a81:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8084a91:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8084aa1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8084ab1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8084ac1:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8084ad1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8084ae1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8084af1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8084b01:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08084b84 <__sf_fake_stdin>:
	...

08084ba4 <__sf_fake_stdout>:
	...

08084bc4 <__sf_fake_stderr>:
	...

08084be4 <__month_lengths>:
 8084be4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8084bf4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8084c04:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8084c14:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8084c24:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8084c34:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8084c44:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 8084c54:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 8084c64:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 8084c74:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

08084c80 <link_const_variable_data_end>:
 8084c80:	080810e5 	.word	0x080810e5
 8084c84:	080817bd 	.word	0x080817bd
 8084c88:	08081fc5 	.word	0x08081fc5
 8084c8c:	08082089 	.word	0x08082089
 8084c90:	080821dd 	.word	0x080821dd
 8084c94:	080823b5 	.word	0x080823b5
 8084c98:	08082555 	.word	0x08082555
 8084c9c:	08082a25 	.word	0x08082a25
 8084ca0:	08082a55 	.word	0x08082a55
 8084ca4:	08082ac1 	.word	0x08082ac1
 8084ca8:	08082b85 	.word	0x08082b85
 8084cac:	08082c09 	.word	0x08082c09
 8084cb0:	08082c8d 	.word	0x08082c8d

08084cb4 <link_constructors_end>:
	...
